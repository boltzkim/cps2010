/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PublisherListenerCallBack : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PublisherListenerCallBack(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PublisherListenerCallBack obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PublisherListenerCallBack() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cpscsharpmodulePINVOKE.delete_PublisherListenerCallBack(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void on_offered_deadline_missed(DataWriter writer, OfferedDeadlineMissedStatus status) {
    cpscsharpmodulePINVOKE.PublisherListenerCallBack_on_offered_deadline_missed(swigCPtr, DataWriter.getCPtr(writer), OfferedDeadlineMissedStatus.getCPtr(status));
  }

  public virtual void on_offered_incompatible_qos(DataWriter writer, OfferedIncompatibleQosStatus status) {
    cpscsharpmodulePINVOKE.PublisherListenerCallBack_on_offered_incompatible_qos(swigCPtr, DataWriter.getCPtr(writer), OfferedIncompatibleQosStatus.getCPtr(status));
  }

  public virtual void on_liveliness_lost(DataWriter writer, LivelinessLostStatus status) {
    cpscsharpmodulePINVOKE.PublisherListenerCallBack_on_liveliness_lost(swigCPtr, DataWriter.getCPtr(writer), LivelinessLostStatus.getCPtr(status));
  }

  public virtual void on_publication_matched(DataWriter writer, PublicationMatchedStatus status) {
    cpscsharpmodulePINVOKE.PublisherListenerCallBack_on_publication_matched(swigCPtr, DataWriter.getCPtr(writer), PublicationMatchedStatus.getCPtr(status));
  }

  public PublisherListenerCallBack() : this(cpscsharpmodulePINVOKE.new_PublisherListenerCallBack(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("on_offered_deadline_missed", swigMethodTypes0))
      swigDelegate0 = new SwigDelegatePublisherListenerCallBack_0(SwigDirectoron_offered_deadline_missed);
    if (SwigDerivedClassHasMethod("on_offered_incompatible_qos", swigMethodTypes1))
      swigDelegate1 = new SwigDelegatePublisherListenerCallBack_1(SwigDirectoron_offered_incompatible_qos);
    if (SwigDerivedClassHasMethod("on_liveliness_lost", swigMethodTypes2))
      swigDelegate2 = new SwigDelegatePublisherListenerCallBack_2(SwigDirectoron_liveliness_lost);
    if (SwigDerivedClassHasMethod("on_publication_matched", swigMethodTypes3))
      swigDelegate3 = new SwigDelegatePublisherListenerCallBack_3(SwigDirectoron_publication_matched);
    cpscsharpmodulePINVOKE.PublisherListenerCallBack_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PublisherListenerCallBack));
    return hasDerivedMethod;
  }

  private void SwigDirectoron_offered_deadline_missed(IntPtr writer, IntPtr status) {
    on_offered_deadline_missed((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new OfferedDeadlineMissedStatus(status, false));
  }

  private void SwigDirectoron_offered_incompatible_qos(IntPtr writer, IntPtr status) {
    on_offered_incompatible_qos((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new OfferedIncompatibleQosStatus(status, false));
  }

  private void SwigDirectoron_liveliness_lost(IntPtr writer, IntPtr status) {
    on_liveliness_lost((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new LivelinessLostStatus(status, false));
  }

  private void SwigDirectoron_publication_matched(IntPtr writer, IntPtr status) {
    on_publication_matched((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new PublicationMatchedStatus(status, false));
  }

  public delegate void SwigDelegatePublisherListenerCallBack_0(IntPtr writer, IntPtr status);
  public delegate void SwigDelegatePublisherListenerCallBack_1(IntPtr writer, IntPtr status);
  public delegate void SwigDelegatePublisherListenerCallBack_2(IntPtr writer, IntPtr status);
  public delegate void SwigDelegatePublisherListenerCallBack_3(IntPtr writer, IntPtr status);

  private SwigDelegatePublisherListenerCallBack_0 swigDelegate0;
  private SwigDelegatePublisherListenerCallBack_1 swigDelegate1;
  private SwigDelegatePublisherListenerCallBack_2 swigDelegate2;
  private SwigDelegatePublisherListenerCallBack_3 swigDelegate3;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(DataWriter), typeof(OfferedDeadlineMissedStatus) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(DataWriter), typeof(OfferedIncompatibleQosStatus) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(DataWriter), typeof(LivelinessLostStatus) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(DataWriter), typeof(PublicationMatchedStatus) };
}
