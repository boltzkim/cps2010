/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DomainParticipantListenerCallBack : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DomainParticipantListenerCallBack(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DomainParticipantListenerCallBack obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DomainParticipantListenerCallBack() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cpscsharpmodulePINVOKE.delete_DomainParticipantListenerCallBack(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void on_inconsistent_topic(Topic the_topic, InconsistentTopicStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_inconsistent_topic(swigCPtr, Topic.getCPtr(the_topic), InconsistentTopicStatus.getCPtr(status));
  }

  public virtual void on_offered_deadline_missed(DataWriter writer, OfferedDeadlineMissedStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_offered_deadline_missed(swigCPtr, DataWriter.getCPtr(writer), OfferedDeadlineMissedStatus.getCPtr(status));
  }

  public virtual void on_offered_incompatible_qos(DataWriter writer, OfferedIncompatibleQosStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_offered_incompatible_qos(swigCPtr, DataWriter.getCPtr(writer), OfferedIncompatibleQosStatus.getCPtr(status));
  }

  public virtual void on_liveliness_lost(DataWriter writer, LivelinessLostStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_liveliness_lost(swigCPtr, DataWriter.getCPtr(writer), LivelinessLostStatus.getCPtr(status));
  }

  public virtual void on_publication_matched(DataWriter writer, PublicationMatchedStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_publication_matched(swigCPtr, DataWriter.getCPtr(writer), PublicationMatchedStatus.getCPtr(status));
  }

  public virtual void on_requested_deadline_missed(DataReader the_reader, RequestedDeadlineMissedStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_requested_deadline_missed(swigCPtr, DataReader.getCPtr(the_reader), RequestedDeadlineMissedStatus.getCPtr(status));
  }

  public virtual void on_requested_incompatible_qos(DataReader the_reader, RequestedIncompatibleQosStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_requested_incompatible_qos(swigCPtr, DataReader.getCPtr(the_reader), RequestedIncompatibleQosStatus.getCPtr(status));
  }

  public virtual void on_sample_rejected(DataReader the_reader, SampleRejectedStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_sample_rejected(swigCPtr, DataReader.getCPtr(the_reader), SampleRejectedStatus.getCPtr(status));
  }

  public virtual void on_liveliness_changed(DataReader the_reader, LivelinessChangedStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_liveliness_changed(swigCPtr, DataReader.getCPtr(the_reader), LivelinessChangedStatus.getCPtr(status));
  }

  public virtual void on_data_available(DataReader p_reader) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_data_available(swigCPtr, DataReader.getCPtr(p_reader));
  }

  public virtual void on_subscription_matched(DataReader the_reader, SubscriptionMatchedStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_subscription_matched(swigCPtr, DataReader.getCPtr(the_reader), SubscriptionMatchedStatus.getCPtr(status));
  }

  public virtual void on_sample_lost(DataReader the_reader, SampleLostStatus status) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_sample_lost(swigCPtr, DataReader.getCPtr(the_reader), SampleLostStatus.getCPtr(status));
  }

  public virtual void on_data_on_readers(Subscriber p_subscriber) {
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_on_data_on_readers(swigCPtr, Subscriber.getCPtr(p_subscriber));
  }

  public DomainParticipantListenerCallBack() : this(cpscsharpmodulePINVOKE.new_DomainParticipantListenerCallBack(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("on_inconsistent_topic", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateDomainParticipantListenerCallBack_0(SwigDirectoron_inconsistent_topic);
    if (SwigDerivedClassHasMethod("on_offered_deadline_missed", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateDomainParticipantListenerCallBack_1(SwigDirectoron_offered_deadline_missed);
    if (SwigDerivedClassHasMethod("on_offered_incompatible_qos", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateDomainParticipantListenerCallBack_2(SwigDirectoron_offered_incompatible_qos);
    if (SwigDerivedClassHasMethod("on_liveliness_lost", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateDomainParticipantListenerCallBack_3(SwigDirectoron_liveliness_lost);
    if (SwigDerivedClassHasMethod("on_publication_matched", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateDomainParticipantListenerCallBack_4(SwigDirectoron_publication_matched);
    if (SwigDerivedClassHasMethod("on_requested_deadline_missed", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateDomainParticipantListenerCallBack_5(SwigDirectoron_requested_deadline_missed);
    if (SwigDerivedClassHasMethod("on_requested_incompatible_qos", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateDomainParticipantListenerCallBack_6(SwigDirectoron_requested_incompatible_qos);
    if (SwigDerivedClassHasMethod("on_sample_rejected", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateDomainParticipantListenerCallBack_7(SwigDirectoron_sample_rejected);
    if (SwigDerivedClassHasMethod("on_liveliness_changed", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateDomainParticipantListenerCallBack_8(SwigDirectoron_liveliness_changed);
    if (SwigDerivedClassHasMethod("on_data_available", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateDomainParticipantListenerCallBack_9(SwigDirectoron_data_available);
    if (SwigDerivedClassHasMethod("on_subscription_matched", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateDomainParticipantListenerCallBack_10(SwigDirectoron_subscription_matched);
    if (SwigDerivedClassHasMethod("on_sample_lost", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateDomainParticipantListenerCallBack_11(SwigDirectoron_sample_lost);
    if (SwigDerivedClassHasMethod("on_data_on_readers", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateDomainParticipantListenerCallBack_12(SwigDirectoron_data_on_readers);
    cpscsharpmodulePINVOKE.DomainParticipantListenerCallBack_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(DomainParticipantListenerCallBack));
    return hasDerivedMethod;
  }

  private void SwigDirectoron_inconsistent_topic(IntPtr the_topic, IntPtr status) {
    on_inconsistent_topic((the_topic == IntPtr.Zero) ? null : new Topic(the_topic, false), (status == IntPtr.Zero) ? null : new InconsistentTopicStatus(status, false));
  }

  private void SwigDirectoron_offered_deadline_missed(IntPtr writer, IntPtr status) {
    on_offered_deadline_missed((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new OfferedDeadlineMissedStatus(status, false));
  }

  private void SwigDirectoron_offered_incompatible_qos(IntPtr writer, IntPtr status) {
    on_offered_incompatible_qos((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new OfferedIncompatibleQosStatus(status, false));
  }

  private void SwigDirectoron_liveliness_lost(IntPtr writer, IntPtr status) {
    on_liveliness_lost((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new LivelinessLostStatus(status, false));
  }

  private void SwigDirectoron_publication_matched(IntPtr writer, IntPtr status) {
    on_publication_matched((writer == IntPtr.Zero) ? null : new DataWriter(writer, false), (status == IntPtr.Zero) ? null : new PublicationMatchedStatus(status, false));
  }

  private void SwigDirectoron_requested_deadline_missed(IntPtr the_reader, IntPtr status) {
    on_requested_deadline_missed((the_reader == IntPtr.Zero) ? null : new DataReader(the_reader, false), (status == IntPtr.Zero) ? null : new RequestedDeadlineMissedStatus(status, false));
  }

  private void SwigDirectoron_requested_incompatible_qos(IntPtr the_reader, IntPtr status) {
    on_requested_incompatible_qos((the_reader == IntPtr.Zero) ? null : new DataReader(the_reader, false), (status == IntPtr.Zero) ? null : new RequestedIncompatibleQosStatus(status, false));
  }

  private void SwigDirectoron_sample_rejected(IntPtr the_reader, IntPtr status) {
    on_sample_rejected((the_reader == IntPtr.Zero) ? null : new DataReader(the_reader, false), (status == IntPtr.Zero) ? null : new SampleRejectedStatus(status, false));
  }

  private void SwigDirectoron_liveliness_changed(IntPtr the_reader, IntPtr status) {
    on_liveliness_changed((the_reader == IntPtr.Zero) ? null : new DataReader(the_reader, false), (status == IntPtr.Zero) ? null : new LivelinessChangedStatus(status, false));
  }

  private void SwigDirectoron_data_available(IntPtr p_reader) {
    on_data_available((p_reader == IntPtr.Zero) ? null : new DataReader(p_reader, false));
  }

  private void SwigDirectoron_subscription_matched(IntPtr the_reader, IntPtr status) {
    on_subscription_matched((the_reader == IntPtr.Zero) ? null : new DataReader(the_reader, false), (status == IntPtr.Zero) ? null : new SubscriptionMatchedStatus(status, false));
  }

  private void SwigDirectoron_sample_lost(IntPtr the_reader, IntPtr status) {
    on_sample_lost((the_reader == IntPtr.Zero) ? null : new DataReader(the_reader, false), (status == IntPtr.Zero) ? null : new SampleLostStatus(status, false));
  }

  private void SwigDirectoron_data_on_readers(IntPtr p_subscriber) {
    on_data_on_readers((p_subscriber == IntPtr.Zero) ? null : new Subscriber(p_subscriber, false));
  }

  public delegate void SwigDelegateDomainParticipantListenerCallBack_0(IntPtr the_topic, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_1(IntPtr writer, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_2(IntPtr writer, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_3(IntPtr writer, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_4(IntPtr writer, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_5(IntPtr the_reader, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_6(IntPtr the_reader, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_7(IntPtr the_reader, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_8(IntPtr the_reader, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_9(IntPtr p_reader);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_10(IntPtr the_reader, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_11(IntPtr the_reader, IntPtr status);
  public delegate void SwigDelegateDomainParticipantListenerCallBack_12(IntPtr p_subscriber);

  private SwigDelegateDomainParticipantListenerCallBack_0 swigDelegate0;
  private SwigDelegateDomainParticipantListenerCallBack_1 swigDelegate1;
  private SwigDelegateDomainParticipantListenerCallBack_2 swigDelegate2;
  private SwigDelegateDomainParticipantListenerCallBack_3 swigDelegate3;
  private SwigDelegateDomainParticipantListenerCallBack_4 swigDelegate4;
  private SwigDelegateDomainParticipantListenerCallBack_5 swigDelegate5;
  private SwigDelegateDomainParticipantListenerCallBack_6 swigDelegate6;
  private SwigDelegateDomainParticipantListenerCallBack_7 swigDelegate7;
  private SwigDelegateDomainParticipantListenerCallBack_8 swigDelegate8;
  private SwigDelegateDomainParticipantListenerCallBack_9 swigDelegate9;
  private SwigDelegateDomainParticipantListenerCallBack_10 swigDelegate10;
  private SwigDelegateDomainParticipantListenerCallBack_11 swigDelegate11;
  private SwigDelegateDomainParticipantListenerCallBack_12 swigDelegate12;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(Topic), typeof(InconsistentTopicStatus) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(DataWriter), typeof(OfferedDeadlineMissedStatus) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(DataWriter), typeof(OfferedIncompatibleQosStatus) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(DataWriter), typeof(LivelinessLostStatus) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(DataWriter), typeof(PublicationMatchedStatus) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(DataReader), typeof(RequestedDeadlineMissedStatus) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(DataReader), typeof(RequestedIncompatibleQosStatus) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(DataReader), typeof(SampleRejectedStatus) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(DataReader), typeof(LivelinessChangedStatus) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(DataReader) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(DataReader), typeof(SubscriptionMatchedStatus) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(DataReader), typeof(SampleLostStatus) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(Subscriber) };
}
