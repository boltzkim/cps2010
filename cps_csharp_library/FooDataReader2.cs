/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class FooDataReader2 : DataReader2 {
  private HandleRef swigCPtr;

  internal FooDataReader2(IntPtr cPtr, bool cMemoryOwn) : base(cpscsharpmodulePINVOKE.FooDataReader2_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(FooDataReader2 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FooDataReader2() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cpscsharpmodulePINVOKE.delete_FooDataReader2(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FooDataReader2(FooDataReader fooDataReader) : this(cpscsharpmodulePINVOKE.new_FooDataReader2(FooDataReader.getCPtr(fooDataReader)), true) {
  }

  public FooDataReader getFooDataReader() {
    IntPtr cPtr = cpscsharpmodulePINVOKE.FooDataReader2_getFooDataReader(swigCPtr);
    FooDataReader ret = (cPtr == IntPtr.Zero) ? null : new FooDataReader(cPtr, false);
    return ret;
  }

  public int read(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_read__SWIG_0(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, sample_states, view_states, instance_states);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int take(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_take(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, sample_states, view_states, instance_states);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int read_w_condition(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, ReadCondition2 condition) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_read_w_condition(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, ReadCondition2.getCPtr(condition));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int take_w_condition(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, ReadCondition2 condition) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_take_w_condition(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, ReadCondition2.getCPtr(condition));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int read_next_sample(Foo2 data_value, SampleInfo2 sample_info) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_read_next_sample(swigCPtr, Foo2.getCPtr(data_value), SampleInfo2.getCPtr(sample_info));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int take_next_sample(Foo2 data_value, SampleInfo2 sample_info) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_take_next_sample(swigCPtr, Foo2.getCPtr(data_value), SampleInfo2.getCPtr(sample_info));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int read_instance(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, int a_handle, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_read_instance(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, a_handle, sample_states, view_states, instance_states);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int take_instance(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, int a_handle, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_take_instance(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, a_handle, sample_states, view_states, instance_states);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int read_next_instance(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, SWIGTYPE_p_long previous_handle, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_read_next_instance(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, SWIGTYPE_p_long.getCPtr(previous_handle), sample_states, view_states, instance_states);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int take_next_instance(FooSeq2 data_values, SampleInfoSeq2 sample_infos, int max_samples, SWIGTYPE_p_long previous_handle, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_take_next_instance(swigCPtr, FooSeq2.getCPtr(data_values), SampleInfoSeq2.getCPtr(sample_infos), max_samples, SWIGTYPE_p_long.getCPtr(previous_handle), sample_states, view_states, instance_states);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_key_value(Foo2 key_holder, int handle) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_get_key_value(swigCPtr, Foo2.getCPtr(key_holder), handle);
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int lookup_instance(Foo2 key_holder) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_lookup_instance(swigCPtr, Foo2.getCPtr(key_holder));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int read(FooSeq data_values, SampleInfoSeq sample_infos, int max_samples, uint sample_states, uint view_states, uint instance_states) {
    int ret = cpscsharpmodulePINVOKE.FooDataReader2_read__SWIG_1(swigCPtr, FooSeq.getCPtr(data_values), SampleInfoSeq.getCPtr(sample_infos), max_samples, sample_states, view_states, instance_states);
    return ret;
  }

}
