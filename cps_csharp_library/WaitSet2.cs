/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class WaitSet2 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WaitSet2(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(WaitSet2 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~WaitSet2() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cpscsharpmodulePINVOKE.delete_WaitSet2(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public WaitSet2() : this(cpscsharpmodulePINVOKE.new_WaitSet2__SWIG_0(), true) {
  }

  public WaitSet2(WaitSet waitset) : this(cpscsharpmodulePINVOKE.new_WaitSet2__SWIG_1(WaitSet.getCPtr(waitset)), true) {
  }

  public WaitSet getWaitSet() {
    IntPtr cPtr = cpscsharpmodulePINVOKE.WaitSet2_getWaitSet(swigCPtr);
    WaitSet ret = (cPtr == IntPtr.Zero) ? null : new WaitSet(cPtr, false);
    return ret;
  }

  public int wait(ConditionSeq2 active_conditions, Duration_t timeout) {
    int ret = cpscsharpmodulePINVOKE.WaitSet2_wait(swigCPtr, ConditionSeq2.getCPtr(active_conditions), Duration_t.getCPtr(timeout));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int attach_condition(Condition2 cond) {
    int ret = cpscsharpmodulePINVOKE.WaitSet2_attach_condition(swigCPtr, Condition2.getCPtr(cond));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int detach_condition(Condition2 cond) {
    int ret = cpscsharpmodulePINVOKE.WaitSet2_detach_condition(swigCPtr, Condition2.getCPtr(cond));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_conditions(ConditionSeq attached_conditions) {
    int ret = cpscsharpmodulePINVOKE.WaitSet2_get_conditions(swigCPtr, ConditionSeq.getCPtr(attached_conditions));
    if (cpscsharpmodulePINVOKE.SWIGPendingException.Pending) throw cpscsharpmodulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
