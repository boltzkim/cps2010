/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class TopicListenerCallBack : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TopicListenerCallBack(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TopicListenerCallBack obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TopicListenerCallBack() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cpscsharpmodulePINVOKE.delete_TopicListenerCallBack(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void on_inconsistent_topic(Topic the_topic, InconsistentTopicStatus status) {
    cpscsharpmodulePINVOKE.TopicListenerCallBack_on_inconsistent_topic(swigCPtr, Topic.getCPtr(the_topic), InconsistentTopicStatus.getCPtr(status));
  }

  public TopicListenerCallBack() : this(cpscsharpmodulePINVOKE.new_TopicListenerCallBack(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("on_inconsistent_topic", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTopicListenerCallBack_0(SwigDirectoron_inconsistent_topic);
    cpscsharpmodulePINVOKE.TopicListenerCallBack_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TopicListenerCallBack));
    return hasDerivedMethod;
  }

  private void SwigDirectoron_inconsistent_topic(IntPtr the_topic, IntPtr status) {
    on_inconsistent_topic((the_topic == IntPtr.Zero) ? null : new Topic(the_topic, false), (status == IntPtr.Zero) ? null : new InconsistentTopicStatus(status, false));
  }

  public delegate void SwigDelegateTopicListenerCallBack_0(IntPtr the_topic, IntPtr status);

  private SwigDelegateTopicListenerCallBack_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(Topic), typeof(InconsistentTopicStatus) };
}
