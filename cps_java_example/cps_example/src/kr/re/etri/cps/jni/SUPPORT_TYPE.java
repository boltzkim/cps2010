/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package kr.re.etri.cps.jni;

public final class SUPPORT_TYPE {
  public final static SUPPORT_TYPE DDS_STRING_TYPE = new SUPPORT_TYPE("DDS_STRING_TYPE");
  public final static SUPPORT_TYPE DDS_BYTE_TYPE = new SUPPORT_TYPE("DDS_BYTE_TYPE");
  public final static SUPPORT_TYPE DDS_INTEGER8_TYPE = new SUPPORT_TYPE("DDS_INTEGER8_TYPE");
  public final static SUPPORT_TYPE DDS_INTEGER16_TYPE = new SUPPORT_TYPE("DDS_INTEGER16_TYPE");
  public final static SUPPORT_TYPE DDS_INTEGER32_TYPE = new SUPPORT_TYPE("DDS_INTEGER32_TYPE");
  public final static SUPPORT_TYPE DDS_INTEGER64_TYPE = new SUPPORT_TYPE("DDS_INTEGER64_TYPE");
  public final static SUPPORT_TYPE DDS_UINTEGER8_TYPE = new SUPPORT_TYPE("DDS_UINTEGER8_TYPE");
  public final static SUPPORT_TYPE DDS_UINTEGER16_TYPE = new SUPPORT_TYPE("DDS_UINTEGER16_TYPE");
  public final static SUPPORT_TYPE DDS_UINTEGER32_TYPE = new SUPPORT_TYPE("DDS_UINTEGER32_TYPE");
  public final static SUPPORT_TYPE DDS_UINTEGER64_TYPE = new SUPPORT_TYPE("DDS_UINTEGER64_TYPE");
  public final static SUPPORT_TYPE DDS_FLOAT_TYPE = new SUPPORT_TYPE("DDS_FLOAT_TYPE");
  public final static SUPPORT_TYPE DDS_DOUBLE_TYPE = new SUPPORT_TYPE("DDS_DOUBLE_TYPE");
  public final static SUPPORT_TYPE DDS_BOOLEAN_TYPE = new SUPPORT_TYPE("DDS_BOOLEAN_TYPE");
  public final static SUPPORT_TYPE DDS_CHARACTER_TYPE = new SUPPORT_TYPE("DDS_CHARACTER_TYPE");
  public final static SUPPORT_TYPE DDS_STRUCT_TYPE = new SUPPORT_TYPE("DDS_STRUCT_TYPE");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static SUPPORT_TYPE swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + SUPPORT_TYPE.class + " with value " + swigValue);
  }

  private SUPPORT_TYPE(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private SUPPORT_TYPE(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private SUPPORT_TYPE(String swigName, SUPPORT_TYPE swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static SUPPORT_TYPE[] swigValues = { DDS_STRING_TYPE, DDS_BYTE_TYPE, DDS_INTEGER8_TYPE, DDS_INTEGER16_TYPE, DDS_INTEGER32_TYPE, DDS_INTEGER64_TYPE, DDS_UINTEGER8_TYPE, DDS_UINTEGER16_TYPE, DDS_UINTEGER32_TYPE, DDS_UINTEGER64_TYPE, DDS_FLOAT_TYPE, DDS_DOUBLE_TYPE, DDS_BOOLEAN_TYPE, DDS_CHARACTER_TYPE, DDS_STRUCT_TYPE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

