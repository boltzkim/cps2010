/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


 

#include <core.h>
#include <cpsdcps.h>
#include <dcps_func.h>
#include <rtps.h>


#ifdef __cplusplus
extern "C" {
#endif

	static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);
	static JNIEnv *jenvstatic = NULL;
	jsize FillMeInAsSizeCannotBeDeterminedAutomatically = 0;

#ifdef __cplusplus
}
#endif


SWIGINTERN Foo *Foo_allocation(Foo *self,int size){
		return (Foo*)malloc(size);
	}
SWIGINTERN Foo *FooSeq_getFoo(FooSeq *self,int i){
		return self->pp_foo[i];
	}
SWIGINTERN ReturnCode_t FooTypeSupport_register_type(FooTypeSupport *self,DomainParticipant *participant,char *type_name){
		return self->register_type(self, participant, type_name);
	}
SWIGINTERN char *FooTypeSupport_get_type_name(FooTypeSupport *self){
		return self->get_type_name(self);
	}
SWIGINTERN dds_parameter_t *FooTypeSupport_getNewParameter(FooTypeSupport *self,char *fieldname,SUPPORT_TYPE type,int i_size){
		return getNewParameter(fieldname, type, i_size);
	}
SWIGINTERN dds_parameter_t *FooTypeSupport_getNewParameterKey(FooTypeSupport *self,char *fieldname,SUPPORT_TYPE type,int i_size){
		return getNewParameterKey(fieldname, type, i_size);
	}
SWIGINTERN FooTypeSupport *FooTypeSupport_getNewFooTypeSupport(FooTypeSupport *self){
		return getNewFooTypeSupport();
	}
SWIGINTERN void FooTypeSupport_insert_param(FooTypeSupport *self,dds_parameter_t *p_para){
		INSERT_PARAM(self->pp_parameters,self->i_parameters, self->i_parameters, p_para);
		p_para->offset = self->offsetcount;
		self->offsetcount += p_para->i_size;
		self->i_size += p_para->i_size;
	}
SWIGINTERN int FooTypeSupport_getValueInteger(FooTypeSupport *self,Foo *foo,char *fieldname){
		int i=0;
		int intvalue = -1;
		dds_parameter_t *p_parameter;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				memcpy(&intvalue, ((char*)foo)+p_parameter->offset, sizeof(int));
				break;
			}
		}

		return intvalue;
	}
SWIGINTERN char *FooTypeSupport_getValueString(FooTypeSupport *self,Foo *foo,char *fieldname){
		int i=0;
		char* stringvalue= NULL;
		dds_parameter_t *p_parameter;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				stringvalue = strdup( ((char*)foo)+p_parameter->offset);
				break;
			}
		}

		return stringvalue;
	}
SWIGINTERN char **FooTypeSupport_getValueStringArray(FooTypeSupport *self,Foo *foo,char *fieldname,int size){
		int i=0;
		char** stringvalue= NULL;
		dds_parameter_t *p_parameter;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				stringvalue = (char**)malloc(p_parameter->i_size);
				memcpy(stringvalue, ((char*)foo)+p_parameter->offset, p_parameter->i_size);
				break;
			}
		}

		return stringvalue;
	}
SWIGINTERN jintArray FooTypeSupport_getValueIntegerArray(FooTypeSupport *self,Foo *foo,char *fieldname,int size){
		int i=0;
		dds_parameter_t *p_parameter;
		jintArray jresult = 0 ;
		int32_t *result = 0 ;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				result = (int32_t *)(int32_t *) ((char*)foo)+p_parameter->offset;
				jresult = SWIG_JavaArrayOutInt(jenvstatic, (int *)result, size); 
				break;
			}
		}


		return jresult;

	}
SWIGINTERN int FooTypeSupport_getStringTypeSize(FooTypeSupport *self){
		return sizeof(dds_string);
	}
SWIGINTERN int FooTypeSupport_getTypeSize(FooTypeSupport *self,char *type){
		FooTypeSupport *typesupprt = getTypeSupport(type);
		if(typesupprt != NULL)
		{
			return typesupprt->i_size;
		}else{
			return 256;
		}
	}
SWIGINTERN void FooTypeSupport_setValueInteger(FooTypeSupport *self,Foo *foo,char *fieldname,int value){
		int i=0;
		dds_parameter_t *p_parameter;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				*((int*)((char*)foo)+p_parameter->offset) = value;
				break;
			}
		}
	}
SWIGINTERN void FooTypeSupport_setValueString(FooTypeSupport *self,Foo *foo,char *fieldname,char *value){
		int i=0;
		dds_parameter_t *p_parameter;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				setString(((dds_string *)(char*)foo)+p_parameter->offset, value);
				break;
			}
		}
	}
SWIGINTERN jobject FooTypeSupport_getValueStruct(FooTypeSupport *self,Foo *foo,jclass object,char *fieldname){
		jclass cls = jenvstatic->GetObjectClass(object);
		jmethodID mid;
		int i=0;
		dds_parameter_t *p_parameter;


		if(cls == NULL)
		{
			return NULL;
		}

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				mid = jenvstatic->GetMethodID (cls, "init","(kr/re/etri/cps/Foo)V");
				object = jenvstatic->NewObject(cls, mid, ((char*)foo)+p_parameter->offset);
				break;
			}
		}

		

		return object;
	}
SWIGINTERN void FooTypeSupport_setValueStruct(FooTypeSupport *self,Foo *foo,char *fieldname,Foo *value){
		int i=0;
		dds_parameter_t *p_parameter;

		for(i=0; i < self->i_parameters; i++)
		{
			p_parameter = self->pp_parameters[i];

			if(strcmp(p_parameter->fieldname, fieldname) == 0)
			{
				Foo *dst = ((Foo*)((char*)foo)+p_parameter->offset);
				memcpy(dst, value, p_parameter->i_size);
				break;
			}
		}
	}
SWIGINTERN ReadCondition *DataReader_create_readcondition(DataReader *self,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->create_readcondition(self, sample_states, view_states, instance_states);
	}
SWIGINTERN QueryCondition *DataReader_create_querycondition(DataReader *self,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states,char *query_expression,StringSeq *query_parameters){
		return self->create_querycondition(self, sample_states, view_states, instance_states, query_expression, query_parameters);
	}
SWIGINTERN ReturnCode_t DataReader_delete_readcondition(DataReader *self,ReadCondition *condition){
		return self->delete_readcondition(self, condition);
	}
SWIGINTERN ReturnCode_t DataReader_delete_contained_entities(DataReader *self){
		return self->delete_contained_entities(self);
	}
SWIGINTERN ReturnCode_t DataReader_set_qos(DataReader *self,DataReaderQos *qos){
		return self->set_qos(self, qos);
	}
SWIGINTERN ReturnCode_t DataReader_get_qos(DataReader *self,DataReaderQos *qos){
		return self->get_qos(self, qos);
	}
SWIGINTERN ReturnCode_t DataReader_set_listener(DataReader *self,DataReaderListener *listener,StatusMask mask){
		return self->set_listener(self, listener, mask);
	}
SWIGINTERN DataReaderListener *DataReader_get_listener(DataReader *self){
		return self->get_listener(self);
	}
SWIGINTERN TopicDescription *DataReader_get_topicdescription(DataReader *self){
		return self->get_topicdescription(self);
	}
SWIGINTERN Subscriber *DataReader_get_subscriber(DataReader *self){
		return self->get_subscriber(self);
	}
SWIGINTERN ReturnCode_t DataReader_get_sample_rejected_status(DataReader *self,SampleRejectedStatus *status){
		return self->get_sample_rejected_status(self, status);
	}
SWIGINTERN ReturnCode_t DataReader_get_liveliness_changed_status(DataReader *self,LivelinessChangedStatus *status){
		return self->get_liveliness_changed_status(self, status);
	}
SWIGINTERN ReturnCode_t DataReader_get_requested_deadline_missed_status(DataReader *self,RequestedDeadlineMissedStatus *status){
		return self->get_requested_deadline_missed_status(self, status);
	}
SWIGINTERN ReturnCode_t DataReader_get_requested_incompatible_qos_status(DataReader *self,RequestedIncompatibleQosStatus *status){
		return self->get_requested_incompatible_qos_status(self, status);
	}
SWIGINTERN ReturnCode_t DataReader_get_subscription_matched_status(DataReader *self,SubscriptionMatchedStatus *status){
		return self->get_subscription_matched_status(self, status);
	}
SWIGINTERN ReturnCode_t DataReader_get_sample_lost_status(DataReader *self,SampleLostStatus *status){
		return self->get_sample_lost_status(self, status);
	}
SWIGINTERN ReturnCode_t DataReader_wait_for_historical_data(DataReader *self,Duration_t max_wait){
		return self->wait_for_historical_data(self, max_wait);
	}
SWIGINTERN ReturnCode_t DataReader_get_matched_publications(DataReader *self,InstanceHandleSeq *publication_handles){
		return self->get_matched_publications(self, publication_handles);
	}
SWIGINTERN ReturnCode_t DataReader_get_matched_publication_data(DataReader *self,PublicationBuiltinTopicData *publication_data,InstanceHandle_t publication_handle){
		return self->get_matched_publication_data(self, publication_data, publication_handle);
	}
SWIGINTERN ReadCondition *FooDataReader_create_readcondition(FooDataReader *self,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->create_readcondition((DataReader*)self, sample_states, view_states, instance_states);
	}
SWIGINTERN QueryCondition *FooDataReader_create_querycondition(FooDataReader *self,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states,char *query_expression,StringSeq *query_parameters){
		return self->create_querycondition((DataReader*)self, sample_states, view_states, instance_states, query_expression, query_parameters);
	}
SWIGINTERN ReturnCode_t FooDataReader_delete_readcondition(FooDataReader *self,ReadCondition *condition){
		return self->delete_readcondition((DataReader*)self, condition);
	}
SWIGINTERN ReturnCode_t FooDataReader_delete_contained_entities(FooDataReader *self){
		return self->delete_contained_entities((DataReader*)self);
	}
SWIGINTERN ReturnCode_t FooDataReader_set_qos(FooDataReader *self,DataReaderQos *qos){
		return self->set_qos((DataReader*)self, qos);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_qos(FooDataReader *self,DataReaderQos *qos){
		return self->get_qos((DataReader*)self, qos);
	}
SWIGINTERN ReturnCode_t FooDataReader_set_listener(FooDataReader *self,DataReaderListener *listener,StatusMask mask){
		return self->set_listener((DataReader*)self, listener, mask);
	}
SWIGINTERN DataReaderListener *FooDataReader_get_listener(FooDataReader *self){
		return self->get_listener((DataReader*)self);
	}
SWIGINTERN TopicDescription *FooDataReader_get_topicdescription(FooDataReader *self){
		return self->get_topicdescription((DataReader*)self);
	}
SWIGINTERN Subscriber *FooDataReader_get_subscriber(FooDataReader *self){
		return self->get_subscriber((DataReader*)self);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_sample_rejected_status(FooDataReader *self,SampleRejectedStatus *status){
		return self->get_sample_rejected_status((DataReader*)self, status);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_liveliness_changed_status(FooDataReader *self,LivelinessChangedStatus *status){
		return self->get_liveliness_changed_status((DataReader*)self, status);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_requested_deadline_missed_status(FooDataReader *self,RequestedDeadlineMissedStatus *status){
		return self->get_requested_deadline_missed_status((DataReader*)self, status);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_requested_incompatible_qos_status(FooDataReader *self,RequestedIncompatibleQosStatus *status){
		return self->get_requested_incompatible_qos_status((DataReader*)self, status);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_subscription_matched_status(FooDataReader *self,SubscriptionMatchedStatus *status){
		return self->get_subscription_matched_status((DataReader*)self, status);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_sample_lost_status(FooDataReader *self,SampleLostStatus *status){
		return self->get_sample_lost_status((DataReader*)self, status);
	}
SWIGINTERN ReturnCode_t FooDataReader_wait_for_historical_data(FooDataReader *self,Duration_t max_wait){
		return self->wait_for_historical_data((DataReader*)self, max_wait);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_matched_publications(FooDataReader *self,InstanceHandleSeq *publication_handles){
		return self->get_matched_publications((DataReader*)self, publication_handles);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_matched_publication_data(FooDataReader *self,PublicationBuiltinTopicData *publication_data,InstanceHandle_t publication_handle){
		return self->get_matched_publication_data((DataReader*)self, publication_data, publication_handle);
	}
SWIGINTERN ReturnCode_t FooDataReader_read(FooDataReader *self,FooSeq *data_values,SampleInfoSeq *sample_infos,long max_samples,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->read(self, data_values, sample_infos, max_samples, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t FooDataReader_take(FooDataReader *self,FooSeq *data_values,SampleInfoSeq *sample_infos,long max_samples,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->take(self, data_values, sample_infos, max_samples, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t FooDataReader_read_w_condition(FooDataReader *self,FooSeq data_values,SampleInfoSeq sample_infos,long max_samples,ReadCondition a_condition){
		return self->read_w_condition(self, data_values, sample_infos, max_samples, a_condition);
	}
SWIGINTERN ReturnCode_t FooDataReader_take_w_condition(FooDataReader *self,FooSeq data_values,SampleInfoSeq sample_infos,long max_samples,ReadCondition a_condition){
		return self->take_w_condition(self, data_values, sample_infos, max_samples, a_condition);
	}
SWIGINTERN ReturnCode_t FooDataReader_read_next_sample(FooDataReader *self,Foo data_value,SampleInfo sample_info){
		return self->read_next_sample(self, data_value, sample_info);
	}
SWIGINTERN ReturnCode_t FooDataReader_take_next_sample(FooDataReader *self,Foo data_value,SampleInfo sample_info){
		return self->take_next_sample(self, data_value, sample_info);
	}
SWIGINTERN ReturnCode_t FooDataReader_read_instance(FooDataReader *self,FooSeq *data_values,SampleInfoSeq *sample_infos,long max_samples,InstanceHandle_t a_handle,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->read_instance(self, data_values, sample_infos, max_samples, a_handle, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t FooDataReader_take_instance(FooDataReader *self,FooSeq *data_values,SampleInfoSeq *sample_infos,long max_samples,InstanceHandle_t a_handle,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->take_instance(self, data_values, sample_infos, max_samples, a_handle, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t FooDataReader_read_next_instance(FooDataReader *self,FooSeq data_values,SampleInfoSeq sample_infos,long max_samples,InstanceHandle_t previous_handle,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->read_next_instance(self, data_values, sample_infos, max_samples, previous_handle, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t FooDataReader_take_next_instance(FooDataReader *self,FooSeq data_values,SampleInfoSeq sample_infos,long max_samples,InstanceHandle_t previous_handle,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->take_next_instance(self, data_values, sample_infos, max_samples, previous_handle, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t FooDataReader_get_key_value(FooDataReader *self,Foo *key_holder,InstanceHandle_t handle){
		return self->get_key_value(self, key_holder, handle);
	}
SWIGINTERN InstanceHandle_t FooDataReader_lookup_instance(FooDataReader *self,Foo *key_holder){
		return self->lookup_instance(self, key_holder);
	}
SWIGINTERN ReturnCode_t DataWriter_set_qos(DataWriter *self,DataWriterQos *qos){
		return self->set_qos(self, qos);
	}
SWIGINTERN ReturnCode_t DataWriter_get_qos(DataWriter *self,DataWriterQos *qos){
		return self->get_qos(self, qos);
	}
SWIGINTERN ReturnCode_t DataWriter_set_listener(DataWriter *self,DataWriterListener *listener,StatusMask mask){
		return self->set_listener(self, listener, mask);
	}
SWIGINTERN DataWriterListener *DataWriter_get_listener(DataWriter *self){
		return self->get_listener(self);
	}
SWIGINTERN Topic *DataWriter_get_topic(DataWriter *self){
		return self->get_topic(self);
	}
SWIGINTERN Publisher *DataWriter_get_publisher(DataWriter *self){
		return self->get_publisher(self);
	}
SWIGINTERN ReturnCode_t DataWriter_wait_for_acknowledgments(DataWriter *self,Duration_t max_wait){
		return self->wait_for_acknowledgments(self, max_wait);
	}
SWIGINTERN ReturnCode_t DataWriter_get_liveliness_lost_status(DataWriter *self,LivelinessLostStatus *status){
		return self->get_liveliness_lost_status(self, status);
	}
SWIGINTERN ReturnCode_t DataWriter_get_offered_deadline_missed_status(DataWriter *self,OfferedDeadlineMissedStatus *status){
		return self->get_offered_deadline_missed_status(self, status);
	}
SWIGINTERN ReturnCode_t DataWriter_get_offered_incompatible_qos_status(DataWriter *self,OfferedIncompatibleQosStatus *status){
		return self->get_offered_incompatible_qos_status(self, status);
	}
SWIGINTERN ReturnCode_t DataWriter_get_publication_matched_status(DataWriter *self,PublicationMatchedStatus *status){
		return self->get_publication_matched_status(self, status);
	}
SWIGINTERN ReturnCode_t DataWriter_assert_liveliness(DataWriter *self){
		return self->assert_liveliness(self);
	}
SWIGINTERN ReturnCode_t DataWriter_get_matched_subscriptions(DataWriter *self,InstanceHandleSeq *subscription_handles){
		return self->get_matched_subscriptions(self, subscription_handles);
	}
SWIGINTERN ReturnCode_t DataWriter_get_matched_subscription_data(DataWriter *self,SubscriptionBuiltinTopicData *subscription_data,InstanceHandle_t subscription_handle){
		return self->get_matched_subscription_data(self, subscription_data, subscription_handle);
	}
SWIGINTERN ReturnCode_t FooDataWriter_set_qos(FooDataWriter *self,DataWriterQos *qos){
		return self->set_qos((DataWriter *)self, qos);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_qos(FooDataWriter *self,DataWriterQos *qos){
		return self->get_qos((DataWriter *)self, qos);
	}
SWIGINTERN ReturnCode_t FooDataWriter_set_listener(FooDataWriter *self,DataWriterListener *listener,StatusMask mask){
		return self->set_listener((DataWriter *)self, listener, mask);
	}
SWIGINTERN DataWriterListener *FooDataWriter_get_listener(FooDataWriter *self){
		return self->get_listener((DataWriter *)self);
	}
SWIGINTERN Topic *FooDataWriter_get_topic(FooDataWriter *self){
		return self->get_topic((DataWriter *)self);
	}
SWIGINTERN Publisher *FooDataWriter_get_publisher(FooDataWriter *self){
		return self->get_publisher((DataWriter *)self);
	}
SWIGINTERN ReturnCode_t FooDataWriter_wait_for_acknowledgments(FooDataWriter *self,Duration_t max_wait){
		return self->wait_for_acknowledgments((DataWriter *)self, max_wait);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_liveliness_lost_status(FooDataWriter *self,LivelinessLostStatus *status){
		return self->get_liveliness_lost_status((DataWriter *)self, status);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_offered_deadline_missed_status(FooDataWriter *self,OfferedDeadlineMissedStatus *status){
		return self->get_offered_deadline_missed_status((DataWriter *)self, status);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_offered_incompatible_qos_status(FooDataWriter *self,OfferedIncompatibleQosStatus *status){
		return self->get_offered_incompatible_qos_status((DataWriter *)self, status);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_publication_matched_status(FooDataWriter *self,PublicationMatchedStatus *status){
		return self->get_publication_matched_status((DataWriter *)self, status);
	}
SWIGINTERN ReturnCode_t FooDataWriter_assert_liveliness(FooDataWriter *self){
		return self->assert_liveliness((DataWriter *)self);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_matched_subscriptions(FooDataWriter *self,InstanceHandleSeq *subscription_handles){
		return self->get_matched_subscriptions((DataWriter *)self, subscription_handles);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_matched_subscription_data(FooDataWriter *self,SubscriptionBuiltinTopicData *subscription_data,InstanceHandle_t subscription_handle){
		return self->get_matched_subscription_data((DataWriter *)self, subscription_data, subscription_handle);
	}
SWIGINTERN InstanceHandle_t FooDataWriter_register_instance(FooDataWriter *self,Foo *p_instance_data){
		return self->register_instance(self, p_instance_data);
	}
SWIGINTERN InstanceHandle_t FooDataWriter_register_instance_w_timestamp(FooDataWriter *self,Foo *instance_data,Time_t source_timestamp){
		return self->register_instance_w_timestamp(self, instance_data, source_timestamp);
	}
SWIGINTERN ReturnCode_t FooDataWriter_unregister_instance(FooDataWriter *self,Foo *instance_data,InstanceHandle_t handle){
		return self->unregister_instance(self, instance_data, handle);
	}
SWIGINTERN ReturnCode_t FooDataWriter_unregister_instance_w_timestamp(FooDataWriter *self,Foo *instance_data,InstanceHandle_t handle,Time_t source_timestamp){
		return self->unregister_instance_w_timestamp(self, instance_data, handle, source_timestamp);
	}
SWIGINTERN ReturnCode_t FooDataWriter_write(FooDataWriter *self,Foo *instance_data,InstanceHandle_t handle){
		return self->write(self, instance_data, handle);
	}
SWIGINTERN ReturnCode_t FooDataWriter_write_w_timestamp(FooDataWriter *self,Foo *instance_data,InstanceHandle_t handle,Time_t source_timestamp){
		return self->write_w_timestamp(self, instance_data, handle, source_timestamp);
	}
SWIGINTERN ReturnCode_t FooDataWriter_dispose(FooDataWriter *self,Foo *instance_data,InstanceHandle_t instance_handle){
		return self->dispose(self, instance_data, instance_handle);
	}
SWIGINTERN ReturnCode_t FooDataWriter_dispose_w_timestamp(FooDataWriter *self,Foo *instance_data,InstanceHandle_t instance_handle,Time_t source_timestamp){
		return self->dispose_w_timestamp(self, instance_data, instance_handle, source_timestamp);
	}
SWIGINTERN ReturnCode_t FooDataWriter_get_key_value(FooDataWriter *self,Foo *key_holder,InstanceHandle_t handle){
		return self->get_key_value(self, key_holder, handle);
	}
SWIGINTERN InstanceHandle_t FooDataWriter_lookup_instance(FooDataWriter *self,Foo *key_holder){
		return self->lookup_instance(self, key_holder);
	}
SWIGINTERN DataWriter *Publisher_create_datawriter(Publisher *self,Topic *topic,DataWriterQos *qos,DataWriterListener *listener,StatusMask mask){
		return self->create_datawriter(self, topic, qos, listener, mask);
	}
SWIGINTERN FooDataWriter *Publisher_create_foodatawriter(Publisher *self,Topic *topic,DataWriterQos *qos,DataWriterListener *listener,StatusMask mask){
		return (FooDataWriter *)self->create_datawriter(self, topic, qos, listener, mask);
	}
SWIGINTERN ReturnCode_t Publisher_delete_datawriter(Publisher *self,DataWriter *datawriter){
		return self->delete_datawriter(self, datawriter);
	}
SWIGINTERN DataWriter *Publisher_lookup_datawriter(Publisher *self,char *topic_name){
		return self->lookup_datawriter(self, topic_name);
	}
SWIGINTERN ReturnCode_t Publisher_delete_contained_entities(Publisher *self){
		return self->delete_contained_entities(self);
	}
SWIGINTERN ReturnCode_t Publisher_set_qos(Publisher *self,PublisherQos *qos){
		return self->set_qos(self, qos);
	}
SWIGINTERN ReturnCode_t Publisher_get_qos(Publisher *self,PublisherQos *qos){
		return self->get_qos(self, qos);
	}
SWIGINTERN ReturnCode_t Publisher_set_listener(Publisher *self,PublisherListener *listener,StatusMask mask){
		return self->set_listener(self, listener, mask);
	}
SWIGINTERN PublisherListener *Publisher_get_listener(Publisher *self){
		return self->get_listener(self);
	}
SWIGINTERN ReturnCode_t Publisher_suspend_publications(Publisher *self){
		return self->suspend_publications(self);
	}
SWIGINTERN ReturnCode_t Publisher_resume_publications(Publisher *self){
		return self->resume_publications(self);
	}
SWIGINTERN ReturnCode_t Publisher_begin_coherent_changes(Publisher *self){
		return self->begin_coherent_changes(self);
	}
SWIGINTERN ReturnCode_t Publisher_end_coherent_changes(Publisher *self){
		return self->end_coherent_changes(self);
	}
SWIGINTERN ReturnCode_t Publisher_wait_for_acknowledgments(Publisher *self,Duration_t max_wait){
		return self->wait_for_acknowledgments(self, max_wait);
	}
SWIGINTERN DomainParticipant *Publisher_get_participant(Publisher *self){
		return self->get_participant(self);
	}
SWIGINTERN ReturnCode_t Publisher_set_default_datawriter_qos(Publisher *self,DataWriterQos *qos){
		return self->set_default_datawriter_qos(qos);
	}
SWIGINTERN ReturnCode_t Publisher_get_default_datawriter_qos(Publisher *self,DataWriterQos *qos){
		return self->get_default_datawriter_qos(qos);
	}
SWIGINTERN ReturnCode_t Publisher_copy_from_topic_qos(Publisher *self,DataWriterQos *datawriter_qos,TopicQos *topic_qos){
		return self->copy_from_topic_qos(datawriter_qos, topic_qos);
	}
SWIGINTERN DataReader *Subscriber_create_datareader(Subscriber *self,Topic *topic,DataReaderQos *qos,DataReaderListener *listener,StatusMask mask){
		return self->create_datareader(self, topic, qos, listener, mask);
	}
SWIGINTERN FooDataReader *Subscriber_create_foodatareader(Subscriber *self,Topic *topic,DataReaderQos *qos,DataReaderListener *listener,StatusMask mask){
		return (FooDataReader *)self->create_datareader(self, topic, qos, listener, mask);
	}
SWIGINTERN ReturnCode_t Subscriber_delete_datareader(Subscriber *self,DataReader *datareader){
		return self->delete_datareader(self, datareader);
	}
SWIGINTERN ReturnCode_t Subscriber_delete_contained_entities(Subscriber *self){
		return self->delete_contained_entities(self);
	}
SWIGINTERN DataReader *Subscriber_lookup_datareader(Subscriber *self,char *topic_name){
		return self->lookup_datareader(self, topic_name);
	}
SWIGINTERN ReturnCode_t Subscriber_get_datareaders(Subscriber *self,DataReaderSeq *readers,SampleStateMask sample_states,ViewStateMask view_states,InstanceStateMask instance_states){
		return self->get_datareaders(self, readers, sample_states, view_states, instance_states);
	}
SWIGINTERN ReturnCode_t Subscriber_notify_datareaders(Subscriber *self){
		return self->notify_datareaders(self);
	}
SWIGINTERN ReturnCode_t Subscriber_set_qos(Subscriber *self,SubscriberQos *qos){
		return self->set_qos(self, qos);
	}
SWIGINTERN ReturnCode_t Subscriber_get_qos(Subscriber *self,SubscriberQos *qos){
		return self->get_qos(self, qos);
	}
SWIGINTERN ReturnCode_t Subscriber_set_listener(Subscriber *self,SubscriberListener *listener,StatusMask mask){
		return self->set_listener(self, listener, mask);
	}
SWIGINTERN SubscriberListener *Subscriber_get_listener(Subscriber *self){
		return self->get_listener(self);
	}
SWIGINTERN ReturnCode_t Subscriber_begin_access(Subscriber *self){
		return self->begin_access(self);
	}
SWIGINTERN ReturnCode_t Subscriber_end_access(Subscriber *self){
		return self->end_access(self);
	}
SWIGINTERN DomainParticipant *Subscriber_get_participant(Subscriber *self){
		return self->get_participant(self);
	}
SWIGINTERN ReturnCode_t Subscriber_set_default_datareader_qos(Subscriber *self,DataReaderQos *qos){
		return self->set_default_datareader_qos(qos);
	}
SWIGINTERN ReturnCode_t Subscriber_get_default_datareader_qos(Subscriber *self,DataReaderQos *qos){
		return self->get_default_datareader_qos(qos);
	}
SWIGINTERN ReturnCode_t Subscriber_copy_from_topic_qos(Subscriber *self,DataReaderQos *datareader_qos,TopicQos *topic_qos){
		return self->copy_from_topic_qos(datareader_qos, topic_qos);
	}
SWIGINTERN char *Topic_get_type_name(Topic *self){
		return self->get_type_name(self);
	}
SWIGINTERN char *Topic_get_name(Topic *self){
		return self->get_name(self);
	}
SWIGINTERN DomainParticipant *Topic_get_participant(Topic *self,Topic topic){
		return self->get_participant(self);
	}
SWIGINTERN ReturnCode_t Topic_set_qos(Topic *self,TopicQos *qos){
		return self->set_qos(self, qos);
	}
SWIGINTERN ReturnCode_t Topic_get_qos(Topic *self,TopicQos *qos){
		return self->get_qos(self, qos);
	}
SWIGINTERN ReturnCode_t Topic_set_listener(Topic *self,TopicListener *listener,StatusMask mask){
		return self->set_listener(self, listener, mask);
	}
SWIGINTERN TopicListener *Topic_get_listener(Topic *self){
		return self->get_listener(self);
	}
SWIGINTERN ReturnCode_t Topic_get_inconsistent_topic_status(Topic *self,InconsistentTopicStatus *a_status){
		return self->get_inconsistent_topic_status(self, a_status);
	}
SWIGINTERN Publisher *DomainParticipant_create_publisher(DomainParticipant *self,PublisherQos *qos,PublisherListener *listener,StatusMask mask){
		return self->create_publisher(self, qos, listener, mask);
	}
SWIGINTERN ReturnCode_t DomainParticipant_delete_publisher(DomainParticipant *self,Publisher *publisher){
		return self->delete_publisher(self, publisher);
	}
SWIGINTERN Subscriber *DomainParticipant_create_subscriber(DomainParticipant *self,SubscriberQos *qos,SubscriberListener *listener,StatusMask mask){
		return self->create_subscriber(self, qos, listener, mask);
	}
SWIGINTERN ReturnCode_t DomainParticipant_delete_subscriber(DomainParticipant *self,Subscriber *subscriber){
		return self->delete_subscriber(self, subscriber);
	}
SWIGINTERN Subscriber *DomainParticipant_get_builtin_subscriber(DomainParticipant *self){
		return self->get_builtin_subscriber(self);
	}
SWIGINTERN Topic *DomainParticipant_create_topic(DomainParticipant *self,char *topic_name,char *type_name,TopicQos *qos,TopicListener *listener,StatusMask mask){
		return self->create_topic(self, topic_name, type_name, qos, listener, mask);
	}
SWIGINTERN ReturnCode_t DomainParticipant_delete_topic(DomainParticipant *self,Topic *topic){
		return self->delete_topic(self, topic);
	}
SWIGINTERN Topic *DomainParticipant_find_topic(DomainParticipant *self,char *topic_name,Duration_t timeout){
		return self->find_topic(self, topic_name, timeout);
	}
SWIGINTERN TopicDescription *DomainParticipant_lookup_topicdescription(DomainParticipant *self,char *name){
		return self->lookup_topicdescription(self, name);
	}
SWIGINTERN ContentFilteredTopic *DomainParticipant_create_contentfilteredtopic(DomainParticipant *self,char *name,Topic *related_topic,char *filter_expression,StringSeq expression_parameters){
		return self->create_contentfilteredtopic(self, name, related_topic, filter_expression, expression_parameters);
	}
SWIGINTERN ReturnCode_t DomainParticipant_delete_contentfilteredtopic(DomainParticipant *self,ContentFilteredTopic *contentfilteredtopic){
		return self->delete_contentfilteredtopic(self, contentfilteredtopic);
	}
SWIGINTERN MultiTopic *DomainParticipant_create_multitopic(DomainParticipant *self,char *name,char *type_name,char *subscription_expression,StringSeq expression_parameters){
		return self->create_multitopic(self, name, type_name, subscription_expression, expression_parameters);
	}
SWIGINTERN ReturnCode_t DomainParticipant_delete_multitopic(DomainParticipant *self,MultiTopic *multitopic){
		return self->delete_multitopic(self, multitopic);
	}
SWIGINTERN ReturnCode_t DomainParticipant_delete_contained_entities(DomainParticipant *self){
		return self->delete_contained_entities(self);
	}
SWIGINTERN ReturnCode_t DomainParticipant_set_qos(DomainParticipant *self,DomainParticipantQos *qos){
		return self->set_qos(self, qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_qos(DomainParticipant *self,DomainParticipantQos *qos){
		return self->get_qos(self, qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_set_listener(DomainParticipant *self,DomainParticipantListener *listener,StatusMask mask){
		return self->set_listener(self, listener, mask);
	}
SWIGINTERN DomainParticipantListener *DomainParticipant_get_listener(DomainParticipant *self){
		return self->get_listener(self);
	}
SWIGINTERN ReturnCode_t DomainParticipant_ignore_participant(DomainParticipant *self,InstanceHandle_t handle){
		return self->ignore_participant(self, handle);
	}
SWIGINTERN ReturnCode_t DomainParticipant_ignore_topic(DomainParticipant *self,InstanceHandle_t handle){
		return self->ignore_topic(self, handle);
	}
SWIGINTERN ReturnCode_t DomainParticipant_ignore_publication(DomainParticipant *self,InstanceHandle_t handle){
		return self->ignore_publication(self, handle);
	}
SWIGINTERN ReturnCode_t DomainParticipant_ignore_subscription(DomainParticipant *self,InstanceHandle_t handle){
		return self->ignore_subscription(self, handle);
	}
SWIGINTERN DomainId_t DomainParticipant_get_domain_id(DomainParticipant *self){
		return self->get_domain_id(self);
	}
SWIGINTERN ReturnCode_t DomainParticipant_assert_liveliness(DomainParticipant *self){
		return self->assert_liveliness(self);
	}
SWIGINTERN ReturnCode_t DomainParticipant_set_default_publisher_qos(DomainParticipant *self,PublisherQos *qos){
		return self->set_default_publisher_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_default_publisher_qos(DomainParticipant *self,PublisherQos *qos){
		return self->get_default_publisher_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_set_default_subscriber_qos(DomainParticipant *self,SubscriberQos *qos){
		return self->set_default_subscriber_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_default_subscriber_qos(DomainParticipant *self,SubscriberQos *qos){
		return self->get_default_subscriber_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_set_default_topic_qos(DomainParticipant *self,TopicQos *qos){
		return self->set_default_topic_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_default_topic_qos(DomainParticipant *self,TopicQos *qos){
		return self->get_default_topic_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_discovered_participants(DomainParticipant *self,InstanceHandleSeq *participant_handles){
		return self->get_discovered_participants(self, participant_handles);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_discovered_participant_data(DomainParticipant *self,ParticipantBuiltinTopicData *participant_data,InstanceHandle_t participant_handle){
		return self->get_discovered_participant_data(self, participant_data, participant_handle);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_discovered_topics(DomainParticipant *self,InstanceHandleSeq *topic_handles){
		return self->get_discovered_topics(self, topic_handles);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_discovered_topic_data(DomainParticipant *self,TopicBuiltinTopicData *topic_data,InstanceHandle_t topic_handle){
		return self->get_discovered_topic_data(self, topic_data, topic_handle);
	}
SWIGINTERN bool DomainParticipant_contains_entity(DomainParticipant *self,InstanceHandle_t a_handle){
		return self->contains_entity(self, a_handle);
	}
SWIGINTERN ReturnCode_t DomainParticipant_get_current_time(DomainParticipant *self,Time_t *current_time){
		return self->get_current_time(self, current_time);
	}
SWIGINTERN DomainParticipantFactory *DomainParticipantFactory_DomainParticipantFactory_get_instance(DomainParticipantFactory *self){
		return DomainParticipantFactory_get_instance();
	}
SWIGINTERN DomainParticipant *DomainParticipantFactory_create_participant(DomainParticipantFactory *self,DomainId_t domain_id,DomainParticipantQos *qos,DomainParticipantListener *listener,StatusMask mask){
		return self->create_participant(domain_id, qos, listener, mask);
	}
SWIGINTERN ReturnCode_t DomainParticipantFactory_delete_participant(DomainParticipantFactory *self,DomainParticipant *participant){
		return self->delete_participant(participant);
	}
SWIGINTERN DomainParticipant *DomainParticipantFactory_lookup_participant(DomainParticipantFactory *self,DomainId_t domain_id){
		return self->lookup_participant(domain_id);
	}
SWIGINTERN ReturnCode_t DomainParticipantFactory_set_default_participant_qos(DomainParticipantFactory *self,DomainParticipantQos *qos){
		return self->set_default_participant_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipantFactory_get_default_participant_qos(DomainParticipantFactory *self,DomainParticipantQos *qos){
		return self->get_default_participant_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipantFactory_set_qos(DomainParticipantFactory *self,DomainParticipantFactoryQos *qos){
		return self->set_qos(qos);
	}
SWIGINTERN ReturnCode_t DomainParticipantFactory_get_qos(DomainParticipantFactory *self,DomainParticipantFactoryQos *qos){
		return self->get_qos(qos);
	}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif






/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "cps_wrapper.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_UserDataQosPolicy_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  UserDataQosPolicy *arg1 = (UserDataQosPolicy *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UserDataQosPolicy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->value;
    if (arg2) {
      arg1->value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_UserDataQosPolicy_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  UserDataQosPolicy *arg1 = (UserDataQosPolicy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UserDataQosPolicy **)&jarg1; 
  result = (char *) ((arg1)->value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1UserDataQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UserDataQosPolicy *)new UserDataQosPolicy();
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1UserDataQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UserDataQosPolicy *arg1 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UserDataQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDataQosPolicy_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TopicDataQosPolicy *arg1 = (TopicDataQosPolicy *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicDataQosPolicy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->value;
    if (arg2) {
      arg1->value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDataQosPolicy_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TopicDataQosPolicy *arg1 = (TopicDataQosPolicy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicDataQosPolicy **)&jarg1; 
  result = (char *) ((arg1)->value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicDataQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicDataQosPolicy *)new TopicDataQosPolicy();
  *(TopicDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicDataQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicDataQosPolicy *arg1 = (TopicDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDataQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GroupDataQosPolicy_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  GroupDataQosPolicy *arg1 = (GroupDataQosPolicy *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GroupDataQosPolicy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->value;
    if (arg2) {
      arg1->value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GroupDataQosPolicy_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GroupDataQosPolicy *arg1 = (GroupDataQosPolicy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GroupDataQosPolicy **)&jarg1; 
  result = (char *) ((arg1)->value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1GroupDataQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GroupDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GroupDataQosPolicy *)new GroupDataQosPolicy();
  *(GroupDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1GroupDataQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GroupDataQosPolicy *arg1 = (GroupDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GroupDataQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TransportPriorityQosPolicy_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TransportPriorityQosPolicy *arg1 = (TransportPriorityQosPolicy *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TransportPriorityQosPolicy **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TransportPriorityQosPolicy_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TransportPriorityQosPolicy *arg1 = (TransportPriorityQosPolicy *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TransportPriorityQosPolicy **)&jarg1; 
  result = (long) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TransportPriorityQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TransportPriorityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TransportPriorityQosPolicy *)new TransportPriorityQosPolicy();
  *(TransportPriorityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TransportPriorityQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TransportPriorityQosPolicy *arg1 = (TransportPriorityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TransportPriorityQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LifespanQosPolicy_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LifespanQosPolicy *arg1 = (LifespanQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LifespanQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LifespanQosPolicy_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LifespanQosPolicy *arg1 = (LifespanQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LifespanQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LifespanQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LifespanQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LifespanQosPolicy *)new LifespanQosPolicy();
  *(LifespanQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LifespanQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LifespanQosPolicy *arg1 = (LifespanQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LifespanQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityQosPolicy_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DurabilityQosPolicy *arg1 = (DurabilityQosPolicy *) 0 ;
  DurabilityQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityQosPolicy **)&jarg1; 
  arg2 = (DurabilityQosPolicyKind)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityQosPolicy_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DurabilityQosPolicy *arg1 = (DurabilityQosPolicy *) 0 ;
  DurabilityQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityQosPolicy **)&jarg1; 
  result = (DurabilityQosPolicyKind) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DurabilityQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DurabilityQosPolicy *)new DurabilityQosPolicy();
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DurabilityQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DurabilityQosPolicy *arg1 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DurabilityQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PresentationQosPolicy_1access_1scope_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  PresentationQosPolicyAccessScopeKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  arg2 = (PresentationQosPolicyAccessScopeKind)jarg2; 
  if (arg1) (arg1)->access_scope = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PresentationQosPolicy_1access_1scope_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  PresentationQosPolicyAccessScopeKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  result = (PresentationQosPolicyAccessScopeKind) ((arg1)->access_scope);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PresentationQosPolicy_1coherent_1access_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->coherent_access = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PresentationQosPolicy_1coherent_1access_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  result = (bool) ((arg1)->coherent_access);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PresentationQosPolicy_1ordered_1access_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ordered_access = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PresentationQosPolicy_1ordered_1access_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  result = (bool) ((arg1)->ordered_access);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1PresentationQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PresentationQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PresentationQosPolicy *)new PresentationQosPolicy();
  *(PresentationQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1PresentationQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PresentationQosPolicy *arg1 = (PresentationQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PresentationQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DeadlineQosPolicy_1period_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DeadlineQosPolicy *arg1 = (DeadlineQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DeadlineQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->period = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DeadlineQosPolicy_1period_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DeadlineQosPolicy *arg1 = (DeadlineQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeadlineQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->period);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DeadlineQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DeadlineQosPolicy *)new DeadlineQosPolicy();
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DeadlineQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DeadlineQosPolicy *arg1 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DeadlineQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LatencyBudgetQosPolicy_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LatencyBudgetQosPolicy *arg1 = (LatencyBudgetQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LatencyBudgetQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LatencyBudgetQosPolicy_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LatencyBudgetQosPolicy *arg1 = (LatencyBudgetQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LatencyBudgetQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LatencyBudgetQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LatencyBudgetQosPolicy *)new LatencyBudgetQosPolicy();
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LatencyBudgetQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LatencyBudgetQosPolicy *arg1 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LatencyBudgetQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OwnershipQosPolicy_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OwnershipQosPolicy *arg1 = (OwnershipQosPolicy *) 0 ;
  OwnershipQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OwnershipQosPolicy **)&jarg1; 
  arg2 = (OwnershipQosPolicyKind)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OwnershipQosPolicy_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OwnershipQosPolicy *arg1 = (OwnershipQosPolicy *) 0 ;
  OwnershipQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OwnershipQosPolicy **)&jarg1; 
  result = (OwnershipQosPolicyKind) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1OwnershipQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OwnershipQosPolicy *)new OwnershipQosPolicy();
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1OwnershipQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OwnershipQosPolicy *arg1 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OwnershipQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OwnershipStrengthQosPolicy_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OwnershipStrengthQosPolicy *arg1 = (OwnershipStrengthQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OwnershipStrengthQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OwnershipStrengthQosPolicy_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OwnershipStrengthQosPolicy *arg1 = (OwnershipStrengthQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OwnershipStrengthQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1OwnershipStrengthQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OwnershipStrengthQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OwnershipStrengthQosPolicy *)new OwnershipStrengthQosPolicy();
  *(OwnershipStrengthQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1OwnershipStrengthQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OwnershipStrengthQosPolicy *arg1 = (OwnershipStrengthQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OwnershipStrengthQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessQosPolicy_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LivelinessQosPolicy *arg1 = (LivelinessQosPolicy *) 0 ;
  LivelinessQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LivelinessQosPolicy **)&jarg1; 
  arg2 = (LivelinessQosPolicyKind)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessQosPolicy_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LivelinessQosPolicy *arg1 = (LivelinessQosPolicy *) 0 ;
  LivelinessQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LivelinessQosPolicy **)&jarg1; 
  result = (LivelinessQosPolicyKind) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessQosPolicy_1lease_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LivelinessQosPolicy *arg1 = (LivelinessQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LivelinessQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->lease_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessQosPolicy_1lease_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LivelinessQosPolicy *arg1 = (LivelinessQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LivelinessQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->lease_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LivelinessQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LivelinessQosPolicy *)new LivelinessQosPolicy();
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LivelinessQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LivelinessQosPolicy *arg1 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TimeBasedFilterQosPolicy_1minimum_1separation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TimeBasedFilterQosPolicy *arg1 = (TimeBasedFilterQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TimeBasedFilterQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->minimum_separation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TimeBasedFilterQosPolicy_1minimum_1separation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TimeBasedFilterQosPolicy *arg1 = (TimeBasedFilterQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TimeBasedFilterQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->minimum_separation);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TimeBasedFilterQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TimeBasedFilterQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TimeBasedFilterQosPolicy *)new TimeBasedFilterQosPolicy();
  *(TimeBasedFilterQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TimeBasedFilterQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TimeBasedFilterQosPolicy *arg1 = (TimeBasedFilterQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TimeBasedFilterQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PartitionQosPolicy_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PartitionQosPolicy *arg1 = (PartitionQosPolicy *) 0 ;
  StringSeq *arg2 = (StringSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PartitionQosPolicy **)&jarg1; 
  arg2 = *(StringSeq **)&jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PartitionQosPolicy_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PartitionQosPolicy *arg1 = (PartitionQosPolicy *) 0 ;
  StringSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PartitionQosPolicy **)&jarg1; 
  result = (StringSeq *)& ((arg1)->name);
  *(StringSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1PartitionQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PartitionQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PartitionQosPolicy *)new PartitionQosPolicy();
  *(PartitionQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1PartitionQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PartitionQosPolicy *arg1 = (PartitionQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PartitionQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BEST_1EFFORT_1RELIABILITY_1QOS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReliabilityQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  result = (ReliabilityQosPolicyKind)BEST_EFFORT_RELIABILITY_QOS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReliabilityQosPolicy_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ReliabilityQosPolicy *arg1 = (ReliabilityQosPolicy *) 0 ;
  ReliabilityQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReliabilityQosPolicy **)&jarg1; 
  arg2 = (ReliabilityQosPolicyKind)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReliabilityQosPolicy_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReliabilityQosPolicy *arg1 = (ReliabilityQosPolicy *) 0 ;
  ReliabilityQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReliabilityQosPolicy **)&jarg1; 
  result = (ReliabilityQosPolicyKind) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReliabilityQosPolicy_1max_1blocking_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ReliabilityQosPolicy *arg1 = (ReliabilityQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReliabilityQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->max_blocking_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReliabilityQosPolicy_1max_1blocking_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReliabilityQosPolicy *arg1 = (ReliabilityQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReliabilityQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->max_blocking_time);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ReliabilityQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ReliabilityQosPolicy *)new ReliabilityQosPolicy();
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ReliabilityQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReliabilityQosPolicy *arg1 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReliabilityQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DestinationOrderQosPolicy_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DestinationOrderQosPolicy *arg1 = (DestinationOrderQosPolicy *) 0 ;
  DestinationOrderQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DestinationOrderQosPolicy **)&jarg1; 
  arg2 = (DestinationOrderQosPolicyKind)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DestinationOrderQosPolicy_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DestinationOrderQosPolicy *arg1 = (DestinationOrderQosPolicy *) 0 ;
  DestinationOrderQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DestinationOrderQosPolicy **)&jarg1; 
  result = (DestinationOrderQosPolicyKind) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DestinationOrderQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DestinationOrderQosPolicy *)new DestinationOrderQosPolicy();
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DestinationOrderQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DestinationOrderQosPolicy *arg1 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DestinationOrderQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HistoryQosPolicy_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HistoryQosPolicy *arg1 = (HistoryQosPolicy *) 0 ;
  HistoryQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HistoryQosPolicy **)&jarg1; 
  arg2 = (HistoryQosPolicyKind)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HistoryQosPolicy_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HistoryQosPolicy *arg1 = (HistoryQosPolicy *) 0 ;
  HistoryQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HistoryQosPolicy **)&jarg1; 
  result = (HistoryQosPolicyKind) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HistoryQosPolicy_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HistoryQosPolicy *arg1 = (HistoryQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HistoryQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HistoryQosPolicy_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HistoryQosPolicy *arg1 = (HistoryQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HistoryQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->depth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1HistoryQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HistoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (HistoryQosPolicy *)new HistoryQosPolicy();
  *(HistoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1HistoryQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HistoryQosPolicy *arg1 = (HistoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HistoryQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ResourceLimitsQosPolicy_1max_1samples_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_samples = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ResourceLimitsQosPolicy_1max_1samples_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->max_samples);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ResourceLimitsQosPolicy_1max_1instances_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_instances = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ResourceLimitsQosPolicy_1max_1instances_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->max_instances);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ResourceLimitsQosPolicy_1max_1samples_1per_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_samples_per_instance = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ResourceLimitsQosPolicy_1max_1samples_1per_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->max_samples_per_instance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ResourceLimitsQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ResourceLimitsQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ResourceLimitsQosPolicy *)new ResourceLimitsQosPolicy();
  *(ResourceLimitsQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ResourceLimitsQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ResourceLimitsQosPolicy *arg1 = (ResourceLimitsQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ResourceLimitsQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityFactoryQosPolicy_1autoenable_1created_1entities_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  EntityFactoryQosPolicy *arg1 = (EntityFactoryQosPolicy *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityFactoryQosPolicy **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoenable_created_entities = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityFactoryQosPolicy_1autoenable_1created_1entities_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EntityFactoryQosPolicy *arg1 = (EntityFactoryQosPolicy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityFactoryQosPolicy **)&jarg1; 
  result = (bool) ((arg1)->autoenable_created_entities);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1EntityFactoryQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityFactoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityFactoryQosPolicy *)new EntityFactoryQosPolicy();
  *(EntityFactoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1EntityFactoryQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityFactoryQosPolicy *arg1 = (EntityFactoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityFactoryQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WriterDataLifecycleQosPolicy_1autodispose_1unregistered_1instances_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  WriterDataLifecycleQosPolicy *arg1 = (WriterDataLifecycleQosPolicy *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WriterDataLifecycleQosPolicy **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autodispose_unregistered_instances = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WriterDataLifecycleQosPolicy_1autodispose_1unregistered_1instances_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  WriterDataLifecycleQosPolicy *arg1 = (WriterDataLifecycleQosPolicy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WriterDataLifecycleQosPolicy **)&jarg1; 
  result = (bool) ((arg1)->autodispose_unregistered_instances);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1WriterDataLifecycleQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WriterDataLifecycleQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WriterDataLifecycleQosPolicy *)new WriterDataLifecycleQosPolicy();
  *(WriterDataLifecycleQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1WriterDataLifecycleQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WriterDataLifecycleQosPolicy *arg1 = (WriterDataLifecycleQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WriterDataLifecycleQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReaderDataLifecycleQosPolicy_1autopurge_1nowriter_1samples_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ReaderDataLifecycleQosPolicy *arg1 = (ReaderDataLifecycleQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReaderDataLifecycleQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->autopurge_nowriter_samples_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReaderDataLifecycleQosPolicy_1autopurge_1nowriter_1samples_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReaderDataLifecycleQosPolicy *arg1 = (ReaderDataLifecycleQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReaderDataLifecycleQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->autopurge_nowriter_samples_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReaderDataLifecycleQosPolicy_1autopurge_1disposed_1samples_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ReaderDataLifecycleQosPolicy *arg1 = (ReaderDataLifecycleQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReaderDataLifecycleQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->autopurge_disposed_samples_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReaderDataLifecycleQosPolicy_1autopurge_1disposed_1samples_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReaderDataLifecycleQosPolicy *arg1 = (ReaderDataLifecycleQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReaderDataLifecycleQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->autopurge_disposed_samples_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ReaderDataLifecycleQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ReaderDataLifecycleQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ReaderDataLifecycleQosPolicy *)new ReaderDataLifecycleQosPolicy();
  *(ReaderDataLifecycleQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ReaderDataLifecycleQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReaderDataLifecycleQosPolicy *arg1 = (ReaderDataLifecycleQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReaderDataLifecycleQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1service_1cleanup_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->service_cleanup_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1service_1cleanup_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  result = (Duration_t *)& ((arg1)->service_cleanup_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1history_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  HistoryQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  arg2 = (HistoryQosPolicyKind)jarg2; 
  if (arg1) (arg1)->history_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1history_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  HistoryQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  result = (HistoryQosPolicyKind) ((arg1)->history_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1history_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->history_depth = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1history_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->history_depth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1max_1samples_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_samples = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1max_1samples_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->max_samples);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1max_1instances_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_instances = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1max_1instances_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->max_instances);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1max_1samples_1per_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_samples_per_instance = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DurabilityServiceQosPolicy_1max_1samples_1per_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  result = (int32_t) ((arg1)->max_samples_per_instance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DurabilityServiceQosPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DurabilityServiceQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DurabilityServiceQosPolicy *)new DurabilityServiceQosPolicy();
  *(DurabilityServiceQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DurabilityServiceQosPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DurabilityServiceQosPolicy *arg1 = (DurabilityServiceQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DurabilityServiceQosPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactoryQos_1entity_1factory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DomainParticipantFactoryQos *arg1 = (DomainParticipantFactoryQos *) 0 ;
  EntityFactoryQosPolicy *arg2 = (EntityFactoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantFactoryQos **)&jarg1; 
  arg2 = *(EntityFactoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->entity_factory = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactoryQos_1entity_1factory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DomainParticipantFactoryQos *arg1 = (DomainParticipantFactoryQos *) 0 ;
  EntityFactoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantFactoryQos **)&jarg1; 
  result = (EntityFactoryQosPolicy *)& ((arg1)->entity_factory);
  *(EntityFactoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DomainParticipantFactoryQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DomainParticipantFactoryQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DomainParticipantFactoryQos *)new DomainParticipantFactoryQos();
  *(DomainParticipantFactoryQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DomainParticipantFactoryQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DomainParticipantFactoryQos *arg1 = (DomainParticipantFactoryQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DomainParticipantFactoryQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantQos_1user_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  UserDataQosPolicy *arg2 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  arg2 = *(UserDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->user_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantQos_1user_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  result = (UserDataQosPolicy *)& ((arg1)->user_data);
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantQos_1entity_1factory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  EntityFactoryQosPolicy *arg2 = (EntityFactoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  arg2 = *(EntityFactoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->entity_factory = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantQos_1entity_1factory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  EntityFactoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  result = (EntityFactoryQosPolicy *)& ((arg1)->entity_factory);
  *(EntityFactoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DomainParticipantQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DomainParticipantQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DomainParticipantQos *)new DomainParticipantQos();
  *(DomainParticipantQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DomainParticipantQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1topic_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  TopicDataQosPolicy *arg2 = (TopicDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(TopicDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->topic_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1topic_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  TopicDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (TopicDataQosPolicy *)& ((arg1)->topic_data);
  *(TopicDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1durability_1service_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  DurabilityServiceQosPolicy *arg2 = (DurabilityServiceQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(DurabilityServiceQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability_service = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1durability_1service_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  DurabilityServiceQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (DurabilityServiceQosPolicy *)& ((arg1)->durability_service);
  *(DurabilityServiceQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1history_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  HistoryQosPolicy *arg2 = (HistoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(HistoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->history = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1history_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  HistoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (HistoryQosPolicy *)& ((arg1)->history);
  *(HistoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1resource_1limits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  ResourceLimitsQosPolicy *arg2 = (ResourceLimitsQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(ResourceLimitsQosPolicy **)&jarg2; 
  if (arg1) (arg1)->resource_limits = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1resource_1limits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  ResourceLimitsQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (ResourceLimitsQosPolicy *)& ((arg1)->resource_limits);
  *(ResourceLimitsQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1transport_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  TransportPriorityQosPolicy *arg2 = (TransportPriorityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(TransportPriorityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->transport_priority = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1transport_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  TransportPriorityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (TransportPriorityQosPolicy *)& ((arg1)->transport_priority);
  *(TransportPriorityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1lifespan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  LifespanQosPolicy *arg2 = (LifespanQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(LifespanQosPolicy **)&jarg2; 
  if (arg1) (arg1)->lifespan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1lifespan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  LifespanQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (LifespanQosPolicy *)& ((arg1)->lifespan);
  *(LifespanQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicQos **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicQos_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicQos *)new TopicQos();
  *(TopicQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicQos *arg1 = (TopicQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1durability_1service_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DurabilityServiceQosPolicy *arg2 = (DurabilityServiceQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(DurabilityServiceQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability_service = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1durability_1service_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DurabilityServiceQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (DurabilityServiceQosPolicy *)& ((arg1)->durability_service);
  *(DurabilityServiceQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1history_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  HistoryQosPolicy *arg2 = (HistoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(HistoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->history = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1history_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  HistoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (HistoryQosPolicy *)& ((arg1)->history);
  *(HistoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1resource_1limits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  ResourceLimitsQosPolicy *arg2 = (ResourceLimitsQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(ResourceLimitsQosPolicy **)&jarg2; 
  if (arg1) (arg1)->resource_limits = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1resource_1limits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  ResourceLimitsQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (ResourceLimitsQosPolicy *)& ((arg1)->resource_limits);
  *(ResourceLimitsQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1transport_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  TransportPriorityQosPolicy *arg2 = (TransportPriorityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(TransportPriorityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->transport_priority = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1transport_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  TransportPriorityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (TransportPriorityQosPolicy *)& ((arg1)->transport_priority);
  *(TransportPriorityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1lifespan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  LifespanQosPolicy *arg2 = (LifespanQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(LifespanQosPolicy **)&jarg2; 
  if (arg1) (arg1)->lifespan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1lifespan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  LifespanQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (LifespanQosPolicy *)& ((arg1)->lifespan);
  *(LifespanQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1user_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  UserDataQosPolicy *arg2 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(UserDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->user_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1user_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (UserDataQosPolicy *)& ((arg1)->user_data);
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1ownership_1strength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  OwnershipStrengthQosPolicy *arg2 = (OwnershipStrengthQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(OwnershipStrengthQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership_strength = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1ownership_1strength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  OwnershipStrengthQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (OwnershipStrengthQosPolicy *)& ((arg1)->ownership_strength);
  *(OwnershipStrengthQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1writer_1data_1lifecycle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  WriterDataLifecycleQosPolicy *arg2 = (WriterDataLifecycleQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriterQos **)&jarg1; 
  arg2 = *(WriterDataLifecycleQosPolicy **)&jarg2; 
  if (arg1) (arg1)->writer_data_lifecycle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterQos_1writer_1data_1lifecycle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  WriterDataLifecycleQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (WriterDataLifecycleQosPolicy *)& ((arg1)->writer_data_lifecycle);
  *(WriterDataLifecycleQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataWriterQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataWriterQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataWriterQos *)new DataWriterQos();
  *(DataWriterQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataWriterQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1presentation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  PresentationQosPolicy *arg2 = (PresentationQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublisherQos **)&jarg1; 
  arg2 = *(PresentationQosPolicy **)&jarg2; 
  if (arg1) (arg1)->presentation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1presentation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  PresentationQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  result = (PresentationQosPolicy *)& ((arg1)->presentation);
  *(PresentationQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1partition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  PartitionQosPolicy *arg2 = (PartitionQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublisherQos **)&jarg1; 
  arg2 = *(PartitionQosPolicy **)&jarg2; 
  if (arg1) (arg1)->partition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1partition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  PartitionQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  result = (PartitionQosPolicy *)& ((arg1)->partition);
  *(PartitionQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1group_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  GroupDataQosPolicy *arg2 = (GroupDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublisherQos **)&jarg1; 
  arg2 = *(GroupDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->group_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1group_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  GroupDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  result = (GroupDataQosPolicy *)& ((arg1)->group_data);
  *(GroupDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1entity_1factory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  EntityFactoryQosPolicy *arg2 = (EntityFactoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublisherQos **)&jarg1; 
  arg2 = *(EntityFactoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->entity_factory = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherQos_1entity_1factory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  EntityFactoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  result = (EntityFactoryQosPolicy *)& ((arg1)->entity_factory);
  *(EntityFactoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1PublisherQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PublisherQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PublisherQos *)new PublisherQos();
  *(PublisherQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1PublisherQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublisherQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1history_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  HistoryQosPolicy *arg2 = (HistoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(HistoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->history = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1history_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  HistoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (HistoryQosPolicy *)& ((arg1)->history);
  *(HistoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1resource_1limits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ResourceLimitsQosPolicy *arg2 = (ResourceLimitsQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(ResourceLimitsQosPolicy **)&jarg2; 
  if (arg1) (arg1)->resource_limits = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1resource_1limits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ResourceLimitsQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (ResourceLimitsQosPolicy *)& ((arg1)->resource_limits);
  *(ResourceLimitsQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1user_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  UserDataQosPolicy *arg2 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(UserDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->user_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1user_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (UserDataQosPolicy *)& ((arg1)->user_data);
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1time_1based_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  TimeBasedFilterQosPolicy *arg2 = (TimeBasedFilterQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(TimeBasedFilterQosPolicy **)&jarg2; 
  if (arg1) (arg1)->time_based_filter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1time_1based_1filter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  TimeBasedFilterQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (TimeBasedFilterQosPolicy *)& ((arg1)->time_based_filter);
  *(TimeBasedFilterQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1reader_1data_1lifecycle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ReaderDataLifecycleQosPolicy *arg2 = (ReaderDataLifecycleQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReaderQos **)&jarg1; 
  arg2 = *(ReaderDataLifecycleQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reader_data_lifecycle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderQos_1reader_1data_1lifecycle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ReaderDataLifecycleQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (ReaderDataLifecycleQosPolicy *)& ((arg1)->reader_data_lifecycle);
  *(ReaderDataLifecycleQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataReaderQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReaderQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReaderQos *)new DataReaderQos();
  *(DataReaderQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataReaderQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1presentation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  PresentationQosPolicy *arg2 = (PresentationQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriberQos **)&jarg1; 
  arg2 = *(PresentationQosPolicy **)&jarg2; 
  if (arg1) (arg1)->presentation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1presentation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  PresentationQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  result = (PresentationQosPolicy *)& ((arg1)->presentation);
  *(PresentationQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1partition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  PartitionQosPolicy *arg2 = (PartitionQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriberQos **)&jarg1; 
  arg2 = *(PartitionQosPolicy **)&jarg2; 
  if (arg1) (arg1)->partition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1partition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  PartitionQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  result = (PartitionQosPolicy *)& ((arg1)->partition);
  *(PartitionQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1group_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  GroupDataQosPolicy *arg2 = (GroupDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriberQos **)&jarg1; 
  arg2 = *(GroupDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->group_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1group_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  GroupDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  result = (GroupDataQosPolicy *)& ((arg1)->group_data);
  *(GroupDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1entity_1factory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  EntityFactoryQosPolicy *arg2 = (EntityFactoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriberQos **)&jarg1; 
  arg2 = *(EntityFactoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->entity_factory = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberQos_1entity_1factory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  EntityFactoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  result = (EntityFactoryQosPolicy *)& ((arg1)->entity_factory);
  *(EntityFactoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SubscriberQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SubscriberQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SubscriberQos *)new SubscriberQos();
  *(SubscriberQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SubscriberQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriberQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1presentation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  PresentationQosPolicy *arg2 = (PresentationQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(PresentationQosPolicy **)&jarg2; 
  if (arg1) (arg1)->presentation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RxOQos_1presentation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  PresentationQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  result = (PresentationQosPolicy *)& ((arg1)->presentation);
  *(PresentationQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1RxOQos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RxOQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RxOQos *)new RxOQos();
  *(RxOQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1RxOQos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RxOQos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantBuiltinTopicData_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParticipantBuiltinTopicData *arg1 = (ParticipantBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *arg2 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantBuiltinTopicData **)&jarg1; 
  arg2 = *(BuiltinTopicKey_t **)&jarg2; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantBuiltinTopicData_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ParticipantBuiltinTopicData *arg1 = (ParticipantBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantBuiltinTopicData **)&jarg1; 
  result = (BuiltinTopicKey_t *)& ((arg1)->key);
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantBuiltinTopicData_1user_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ParticipantBuiltinTopicData *arg1 = (ParticipantBuiltinTopicData *) 0 ;
  UserDataQosPolicy *arg2 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ParticipantBuiltinTopicData **)&jarg1; 
  arg2 = *(UserDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->user_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantBuiltinTopicData_1user_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ParticipantBuiltinTopicData *arg1 = (ParticipantBuiltinTopicData *) 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantBuiltinTopicData **)&jarg1; 
  result = (UserDataQosPolicy *)& ((arg1)->user_data);
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ParticipantBuiltinTopicData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ParticipantBuiltinTopicData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ParticipantBuiltinTopicData *)new ParticipantBuiltinTopicData();
  *(ParticipantBuiltinTopicData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ParticipantBuiltinTopicData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ParticipantBuiltinTopicData *arg1 = (ParticipantBuiltinTopicData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParticipantBuiltinTopicData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *arg2 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(BuiltinTopicKey_t **)&jarg2; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (BuiltinTopicKey_t *)& ((arg1)->key);
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (string) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type_name;
    if (arg2) {
      arg1->type_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type_name, (const char *)arg2);
    } else {
      arg1->type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (string) ((arg1)->type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1durability_1service_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DurabilityServiceQosPolicy *arg2 = (DurabilityServiceQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(DurabilityServiceQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability_service = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1durability_1service_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DurabilityServiceQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (DurabilityServiceQosPolicy *)& ((arg1)->durability_service);
  *(DurabilityServiceQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1transport_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  TransportPriorityQosPolicy *arg2 = (TransportPriorityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(TransportPriorityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->transport_priority = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1transport_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  TransportPriorityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (TransportPriorityQosPolicy *)& ((arg1)->transport_priority);
  *(TransportPriorityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1lifespan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  LifespanQosPolicy *arg2 = (LifespanQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(LifespanQosPolicy **)&jarg2; 
  if (arg1) (arg1)->lifespan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1lifespan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  LifespanQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (LifespanQosPolicy *)& ((arg1)->lifespan);
  *(LifespanQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1history_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  HistoryQosPolicy *arg2 = (HistoryQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(HistoryQosPolicy **)&jarg2; 
  if (arg1) (arg1)->history = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1history_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  HistoryQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (HistoryQosPolicy *)& ((arg1)->history);
  *(HistoryQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1resource_1limits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  ResourceLimitsQosPolicy *arg2 = (ResourceLimitsQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(ResourceLimitsQosPolicy **)&jarg2; 
  if (arg1) (arg1)->resource_limits = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1resource_1limits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  ResourceLimitsQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (ResourceLimitsQosPolicy *)& ((arg1)->resource_limits);
  *(ResourceLimitsQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1topic_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  TopicDataQosPolicy *arg2 = (TopicDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(TopicDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->topic_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicBuiltinTopicData_1topic_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  TopicDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  result = (TopicDataQosPolicy *)& ((arg1)->topic_data);
  *(TopicDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicBuiltinTopicData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicBuiltinTopicData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicBuiltinTopicData *)new TopicBuiltinTopicData();
  *(TopicBuiltinTopicData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicBuiltinTopicData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *arg2 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(BuiltinTopicKey_t **)&jarg2; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (BuiltinTopicKey_t *)& ((arg1)->key);
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1participant_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *arg2 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(BuiltinTopicKey_t **)&jarg2; 
  if (arg1) (arg1)->participant_key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1participant_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (BuiltinTopicKey_t *)& ((arg1)->participant_key);
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->topic_name;
    if (arg2) {
      arg1->topic_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->topic_name, (const char *)arg2);
    } else {
      arg1->topic_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (string) ((arg1)->topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type_name;
    if (arg2) {
      arg1->type_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type_name, (const char *)arg2);
    } else {
      arg1->type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (string) ((arg1)->type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1durability_1service_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DurabilityServiceQosPolicy *arg2 = (DurabilityServiceQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(DurabilityServiceQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability_service = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1durability_1service_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DurabilityServiceQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (DurabilityServiceQosPolicy *)& ((arg1)->durability_service);
  *(DurabilityServiceQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1lifespan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  LifespanQosPolicy *arg2 = (LifespanQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(LifespanQosPolicy **)&jarg2; 
  if (arg1) (arg1)->lifespan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1lifespan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  LifespanQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (LifespanQosPolicy *)& ((arg1)->lifespan);
  *(LifespanQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1user_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  UserDataQosPolicy *arg2 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(UserDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->user_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1user_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (UserDataQosPolicy *)& ((arg1)->user_data);
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1ownership_1strength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  OwnershipStrengthQosPolicy *arg2 = (OwnershipStrengthQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(OwnershipStrengthQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership_strength = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1ownership_1strength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  OwnershipStrengthQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (OwnershipStrengthQosPolicy *)& ((arg1)->ownership_strength);
  *(OwnershipStrengthQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1presentation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  PresentationQosPolicy *arg2 = (PresentationQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(PresentationQosPolicy **)&jarg2; 
  if (arg1) (arg1)->presentation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1presentation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  PresentationQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (PresentationQosPolicy *)& ((arg1)->presentation);
  *(PresentationQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1partition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  PartitionQosPolicy *arg2 = (PartitionQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(PartitionQosPolicy **)&jarg2; 
  if (arg1) (arg1)->partition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1partition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  PartitionQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (PartitionQosPolicy *)& ((arg1)->partition);
  *(PartitionQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1topic_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  TopicDataQosPolicy *arg2 = (TopicDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(TopicDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->topic_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1topic_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  TopicDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (TopicDataQosPolicy *)& ((arg1)->topic_data);
  *(TopicDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1group_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  GroupDataQosPolicy *arg2 = (GroupDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(GroupDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->group_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationBuiltinTopicData_1group_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  GroupDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  result = (GroupDataQosPolicy *)& ((arg1)->group_data);
  *(GroupDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1PublicationBuiltinTopicData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PublicationBuiltinTopicData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PublicationBuiltinTopicData *)new PublicationBuiltinTopicData();
  *(PublicationBuiltinTopicData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1PublicationBuiltinTopicData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *arg2 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(BuiltinTopicKey_t **)&jarg2; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (BuiltinTopicKey_t *)& ((arg1)->key);
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1participant_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *arg2 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(BuiltinTopicKey_t **)&jarg2; 
  if (arg1) (arg1)->participant_key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1participant_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (BuiltinTopicKey_t *)& ((arg1)->participant_key);
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->topic_name;
    if (arg2) {
      arg1->topic_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->topic_name, (const char *)arg2);
    } else {
      arg1->topic_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (string) ((arg1)->topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type_name;
    if (arg2) {
      arg1->type_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type_name, (const char *)arg2);
    } else {
      arg1->type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (string) ((arg1)->type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1durability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  DurabilityQosPolicy *arg2 = (DurabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(DurabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->durability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1durability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  DurabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (DurabilityQosPolicy *)& ((arg1)->durability);
  *(DurabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1deadline_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  DeadlineQosPolicy *arg2 = (DeadlineQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(DeadlineQosPolicy **)&jarg2; 
  if (arg1) (arg1)->deadline = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1deadline_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  DeadlineQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (DeadlineQosPolicy *)& ((arg1)->deadline);
  *(DeadlineQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1latency_1budget_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  LatencyBudgetQosPolicy *arg2 = (LatencyBudgetQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(LatencyBudgetQosPolicy **)&jarg2; 
  if (arg1) (arg1)->latency_budget = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1latency_1budget_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  LatencyBudgetQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (LatencyBudgetQosPolicy *)& ((arg1)->latency_budget);
  *(LatencyBudgetQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  LivelinessQosPolicy *arg2 = (LivelinessQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(LivelinessQosPolicy **)&jarg2; 
  if (arg1) (arg1)->liveliness = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  LivelinessQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (LivelinessQosPolicy *)& ((arg1)->liveliness);
  *(LivelinessQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1reliability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  ReliabilityQosPolicy *arg2 = (ReliabilityQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(ReliabilityQosPolicy **)&jarg2; 
  if (arg1) (arg1)->reliability = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1reliability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  ReliabilityQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (ReliabilityQosPolicy *)& ((arg1)->reliability);
  *(ReliabilityQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1ownership_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  OwnershipQosPolicy *arg2 = (OwnershipQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(OwnershipQosPolicy **)&jarg2; 
  if (arg1) (arg1)->ownership = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1ownership_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  OwnershipQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (OwnershipQosPolicy *)& ((arg1)->ownership);
  *(OwnershipQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1destination_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  DestinationOrderQosPolicy *arg2 = (DestinationOrderQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(DestinationOrderQosPolicy **)&jarg2; 
  if (arg1) (arg1)->destination_order = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1destination_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  DestinationOrderQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (DestinationOrderQosPolicy *)& ((arg1)->destination_order);
  *(DestinationOrderQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1user_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  UserDataQosPolicy *arg2 = (UserDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(UserDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->user_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1user_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  UserDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (UserDataQosPolicy *)& ((arg1)->user_data);
  *(UserDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1time_1based_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  TimeBasedFilterQosPolicy *arg2 = (TimeBasedFilterQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(TimeBasedFilterQosPolicy **)&jarg2; 
  if (arg1) (arg1)->time_based_filter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1time_1based_1filter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  TimeBasedFilterQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (TimeBasedFilterQosPolicy *)& ((arg1)->time_based_filter);
  *(TimeBasedFilterQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1presentation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  PresentationQosPolicy *arg2 = (PresentationQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(PresentationQosPolicy **)&jarg2; 
  if (arg1) (arg1)->presentation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1presentation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  PresentationQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (PresentationQosPolicy *)& ((arg1)->presentation);
  *(PresentationQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1partition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  PartitionQosPolicy *arg2 = (PartitionQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(PartitionQosPolicy **)&jarg2; 
  if (arg1) (arg1)->partition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1partition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  PartitionQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (PartitionQosPolicy *)& ((arg1)->partition);
  *(PartitionQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1topic_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  TopicDataQosPolicy *arg2 = (TopicDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(TopicDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->topic_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1topic_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  TopicDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (TopicDataQosPolicy *)& ((arg1)->topic_data);
  *(TopicDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1group_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  GroupDataQosPolicy *arg2 = (GroupDataQosPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(GroupDataQosPolicy **)&jarg2; 
  if (arg1) (arg1)->group_data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionBuiltinTopicData_1group_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  GroupDataQosPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  result = (GroupDataQosPolicy *)& ((arg1)->group_data);
  *(GroupDataQosPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SubscriptionBuiltinTopicData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SubscriptionBuiltinTopicData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SubscriptionBuiltinTopicData *)new SubscriptionBuiltinTopicData();
  *(SubscriptionBuiltinTopicData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SubscriptionBuiltinTopicData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Time_1t_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Time_t *arg1 = (Time_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Time_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sec = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Time_1t_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Time_t *arg1 = (Time_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Time_t **)&jarg1; 
  result = (int32_t) ((arg1)->sec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Time_1t_1nanosec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Time_t *arg1 = (Time_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Time_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nanosec = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Time_1t_1nanosec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Time_t *arg1 = (Time_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Time_t **)&jarg1; 
  result = (uint32_t) ((arg1)->nanosec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Time_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Time_t *)new Time_t();
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Time_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Time_t *arg1 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Time_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Duration_1t_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sec = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Duration_1t_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Duration_t *arg1 = (Duration_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  result = (int32_t) ((arg1)->sec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Duration_1t_1nanosec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nanosec = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Duration_1t_1nanosec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Duration_t *arg1 = (Duration_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  result = (uint32_t) ((arg1)->nanosec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Duration_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Duration_t *)new Duration_t();
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Duration_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Duration_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StringSeq_1i_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StringSeq *arg1 = (StringSeq *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StringSeq **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_string = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StringSeq_1i_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StringSeq *arg1 = (StringSeq *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StringSeq **)&jarg1; 
  result = (int32_t) ((arg1)->i_string);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StringSeq_1pp_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  StringSeq *arg1 = (StringSeq *) 0 ;
  string *arg2 = (string *) 0 ;
  jint size2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StringSeq **)&jarg1; 
  {
    int i = 0;
    size2 = jenv->GetArrayLength(jarg2);
    arg2 = (char **) malloc((size2+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size2; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg2[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg2[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg2[i] = 0;
  }
  if (arg1) (arg1)->pp_string = arg2;
  {
    int i;
    for (i=0; i<size2-1; i++)
    free(arg2[i]);
    free(arg2);
  }
}


SWIGEXPORT jobjectArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StringSeq_1pp_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  StringSeq *arg1 = (StringSeq *) 0 ;
  string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StringSeq **)&jarg1; 
  result = (string *) ((arg1)->pp_string);
  {
    int i;
    int len=0;
    jstring temp_string;
    const jclass clazz = jenv->FindClass("java/lang/String");
    
    while (result[len]) len++;    
    jresult = jenv->NewObjectArray(len, clazz, NULL);
    /* exception checking omitted */
    
    for (i=0; i<len; i++) {
      temp_string = jenv->NewStringUTF(*result++);
      jenv->SetObjectArrayElement(jresult, i, temp_string);
      jenv->DeleteLocalRef(temp_string);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1StringSeq(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StringSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StringSeq *)new StringSeq();
  *(StringSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1StringSeq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StringSeq *arg1 = (StringSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StringSeq **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Foo_1dummy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->dummy = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Foo_1dummy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int32_t) ((arg1)->dummy);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Foo_1allocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Foo *)Foo_allocation(arg1,arg2);
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooSeq_1i_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FooSeq *arg1 = (FooSeq *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooSeq **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_seq = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooSeq_1i_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooSeq *arg1 = (FooSeq *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooSeq **)&jarg1; 
  result = (int32_t) ((arg1)->i_seq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooSeq_1pp_1foo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FooSeq *arg1 = (FooSeq *) 0 ;
  Foo **arg2 = (Foo **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooSeq **)&jarg1; 
  arg2 = *(Foo ***)&jarg2; 
  if (arg1) (arg1)->pp_foo = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooSeq_1pp_1foo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooSeq *arg1 = (FooSeq *) 0 ;
  Foo **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooSeq **)&jarg1; 
  result = (Foo **) ((arg1)->pp_foo);
  *(Foo ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooSeq_1getFoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  FooSeq *arg1 = (FooSeq *) 0 ;
  int arg2 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooSeq **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Foo *)FooSeq_getFoo(arg1,arg2);
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1FooSeq(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FooSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FooSeq *)new FooSeq();
  *(FooSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1FooSeq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FooSeq *arg1 = (FooSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FooSeq **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantListener_1NotUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DomainParticipantListener *arg1 = (DomainParticipantListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantListener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NotUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantListener_1NotUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipantListener *arg1 = (DomainParticipantListener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantListener **)&jarg1; 
  result = (int) ((arg1)->NotUsed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DomainParticipantListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DomainParticipantListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DomainParticipantListener *)new DomainParticipantListener();
  *(DomainParticipantListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DomainParticipantListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DomainParticipantListener *arg1 = (DomainParticipantListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DomainParticipantListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberListener_1NotUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SubscriberListener *arg1 = (SubscriberListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberListener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NotUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberListener_1NotUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SubscriberListener *arg1 = (SubscriberListener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberListener **)&jarg1; 
  result = (int) ((arg1)->NotUsed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SubscriberListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SubscriberListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SubscriberListener *)new SubscriberListener();
  *(SubscriberListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SubscriberListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubscriberListener *arg1 = (SubscriberListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriberListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherListener_1NotUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PublisherListener *arg1 = (PublisherListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherListener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NotUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublisherListener_1NotUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PublisherListener *arg1 = (PublisherListener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherListener **)&jarg1; 
  result = (int) ((arg1)->NotUsed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1PublisherListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PublisherListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PublisherListener *)new PublisherListener();
  *(PublisherListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1PublisherListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PublisherListener *arg1 = (PublisherListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublisherListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicListener_1NotUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TopicListener *arg1 = (TopicListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicListener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NotUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicListener_1NotUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopicListener *arg1 = (TopicListener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicListener **)&jarg1; 
  result = (int) ((arg1)->NotUsed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicListener *)new TopicListener();
  *(TopicListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicListener *arg1 = (TopicListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListener_1NotUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataWriterListener *arg1 = (DataWriterListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterListener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NotUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListener_1NotUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataWriterListener *arg1 = (DataWriterListener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterListener **)&jarg1; 
  result = (int) ((arg1)->NotUsed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataWriterListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataWriterListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataWriterListener *)new DataWriterListener();
  *(DataWriterListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataWriterListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataWriterListener *arg1 = (DataWriterListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListener_1NotUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataReaderListener *arg1 = (DataReaderListener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderListener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NotUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListener_1NotUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReaderListener *arg1 = (DataReaderListener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderListener **)&jarg1; 
  result = (int) ((arg1)->NotUsed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataReaderListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReaderListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReaderListener *)new DataReaderListener();
  *(DataReaderListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataReaderListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataReaderListener *arg1 = (DataReaderListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilteredTopic_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilteredTopic_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilteredTopic_1b_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_enable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilteredTopic_1b_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  result = (bool) ((arg1)->b_enable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ContentFilteredTopic(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ContentFilteredTopic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ContentFilteredTopic *)new ContentFilteredTopic();
  *(ContentFilteredTopic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ContentFilteredTopic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  SUPPORT_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  arg2 = (SUPPORT_TYPE)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  SUPPORT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  result = (SUPPORT_TYPE) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1i_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1i_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  result = (int) ((arg1)->i_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1fieldname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->fieldname;
    if (arg2) {
      arg1->fieldname = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->fieldname, (const char *)arg2);
    } else {
      arg1->fieldname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1fieldname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  result = (char *) ((arg1)->fieldname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1is_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_key = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1is_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  result = (bool) ((arg1)->is_key);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1parameter_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_parameter_t **)&jarg1; 
  result = (long) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1dds_1parameter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dds_parameter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dds_parameter_t *)new dds_parameter_t();
  *(dds_parameter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1dds_1parameter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dds_parameter_t *arg1 = (dds_parameter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_parameter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1i_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1i_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  result = (int32_t) ((arg1)->i_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1i_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_parameters = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1i_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  result = (int32_t) ((arg1)->i_parameters);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1pp_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  dds_parameter_t **arg2 = (dds_parameter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(dds_parameter_t ***)&jarg2; 
  if (arg1) (arg1)->pp_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1pp_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  dds_parameter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  result = (dds_parameter_t **) ((arg1)->pp_parameters);
  *(dds_parameter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1register_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  char *arg3 = (char *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ReturnCode_t)FooTypeSupport_register_type(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1get_1type_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  result = (char *)FooTypeSupport_get_type_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getNewParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  char *arg2 = (char *) 0 ;
  SUPPORT_TYPE arg3 ;
  int arg4 ;
  dds_parameter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (SUPPORT_TYPE)jarg3; 
  arg4 = (int)jarg4; 
  result = (dds_parameter_t *)FooTypeSupport_getNewParameter(arg1,arg2,arg3,arg4);
  *(dds_parameter_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getNewParameterKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  char *arg2 = (char *) 0 ;
  SUPPORT_TYPE arg3 ;
  int arg4 ;
  dds_parameter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (SUPPORT_TYPE)jarg3; 
  arg4 = (int)jarg4; 
  result = (dds_parameter_t *)FooTypeSupport_getNewParameterKey(arg1,arg2,arg3,arg4);
  *(dds_parameter_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getNewFooTypeSupport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  FooTypeSupport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  result = (FooTypeSupport *)FooTypeSupport_getNewFooTypeSupport(arg1);
  *(FooTypeSupport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1insert_1param(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  dds_parameter_t *arg2 = (dds_parameter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(dds_parameter_t **)&jarg2; 
  FooTypeSupport_insert_param(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getValueInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)FooTypeSupport_getValueInteger(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getValueString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jstring jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)FooTypeSupport_getValueString(arg1,arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jobjectArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getValueStringArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jobjectArray jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (char **)FooTypeSupport_getValueStringArray(arg1,arg2,arg3,arg4);
  {
    int i;
    int len=0;
    jstring temp_string;
    const jclass clazz = jenv->FindClass("java/lang/String");
    
    while (result[len]) len++;    
    jresult = jenv->NewObjectArray(len, clazz, NULL);
    /* exception checking omitted */
    
    for (i=0; i<len; i++) {
      temp_string = jenv->NewStringUTF(*result++);
      jenv->SetObjectArrayElement(jresult, i, temp_string);
      jenv->DeleteLocalRef(temp_string);
    }
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getValueIntegerArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jintArray jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  jintArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = FooTypeSupport_getValueIntegerArray(arg1,arg2,arg3,arg4);
  jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getStringTypeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  result = (int)FooTypeSupport_getStringTypeSize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getTypeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)FooTypeSupport_getTypeSize(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1setValueInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  FooTypeSupport_setValueInteger(arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1setValueString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  FooTypeSupport_setValueString(arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jobject JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1getValueStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jobject jresult = 0 ;
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  jclass arg3 ;
  char *arg4 = (char *) 0 ;
  jclass *argp3 ;
  jobject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  argp3 = *(jclass **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null jclass");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = FooTypeSupport_getValueStruct(arg1,arg2,arg3,arg4);
  jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooTypeSupport_1setValueStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  char *arg3 = (char *) 0 ;
  Foo *arg4 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(FooTypeSupport **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(Foo **)&jarg4; 
  FooTypeSupport_setValueStruct(arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1FooTypeSupport(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FooTypeSupport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FooTypeSupport *)new FooTypeSupport();
  *(FooTypeSupport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1FooTypeSupport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FooTypeSupport *arg1 = (FooTypeSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FooTypeSupport **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataReader *arg1 = (DataReader *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1create_1readcondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  SampleStateMask arg2 ;
  ViewStateMask arg3 ;
  InstanceStateMask arg4 ;
  ReadCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (SampleStateMask)jarg2; 
  arg3 = (ViewStateMask)jarg3; 
  arg4 = (InstanceStateMask)jarg4; 
  result = (ReadCondition *)DataReader_create_readcondition(arg1,arg2,arg3,arg4);
  *(ReadCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1create_1querycondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  SampleStateMask arg2 ;
  ViewStateMask arg3 ;
  InstanceStateMask arg4 ;
  char *arg5 = (char *) 0 ;
  StringSeq *arg6 = (StringSeq *) 0 ;
  QueryCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (SampleStateMask)jarg2; 
  arg3 = (ViewStateMask)jarg3; 
  arg4 = (InstanceStateMask)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(StringSeq **)&jarg6; 
  result = (QueryCondition *)DataReader_create_querycondition(arg1,arg2,arg3,arg4,arg5,arg6);
  *(QueryCondition **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1delete_1readcondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  ReadCondition *arg2 = (ReadCondition *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(ReadCondition **)&jarg2; 
  result = (ReturnCode_t)DataReader_delete_readcondition(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1delete_1contained_1entities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (ReturnCode_t)DataReader_delete_contained_entities(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  result = (ReturnCode_t)DataReader_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  DataReaderListener *arg2 = (DataReaderListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(DataReaderListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)DataReader_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  DataReaderListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (DataReaderListener *)DataReader_get_listener(arg1);
  *(DataReaderListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1topicdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  TopicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (TopicDescription *)DataReader_get_topicdescription(arg1);
  *(TopicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  Subscriber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (Subscriber *)DataReader_get_subscriber(arg1);
  *(Subscriber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1sample_1rejected_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  SampleRejectedStatus *arg2 = (SampleRejectedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(SampleRejectedStatus **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_sample_rejected_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1liveliness_1changed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  LivelinessChangedStatus *arg2 = (LivelinessChangedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(LivelinessChangedStatus **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_liveliness_changed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1requested_1deadline_1missed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  RequestedDeadlineMissedStatus *arg2 = (RequestedDeadlineMissedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(RequestedDeadlineMissedStatus **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_requested_deadline_missed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1requested_1incompatible_1qos_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  RequestedIncompatibleQosStatus *arg2 = (RequestedIncompatibleQosStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(RequestedIncompatibleQosStatus **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_requested_incompatible_qos_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1subscription_1matched_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  SubscriptionMatchedStatus *arg2 = (SubscriptionMatchedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(SubscriptionMatchedStatus **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_subscription_matched_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1sample_1lost_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  SampleLostStatus *arg2 = (SampleLostStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(SampleLostStatus **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_sample_lost_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1wait_1for_1historical_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  Duration_t arg2 ;
  Duration_t *argp2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  argp2 = *(Duration_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (ReturnCode_t)DataReader_wait_for_historical_data(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1matched_1publications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  InstanceHandleSeq *arg2 = (InstanceHandleSeq *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(InstanceHandleSeq **)&jarg2; 
  result = (ReturnCode_t)DataReader_get_matched_publications(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReader_1get_1matched_1publication_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  PublicationBuiltinTopicData *arg2 = (PublicationBuiltinTopicData *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(PublicationBuiltinTopicData **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)DataReader_get_matched_publication_data(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReader *)new DataReader();
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataReader *arg1 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1create_1readcondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  SampleStateMask arg2 ;
  ViewStateMask arg3 ;
  InstanceStateMask arg4 ;
  ReadCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = (SampleStateMask)jarg2; 
  arg3 = (ViewStateMask)jarg3; 
  arg4 = (InstanceStateMask)jarg4; 
  result = (ReadCondition *)FooDataReader_create_readcondition(arg1,arg2,arg3,arg4);
  *(ReadCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1create_1querycondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  SampleStateMask arg2 ;
  ViewStateMask arg3 ;
  InstanceStateMask arg4 ;
  char *arg5 = (char *) 0 ;
  StringSeq *arg6 = (StringSeq *) 0 ;
  QueryCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = (SampleStateMask)jarg2; 
  arg3 = (ViewStateMask)jarg3; 
  arg4 = (InstanceStateMask)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(StringSeq **)&jarg6; 
  result = (QueryCondition *)FooDataReader_create_querycondition(arg1,arg2,arg3,arg4,arg5,arg6);
  *(QueryCondition **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1delete_1readcondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  ReadCondition *arg2 = (ReadCondition *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(ReadCondition **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_delete_readcondition(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1delete_1contained_1entities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  result = (ReturnCode_t)FooDataReader_delete_contained_entities(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  DataReaderListener *arg2 = (DataReaderListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(DataReaderListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)FooDataReader_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  DataReaderListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  result = (DataReaderListener *)FooDataReader_get_listener(arg1);
  *(DataReaderListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1topicdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  TopicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  result = (TopicDescription *)FooDataReader_get_topicdescription(arg1);
  *(TopicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  Subscriber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  result = (Subscriber *)FooDataReader_get_subscriber(arg1);
  *(Subscriber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1sample_1rejected_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  SampleRejectedStatus *arg2 = (SampleRejectedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(SampleRejectedStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_sample_rejected_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1liveliness_1changed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  LivelinessChangedStatus *arg2 = (LivelinessChangedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(LivelinessChangedStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_liveliness_changed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1requested_1deadline_1missed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  RequestedDeadlineMissedStatus *arg2 = (RequestedDeadlineMissedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(RequestedDeadlineMissedStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_requested_deadline_missed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1requested_1incompatible_1qos_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  RequestedIncompatibleQosStatus *arg2 = (RequestedIncompatibleQosStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(RequestedIncompatibleQosStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_requested_incompatible_qos_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1subscription_1matched_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  SubscriptionMatchedStatus *arg2 = (SubscriptionMatchedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(SubscriptionMatchedStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_subscription_matched_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1sample_1lost_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  SampleLostStatus *arg2 = (SampleLostStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(SampleLostStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_sample_lost_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1wait_1for_1historical_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  Duration_t arg2 ;
  Duration_t *argp2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(Duration_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (ReturnCode_t)FooDataReader_wait_for_historical_data(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1matched_1publications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  InstanceHandleSeq *arg2 = (InstanceHandleSeq *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(InstanceHandleSeq **)&jarg2; 
  result = (ReturnCode_t)FooDataReader_get_matched_publications(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1matched_1publication_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  PublicationBuiltinTopicData *arg2 = (PublicationBuiltinTopicData *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(PublicationBuiltinTopicData **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataReader_get_matched_publication_data(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq *arg2 = (FooSeq *) 0 ;
  SampleInfoSeq *arg3 = (SampleInfoSeq *) 0 ;
  long arg4 ;
  SampleStateMask arg5 ;
  ViewStateMask arg6 ;
  InstanceStateMask arg7 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(FooSeq **)&jarg2; 
  arg3 = *(SampleInfoSeq **)&jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (SampleStateMask)jarg5; 
  arg6 = (ViewStateMask)jarg6; 
  arg7 = (InstanceStateMask)jarg7; 
  result = (ReturnCode_t)FooDataReader_read(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1take(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq *arg2 = (FooSeq *) 0 ;
  SampleInfoSeq *arg3 = (SampleInfoSeq *) 0 ;
  long arg4 ;
  SampleStateMask arg5 ;
  ViewStateMask arg6 ;
  InstanceStateMask arg7 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(FooSeq **)&jarg2; 
  arg3 = *(SampleInfoSeq **)&jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (SampleStateMask)jarg5; 
  arg6 = (ViewStateMask)jarg6; 
  arg7 = (InstanceStateMask)jarg7; 
  result = (ReturnCode_t)FooDataReader_take(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1read_1w_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq arg2 ;
  SampleInfoSeq arg3 ;
  long arg4 ;
  ReadCondition arg5 ;
  FooSeq *argp2 ;
  SampleInfoSeq *argp3 ;
  ReadCondition *argp5 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(FooSeq **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FooSeq");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SampleInfoSeq **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SampleInfoSeq");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (long)jarg4; 
  argp5 = *(ReadCondition **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ReadCondition");
    return 0;
  }
  arg5 = *argp5; 
  result = (ReturnCode_t)FooDataReader_read_w_condition(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1take_1w_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq arg2 ;
  SampleInfoSeq arg3 ;
  long arg4 ;
  ReadCondition arg5 ;
  FooSeq *argp2 ;
  SampleInfoSeq *argp3 ;
  ReadCondition *argp5 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(FooSeq **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FooSeq");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SampleInfoSeq **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SampleInfoSeq");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (long)jarg4; 
  argp5 = *(ReadCondition **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ReadCondition");
    return 0;
  }
  arg5 = *argp5; 
  result = (ReturnCode_t)FooDataReader_take_w_condition(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1read_1next_1sample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  Foo arg2 ;
  SampleInfo arg3 ;
  Foo *argp2 ;
  SampleInfo *argp3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(Foo **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Foo");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SampleInfo **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SampleInfo");
    return 0;
  }
  arg3 = *argp3; 
  result = (ReturnCode_t)FooDataReader_read_next_sample(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1take_1next_1sample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  Foo arg2 ;
  SampleInfo arg3 ;
  Foo *argp2 ;
  SampleInfo *argp3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(Foo **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Foo");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SampleInfo **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SampleInfo");
    return 0;
  }
  arg3 = *argp3; 
  result = (ReturnCode_t)FooDataReader_take_next_sample(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1read_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq *arg2 = (FooSeq *) 0 ;
  SampleInfoSeq *arg3 = (SampleInfoSeq *) 0 ;
  long arg4 ;
  InstanceHandle_t arg5 ;
  SampleStateMask arg6 ;
  ViewStateMask arg7 ;
  InstanceStateMask arg8 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(FooSeq **)&jarg2; 
  arg3 = *(SampleInfoSeq **)&jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (InstanceHandle_t)jarg5; 
  arg6 = (SampleStateMask)jarg6; 
  arg7 = (ViewStateMask)jarg7; 
  arg8 = (InstanceStateMask)jarg8; 
  result = (ReturnCode_t)FooDataReader_read_instance(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1take_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq *arg2 = (FooSeq *) 0 ;
  SampleInfoSeq *arg3 = (SampleInfoSeq *) 0 ;
  long arg4 ;
  InstanceHandle_t arg5 ;
  SampleStateMask arg6 ;
  ViewStateMask arg7 ;
  InstanceStateMask arg8 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(FooSeq **)&jarg2; 
  arg3 = *(SampleInfoSeq **)&jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (InstanceHandle_t)jarg5; 
  arg6 = (SampleStateMask)jarg6; 
  arg7 = (ViewStateMask)jarg7; 
  arg8 = (InstanceStateMask)jarg8; 
  result = (ReturnCode_t)FooDataReader_take_instance(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1read_1next_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq arg2 ;
  SampleInfoSeq arg3 ;
  long arg4 ;
  InstanceHandle_t arg5 ;
  SampleStateMask arg6 ;
  ViewStateMask arg7 ;
  InstanceStateMask arg8 ;
  FooSeq *argp2 ;
  SampleInfoSeq *argp3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(FooSeq **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FooSeq");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SampleInfoSeq **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SampleInfoSeq");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (long)jarg4; 
  arg5 = (InstanceHandle_t)jarg5; 
  arg6 = (SampleStateMask)jarg6; 
  arg7 = (ViewStateMask)jarg7; 
  arg8 = (InstanceStateMask)jarg8; 
  result = (ReturnCode_t)FooDataReader_read_next_instance(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1take_1next_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  FooSeq arg2 ;
  SampleInfoSeq arg3 ;
  long arg4 ;
  InstanceHandle_t arg5 ;
  SampleStateMask arg6 ;
  ViewStateMask arg7 ;
  InstanceStateMask arg8 ;
  FooSeq *argp2 ;
  SampleInfoSeq *argp3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataReader **)&jarg1; 
  argp2 = *(FooSeq **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FooSeq");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SampleInfoSeq **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SampleInfoSeq");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (long)jarg4; 
  arg5 = (InstanceHandle_t)jarg5; 
  arg6 = (SampleStateMask)jarg6; 
  arg7 = (ViewStateMask)jarg7; 
  arg8 = (InstanceStateMask)jarg8; 
  result = (ReturnCode_t)FooDataReader_take_next_instance(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1get_1key_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataReader_get_key_value(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataReader_1lookup_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataReader **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  result = (InstanceHandle_t)FooDataReader_lookup_instance(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1FooDataReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FooDataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FooDataReader *)new FooDataReader();
  *(FooDataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1FooDataReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FooDataReader *arg1 = (FooDataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FooDataReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  result = (ReturnCode_t)DataWriter_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  result = (ReturnCode_t)DataWriter_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  DataWriterListener *arg2 = (DataWriterListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(DataWriterListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)DataWriter_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  DataWriterListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  result = (DataWriterListener *)DataWriter_get_listener(arg1);
  *(DataWriterListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  Topic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  result = (Topic *)DataWriter_get_topic(arg1);
  *(Topic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1publisher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  Publisher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  result = (Publisher *)DataWriter_get_publisher(arg1);
  *(Publisher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1wait_1for_1acknowledgments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  Duration_t arg2 ;
  Duration_t *argp2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  argp2 = *(Duration_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (ReturnCode_t)DataWriter_wait_for_acknowledgments(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1liveliness_1lost_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  LivelinessLostStatus *arg2 = (LivelinessLostStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(LivelinessLostStatus **)&jarg2; 
  result = (ReturnCode_t)DataWriter_get_liveliness_lost_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1offered_1deadline_1missed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  OfferedDeadlineMissedStatus *arg2 = (OfferedDeadlineMissedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(OfferedDeadlineMissedStatus **)&jarg2; 
  result = (ReturnCode_t)DataWriter_get_offered_deadline_missed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1offered_1incompatible_1qos_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  OfferedIncompatibleQosStatus *arg2 = (OfferedIncompatibleQosStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(OfferedIncompatibleQosStatus **)&jarg2; 
  result = (ReturnCode_t)DataWriter_get_offered_incompatible_qos_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1publication_1matched_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  PublicationMatchedStatus *arg2 = (PublicationMatchedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(PublicationMatchedStatus **)&jarg2; 
  result = (ReturnCode_t)DataWriter_get_publication_matched_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1assert_1liveliness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  result = (ReturnCode_t)DataWriter_assert_liveliness(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1matched_1subscriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  InstanceHandleSeq *arg2 = (InstanceHandleSeq *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(InstanceHandleSeq **)&jarg2; 
  result = (ReturnCode_t)DataWriter_get_matched_subscriptions(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriter_1get_1matched_1subscription_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  SubscriptionBuiltinTopicData *arg2 = (SubscriptionBuiltinTopicData *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(SubscriptionBuiltinTopicData **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)DataWriter_get_matched_subscription_data(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataWriter *)new DataWriter();
  *(DataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  DataWriterListener *arg2 = (DataWriterListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(DataWriterListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)FooDataWriter_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  DataWriterListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  result = (DataWriterListener *)FooDataWriter_get_listener(arg1);
  *(DataWriterListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Topic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  result = (Topic *)FooDataWriter_get_topic(arg1);
  *(Topic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1publisher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Publisher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  result = (Publisher *)FooDataWriter_get_publisher(arg1);
  *(Publisher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1wait_1for_1acknowledgments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Duration_t arg2 ;
  Duration_t *argp2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  argp2 = *(Duration_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (ReturnCode_t)FooDataWriter_wait_for_acknowledgments(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1liveliness_1lost_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  LivelinessLostStatus *arg2 = (LivelinessLostStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(LivelinessLostStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_get_liveliness_lost_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1offered_1deadline_1missed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  OfferedDeadlineMissedStatus *arg2 = (OfferedDeadlineMissedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(OfferedDeadlineMissedStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_get_offered_deadline_missed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1offered_1incompatible_1qos_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  OfferedIncompatibleQosStatus *arg2 = (OfferedIncompatibleQosStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(OfferedIncompatibleQosStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_get_offered_incompatible_qos_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1publication_1matched_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  PublicationMatchedStatus *arg2 = (PublicationMatchedStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(PublicationMatchedStatus **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_get_publication_matched_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1assert_1liveliness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FooDataWriter **)&jarg1; 
  result = (ReturnCode_t)FooDataWriter_assert_liveliness(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1matched_1subscriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  InstanceHandleSeq *arg2 = (InstanceHandleSeq *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(InstanceHandleSeq **)&jarg2; 
  result = (ReturnCode_t)FooDataWriter_get_matched_subscriptions(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1matched_1subscription_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  SubscriptionBuiltinTopicData *arg2 = (SubscriptionBuiltinTopicData *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(SubscriptionBuiltinTopicData **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataWriter_get_matched_subscription_data(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1register_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  result = (InstanceHandle_t)FooDataWriter_register_instance(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1register_1instance_1w_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  Time_t arg3 ;
  Time_t *argp3 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  argp3 = *(Time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (InstanceHandle_t)FooDataWriter_register_instance_w_timestamp(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1unregister_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataWriter_unregister_instance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1unregister_1instance_1w_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  Time_t arg4 ;
  Time_t *argp4 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  argp4 = *(Time_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg4 = *argp4; 
  result = (ReturnCode_t)FooDataWriter_unregister_instance_w_timestamp(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataWriter_write(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1write_1w_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  Time_t arg4 ;
  Time_t *argp4 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  argp4 = *(Time_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg4 = *argp4; 
  result = (ReturnCode_t)FooDataWriter_write_w_timestamp(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1dispose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataWriter_dispose(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1dispose_1w_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  Time_t arg4 ;
  Time_t *argp4 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  argp4 = *(Time_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg4 = *argp4; 
  result = (ReturnCode_t)FooDataWriter_dispose_w_timestamp(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1get_1key_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)FooDataWriter_get_key_value(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FooDataWriter_1lookup_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  Foo *arg2 = (Foo *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FooDataWriter **)&jarg1; 
  arg2 = *(Foo **)&jarg2; 
  result = (InstanceHandle_t)FooDataWriter_lookup_instance(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1FooDataWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FooDataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FooDataWriter *)new FooDataWriter();
  *(FooDataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1FooDataWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FooDataWriter *arg1 = (FooDataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FooDataWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Publisher *arg1 = (Publisher *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1publisherQos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Publisher *arg1 = (Publisher *) 0 ;
  PublisherQos *arg2 = (PublisherQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(PublisherQos **)&jarg2; 
  if (arg1) (arg1)->publisherQos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1publisherQos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  PublisherQos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (PublisherQos *)& ((arg1)->publisherQos);
  *(PublisherQos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1create_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  DataWriterQos *arg3 = (DataWriterQos *) 0 ;
  DataWriterListener *arg4 = (DataWriterListener *) 0 ;
  StatusMask arg5 ;
  DataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  arg3 = *(DataWriterQos **)&jarg3; 
  arg4 = *(DataWriterListener **)&jarg4; 
  arg5 = (StatusMask)jarg5; 
  result = (DataWriter *)Publisher_create_datawriter(arg1,arg2,arg3,arg4,arg5);
  *(DataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1create_1foodatawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  DataWriterQos *arg3 = (DataWriterQos *) 0 ;
  DataWriterListener *arg4 = (DataWriterListener *) 0 ;
  StatusMask arg5 ;
  FooDataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  arg3 = *(DataWriterQos **)&jarg3; 
  arg4 = *(DataWriterListener **)&jarg4; 
  arg5 = (StatusMask)jarg5; 
  result = (FooDataWriter *)Publisher_create_foodatawriter(arg1,arg2,arg3,arg4,arg5);
  *(FooDataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1delete_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  DataWriter *arg2 = (DataWriter *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(DataWriter **)&jarg2; 
  result = (ReturnCode_t)Publisher_delete_datawriter(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1lookup_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  char *arg2 = (char *) 0 ;
  DataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (DataWriter *)Publisher_lookup_datawriter(arg1,arg2);
  *(DataWriter **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1delete_1contained_1entities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (ReturnCode_t)Publisher_delete_contained_entities(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  PublisherQos *arg2 = (PublisherQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(PublisherQos **)&jarg2; 
  result = (ReturnCode_t)Publisher_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  PublisherQos *arg2 = (PublisherQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(PublisherQos **)&jarg2; 
  result = (ReturnCode_t)Publisher_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  PublisherListener *arg2 = (PublisherListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(PublisherListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)Publisher_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  PublisherListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (PublisherListener *)Publisher_get_listener(arg1);
  *(PublisherListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1suspend_1publications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (ReturnCode_t)Publisher_suspend_publications(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1resume_1publications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (ReturnCode_t)Publisher_resume_publications(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1begin_1coherent_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (ReturnCode_t)Publisher_begin_coherent_changes(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1end_1coherent_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (ReturnCode_t)Publisher_end_coherent_changes(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1wait_1for_1acknowledgments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  Duration_t arg2 ;
  Duration_t *argp2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  argp2 = *(Duration_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (ReturnCode_t)Publisher_wait_for_acknowledgments(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1get_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  result = (DomainParticipant *)Publisher_get_participant(arg1);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1set_1default_1datawriter_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  result = (ReturnCode_t)Publisher_set_default_datawriter_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1get_1default_1datawriter_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  result = (ReturnCode_t)Publisher_get_default_datawriter_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Publisher_1copy_1from_1topic_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  Publisher *arg1 = (Publisher *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  TopicQos *arg3 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Publisher **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  arg3 = *(TopicQos **)&jarg3; 
  result = (ReturnCode_t)Publisher_copy_from_topic_qos(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Publisher(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Publisher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Publisher *)new Publisher();
  *(Publisher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Publisher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Publisher *arg1 = (Publisher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Publisher **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Subscriber *arg1 = (Subscriber *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1create_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  DataReaderQos *arg3 = (DataReaderQos *) 0 ;
  DataReaderListener *arg4 = (DataReaderListener *) 0 ;
  StatusMask arg5 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  arg3 = *(DataReaderQos **)&jarg3; 
  arg4 = *(DataReaderListener **)&jarg4; 
  arg5 = (StatusMask)jarg5; 
  result = (DataReader *)Subscriber_create_datareader(arg1,arg2,arg3,arg4,arg5);
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1create_1foodatareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  DataReaderQos *arg3 = (DataReaderQos *) 0 ;
  DataReaderListener *arg4 = (DataReaderListener *) 0 ;
  StatusMask arg5 ;
  FooDataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  arg3 = *(DataReaderQos **)&jarg3; 
  arg4 = *(DataReaderListener **)&jarg4; 
  arg5 = (StatusMask)jarg5; 
  result = (FooDataReader *)Subscriber_create_foodatareader(arg1,arg2,arg3,arg4,arg5);
  *(FooDataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1delete_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  result = (ReturnCode_t)Subscriber_delete_datareader(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1delete_1contained_1entities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (ReturnCode_t)Subscriber_delete_contained_entities(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1lookup_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  char *arg2 = (char *) 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (DataReader *)Subscriber_lookup_datareader(arg1,arg2);
  *(DataReader **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1get_1datareaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  DataReaderSeq *arg2 = (DataReaderSeq *) 0 ;
  SampleStateMask arg3 ;
  ViewStateMask arg4 ;
  InstanceStateMask arg5 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(DataReaderSeq **)&jarg2; 
  arg3 = (SampleStateMask)jarg3; 
  arg4 = (ViewStateMask)jarg4; 
  arg5 = (InstanceStateMask)jarg5; 
  result = (ReturnCode_t)Subscriber_get_datareaders(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1notify_1datareaders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (ReturnCode_t)Subscriber_notify_datareaders(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  SubscriberQos *arg2 = (SubscriberQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(SubscriberQos **)&jarg2; 
  result = (ReturnCode_t)Subscriber_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  SubscriberQos *arg2 = (SubscriberQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(SubscriberQos **)&jarg2; 
  result = (ReturnCode_t)Subscriber_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  SubscriberListener *arg2 = (SubscriberListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(SubscriberListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)Subscriber_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  SubscriberListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (SubscriberListener *)Subscriber_get_listener(arg1);
  *(SubscriberListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1begin_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (ReturnCode_t)Subscriber_begin_access(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1end_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (ReturnCode_t)Subscriber_end_access(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1get_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  result = (DomainParticipant *)Subscriber_get_participant(arg1);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1set_1default_1datareader_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  result = (ReturnCode_t)Subscriber_set_default_datareader_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1get_1default_1datareader_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  result = (ReturnCode_t)Subscriber_get_default_datareader_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Subscriber_1copy_1from_1topic_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  Subscriber *arg1 = (Subscriber *) 0 ;
  DataReaderQos *arg2 = (DataReaderQos *) 0 ;
  TopicQos *arg3 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Subscriber **)&jarg1; 
  arg2 = *(DataReaderQos **)&jarg2; 
  arg3 = *(TopicQos **)&jarg3; 
  result = (ReturnCode_t)Subscriber_copy_from_topic_qos(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Subscriber(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Subscriber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Subscriber *)new Subscriber();
  *(Subscriber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Subscriber *arg1 = (Subscriber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Subscriber **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Topic *arg1 = (Topic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Topic *arg1 = (Topic *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->topic_name;
    if (arg2) {
      arg1->topic_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->topic_name, (const char *)arg2);
    } else {
      arg1->topic_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (char *) ((arg1)->topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Topic *arg1 = (Topic *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type_name;
    if (arg2) {
      arg1->type_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type_name, (const char *)arg2);
    } else {
      arg1->type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (char *) ((arg1)->type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1p_1domainParticipant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Topic *arg1 = (Topic *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  if (arg1) (arg1)->p_domainParticipant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1p_1domainParticipant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (DomainParticipant *) ((arg1)->p_domainParticipant);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1topic_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Topic *arg1 = (Topic *) 0 ;
  TOPIC_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = (TOPIC_TYPE)jarg2; 
  if (arg1) (arg1)->topic_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1topic_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  TOPIC_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (TOPIC_TYPE) ((arg1)->topic_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1get_1type_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (char *)Topic_get_type_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (char *)Topic_get_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1get_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  Topic arg2 ;
  Topic *argp2 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Topic **)&jarg1; 
  argp2 = *(Topic **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Topic");
    return 0;
  }
  arg2 = *argp2; 
  result = (DomainParticipant *)Topic_get_participant(arg1,arg2);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  TopicQos *arg2 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = *(TopicQos **)&jarg2; 
  result = (ReturnCode_t)Topic_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  TopicQos *arg2 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = *(TopicQos **)&jarg2; 
  result = (ReturnCode_t)Topic_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  TopicListener *arg2 = (TopicListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = *(TopicListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)Topic_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  TopicListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (TopicListener *)Topic_get_listener(arg1);
  *(TopicListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Topic_1get_1inconsistent_1topic_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  InconsistentTopicStatus *arg2 = (InconsistentTopicStatus *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = *(InconsistentTopicStatus **)&jarg2; 
  result = (ReturnCode_t)Topic_get_inconsistent_topic_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Topic(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Topic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Topic *)new Topic();
  *(Topic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Topic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Topic *arg1 = (Topic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Topic **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1i_1entityType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entityType = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1i_1entityType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (int32_t) ((arg1)->i_entityType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1create_1publisher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  PublisherQos *arg2 = (PublisherQos *) 0 ;
  PublisherListener *arg3 = (PublisherListener *) 0 ;
  StatusMask arg4 ;
  Publisher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(PublisherQos **)&jarg2; 
  arg3 = *(PublisherListener **)&jarg3; 
  arg4 = (StatusMask)jarg4; 
  result = (Publisher *)DomainParticipant_create_publisher(arg1,arg2,arg3,arg4);
  *(Publisher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1delete_1publisher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  Publisher *arg2 = (Publisher *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(Publisher **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_delete_publisher(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1create_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  SubscriberQos *arg2 = (SubscriberQos *) 0 ;
  SubscriberListener *arg3 = (SubscriberListener *) 0 ;
  StatusMask arg4 ;
  Subscriber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(SubscriberQos **)&jarg2; 
  arg3 = *(SubscriberListener **)&jarg3; 
  arg4 = (StatusMask)jarg4; 
  result = (Subscriber *)DomainParticipant_create_subscriber(arg1,arg2,arg3,arg4);
  *(Subscriber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1delete_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  Subscriber *arg2 = (Subscriber *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(Subscriber **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_delete_subscriber(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1builtin_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  Subscriber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (Subscriber *)DomainParticipant_get_builtin_subscriber(arg1);
  *(Subscriber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1create_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  TopicQos *arg4 = (TopicQos *) 0 ;
  TopicListener *arg5 = (TopicListener *) 0 ;
  StatusMask arg6 ;
  Topic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(TopicQos **)&jarg4; 
  arg5 = *(TopicListener **)&jarg5; 
  arg6 = (StatusMask)jarg6; 
  result = (Topic *)DomainParticipant_create_topic(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Topic **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1delete_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_delete_topic(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1find_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  char *arg2 = (char *) 0 ;
  Duration_t arg3 ;
  Duration_t *argp3 ;
  Topic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(Duration_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (Topic *)DomainParticipant_find_topic(arg1,arg2,arg3);
  *(Topic **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1lookup_1topicdescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  char *arg2 = (char *) 0 ;
  TopicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (TopicDescription *)DomainParticipant_lookup_topicdescription(arg1,arg2);
  *(TopicDescription **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1create_1contentfilteredtopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  char *arg2 = (char *) 0 ;
  Topic *arg3 = (Topic *) 0 ;
  char *arg4 = (char *) 0 ;
  StringSeq arg5 ;
  StringSeq *argp5 ;
  ContentFilteredTopic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(Topic **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(StringSeq **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null StringSeq");
    return 0;
  }
  arg5 = *argp5; 
  result = (ContentFilteredTopic *)DomainParticipant_create_contentfilteredtopic(arg1,arg2,arg3,arg4,arg5);
  *(ContentFilteredTopic **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1delete_1contentfilteredtopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  ContentFilteredTopic *arg2 = (ContentFilteredTopic *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(ContentFilteredTopic **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_delete_contentfilteredtopic(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1create_1multitopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  StringSeq arg5 ;
  StringSeq *argp5 ;
  MultiTopic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(StringSeq **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null StringSeq");
    return 0;
  }
  arg5 = *argp5; 
  result = (MultiTopic *)DomainParticipant_create_multitopic(arg1,arg2,arg3,arg4,arg5);
  *(MultiTopic **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1delete_1multitopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  MultiTopic *arg2 = (MultiTopic *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(MultiTopic **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_delete_multitopic(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1delete_1contained_1entities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (ReturnCode_t)DomainParticipant_delete_contained_entities(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  DomainParticipantQos *arg2 = (DomainParticipantQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(DomainParticipantQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  DomainParticipantQos *arg2 = (DomainParticipantQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(DomainParticipantQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1set_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  DomainParticipantListener *arg2 = (DomainParticipantListener *) 0 ;
  StatusMask arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(DomainParticipantListener **)&jarg2; 
  arg3 = (StatusMask)jarg3; 
  result = (ReturnCode_t)DomainParticipant_set_listener(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  DomainParticipantListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (DomainParticipantListener *)DomainParticipant_get_listener(arg1);
  *(DomainParticipantListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1ignore_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandle_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (ReturnCode_t)DomainParticipant_ignore_participant(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1ignore_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandle_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (ReturnCode_t)DomainParticipant_ignore_topic(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1ignore_1publication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandle_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (ReturnCode_t)DomainParticipant_ignore_publication(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1ignore_1subscription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandle_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (ReturnCode_t)DomainParticipant_ignore_subscription(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1domain_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  DomainId_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (DomainId_t)DomainParticipant_get_domain_id(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1assert_1liveliness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (ReturnCode_t)DomainParticipant_assert_liveliness(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1set_1default_1publisher_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  PublisherQos *arg2 = (PublisherQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(PublisherQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_set_default_publisher_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1default_1publisher_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  PublisherQos *arg2 = (PublisherQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(PublisherQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_default_publisher_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1set_1default_1subscriber_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  SubscriberQos *arg2 = (SubscriberQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(SubscriberQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_set_default_subscriber_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1default_1subscriber_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  SubscriberQos *arg2 = (SubscriberQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(SubscriberQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_default_subscriber_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1set_1default_1topic_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  TopicQos *arg2 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(TopicQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_set_default_topic_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1default_1topic_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  TopicQos *arg2 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(TopicQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_default_topic_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1discovered_1participants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandleSeq *arg2 = (InstanceHandleSeq *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(InstanceHandleSeq **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_discovered_participants(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1discovered_1participant_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  ParticipantBuiltinTopicData *arg2 = (ParticipantBuiltinTopicData *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(ParticipantBuiltinTopicData **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)DomainParticipant_get_discovered_participant_data(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1discovered_1topics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandleSeq *arg2 = (InstanceHandleSeq *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(InstanceHandleSeq **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_discovered_topics(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1discovered_1topic_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  TopicBuiltinTopicData *arg2 = (TopicBuiltinTopicData *) 0 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(TopicBuiltinTopicData **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)DomainParticipant_get_discovered_topic_data(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1contains_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  InstanceHandle_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (bool)DomainParticipant_contains_entity(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipant_1get_1current_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  result = (ReturnCode_t)DomainParticipant_get_current_time(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DomainParticipant(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DomainParticipant *)new DomainParticipant();
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DomainParticipant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DomainParticipant **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1module_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->module_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1module_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  result = (int32_t) ((arg1)->module_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1DomainParticipantFactory_1get_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainParticipantFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  result = (DomainParticipantFactory *)DomainParticipantFactory_DomainParticipantFactory_get_instance(arg1);
  *(DomainParticipantFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1create_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainId_t arg2 ;
  DomainParticipantQos *arg3 = (DomainParticipantQos *) 0 ;
  DomainParticipantListener *arg4 = (DomainParticipantListener *) 0 ;
  StatusMask arg5 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = (DomainId_t)jarg2; 
  arg3 = *(DomainParticipantQos **)&jarg3; 
  arg4 = *(DomainParticipantListener **)&jarg4; 
  arg5 = (StatusMask)jarg5; 
  result = (DomainParticipant *)DomainParticipantFactory_create_participant(arg1,arg2,arg3,arg4,arg5);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1delete_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  result = (ReturnCode_t)DomainParticipantFactory_delete_participant(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1lookup_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainId_t arg2 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = (DomainId_t)jarg2; 
  result = (DomainParticipant *)DomainParticipantFactory_lookup_participant(arg1,arg2);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1set_1default_1participant_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainParticipantQos *arg2 = (DomainParticipantQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = *(DomainParticipantQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipantFactory_set_default_participant_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1get_1default_1participant_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainParticipantQos *arg2 = (DomainParticipantQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = *(DomainParticipantQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipantFactory_get_default_participant_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1set_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainParticipantFactoryQos *arg2 = (DomainParticipantFactoryQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = *(DomainParticipantFactoryQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipantFactory_set_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1get_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  DomainParticipantFactoryQos *arg2 = (DomainParticipantFactoryQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  arg2 = *(DomainParticipantFactoryQos **)&jarg2; 
  result = (ReturnCode_t)DomainParticipantFactory_get_qos(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DomainParticipantFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DomainParticipantFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DomainParticipantFactory *)new DomainParticipantFactory();
  *(DomainParticipantFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DomainParticipantFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_CLOCK_1FREQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1000000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_tracemalloc(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (void *)tracemalloc((char const *)arg1,(char const *)arg2,arg3);
  *(void **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_tracefree(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  tracefree((char const *)arg1,(char const *)arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_tracestrdup(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)tracestrdup((char const *)arg1,(char const *)arg2,(char const *)arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_tracerealloc(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = (size_t)jarg4; 
  result = (void *)tracerealloc((char const *)arg1,(char const *)arg2,arg3,arg4);
  *(void **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_malloc_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (void *)malloc_zero(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DOMAINPARTICIPANT_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WAITSET_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_THREAD_1PRIORITY_1HIGHEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1ZERO_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  TIME_ZERO = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Duration_t *)&TIME_ZERO;
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1INVALID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  TIME_INVALID = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Duration_t *)&TIME_INVALID;
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1INFINITE_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  TIME_INFINITE = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1INFINITE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Duration_t *)&TIME_INFINITE;
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITY_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TOPIC_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PUBLISHER_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DATAREADER_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DATAWRITER_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SUBSCRIBER_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SAMPLEINFO_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HANDLE_1NIL_1NATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HANDLE_1TYPE_1NATIVE_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BuiltinTopicKey_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  BuiltinTopicKey_t *arg1 = (BuiltinTopicKey_t *) 0 ;
  int32_t *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BuiltinTopicKey_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->value;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BuiltinTopicKey_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jintArray jresult = 0 ;
  BuiltinTopicKey_t *arg1 = (BuiltinTopicKey_t *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BuiltinTopicKey_t **)&jarg1; 
  result = (int32_t *)(int32_t *) ((arg1)->value);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, 4); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1BuiltinTopicKey_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BuiltinTopicKey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BuiltinTopicKey_t *)new BuiltinTopicKey_t();
  *(BuiltinTopicKey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1BuiltinTopicKey_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BuiltinTopicKey_t *arg1 = (BuiltinTopicKey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BuiltinTopicKey_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InstanceHandleSeq_1i_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  InstanceHandleSeq *arg1 = (InstanceHandleSeq *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstanceHandleSeq **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_seq = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InstanceHandleSeq_1i_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  InstanceHandleSeq *arg1 = (InstanceHandleSeq *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstanceHandleSeq **)&jarg1; 
  result = (int32_t) ((arg1)->i_seq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InstanceHandleSeq_1pp_1instancehandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  InstanceHandleSeq *arg1 = (InstanceHandleSeq *) 0 ;
  InstanceHandle_t **arg2 = (InstanceHandle_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstanceHandleSeq **)&jarg1; 
  arg2 = *(InstanceHandle_t ***)&jarg2; 
  if (arg1) (arg1)->pp_instancehandle = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InstanceHandleSeq_1pp_1instancehandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InstanceHandleSeq *arg1 = (InstanceHandleSeq *) 0 ;
  InstanceHandle_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstanceHandleSeq **)&jarg1; 
  result = (InstanceHandle_t **) ((arg1)->pp_instancehandle);
  *(InstanceHandle_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1InstanceHandleSeq(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceHandleSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceHandleSeq *)new InstanceHandleSeq();
  *(InstanceHandleSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1InstanceHandleSeq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InstanceHandleSeq *arg1 = (InstanceHandleSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InstanceHandleSeq **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INIT_1INSTANCESEQ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  InstanceHandleSeq *arg1 = (InstanceHandleSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(InstanceHandleSeq **)&jarg1; 
  INIT_INSTANCESEQ = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INIT_1INSTANCESEQ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceHandleSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceHandleSeq *)&INIT_INSTANCESEQ;
  *(InstanceHandleSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HANDLE_1NIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceHandle_t)(InstanceHandle_t)HANDLE_NIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LENGTH_1UNLIMITED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)LENGTH_UNLIMITED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURATION_1INFINITE_1SEC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)DURATION_INFINITE_SEC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURATION_1INFINITE_1NSEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)DURATION_INFINITE_NSEC;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURATION_1ZERO_1SEC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)DURATION_ZERO_SEC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURATION_1ZERO_1NSEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)DURATION_ZERO_NSEC;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1INVALID_1SEC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)(int32_t)TIME_INVALID_SEC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIME_1INVALID_1NSEC_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)TIME_INVALID_NSEC;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1UNSUPPORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_UNSUPPORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1BAD_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_BAD_PARAMETER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1PRECONDITION_1NOT_1MET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_PRECONDITION_NOT_MET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1OUT_1OF_1RESOURCES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_OUT_OF_RESOURCES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1NOT_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_NOT_ENABLED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1IMMUTABLE_1POLICY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_IMMUTABLE_POLICY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1INCONSISTENT_1POLICY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_INCONSISTENT_POLICY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1ALREADY_1DELETED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_ALREADY_DELETED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1NO_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_NO_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RETCODE_1ILLEGAL_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnCode_t)(ReturnCode_t)RETCODE_ILLEGAL_OPERATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INCONSISTENT_1TOPIC_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)INCONSISTENT_TOPIC_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OFFERED_1DEADLINE_1MISSED_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)OFFERED_DEADLINE_MISSED_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_REQUESTED_1DEADLINE_1MISSED_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)REQUESTED_DEADLINE_MISSED_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OFFERED_1INCOMPATIBLE_1QOS_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)OFFERED_INCOMPATIBLE_QOS_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_REQUESTED_1INCOMPATIBLE_1QOS_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)REQUESTED_INCOMPATIBLE_QOS_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SAMPLE_1LOST_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)SAMPLE_LOST_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SAMPLE_1REJECTED_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)SAMPLE_REJECTED_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DATA_1ON_1READERS_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)DATA_ON_READERS_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DATA_1AVAILABLE_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)DATA_AVAILABLE_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIVELINESS_1LOST_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)LIVELINESS_LOST_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIVELINESS_1CHANGED_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)LIVELINESS_CHANGED_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PUBLICATION_1MATCHED_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)PUBLICATION_MATCHED_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SUBSCRIPTION_1MATCHED_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)SUBSCRIPTION_MATCHED_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ALL_1ENABLE_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusKind result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusKind)(StatusKind)ALL_ENABLE_STATUS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InconsistentTopicStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  InconsistentTopicStatus *arg1 = (InconsistentTopicStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InconsistentTopicStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InconsistentTopicStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  InconsistentTopicStatus *arg1 = (InconsistentTopicStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InconsistentTopicStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InconsistentTopicStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  InconsistentTopicStatus *arg1 = (InconsistentTopicStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InconsistentTopicStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InconsistentTopicStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  InconsistentTopicStatus *arg1 = (InconsistentTopicStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InconsistentTopicStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1InconsistentTopicStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InconsistentTopicStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InconsistentTopicStatus *)new InconsistentTopicStatus();
  *(InconsistentTopicStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1InconsistentTopicStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InconsistentTopicStatus *arg1 = (InconsistentTopicStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InconsistentTopicStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleLostStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleLostStatus *arg1 = (SampleLostStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleLostStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleLostStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleLostStatus *arg1 = (SampleLostStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleLostStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleLostStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleLostStatus *arg1 = (SampleLostStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleLostStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleLostStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleLostStatus *arg1 = (SampleLostStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleLostStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SampleLostStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleLostStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleLostStatus *)new SampleLostStatus();
  *(SampleLostStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SampleLostStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleLostStatus *arg1 = (SampleLostStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleLostStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1last_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  SampleRejectedStatusKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  arg2 = (SampleRejectedStatusKind)jarg2; 
  if (arg1) (arg1)->last_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1last_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  SampleRejectedStatusKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  result = (SampleRejectedStatusKind) ((arg1)->last_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1last_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->last_instance_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleRejectedStatus_1last_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->last_instance_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SampleRejectedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleRejectedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleRejectedStatus *)new SampleRejectedStatus();
  *(SampleRejectedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SampleRejectedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleRejectedStatus *arg1 = (SampleRejectedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleRejectedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessLostStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessLostStatus *arg1 = (LivelinessLostStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessLostStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessLostStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessLostStatus *arg1 = (LivelinessLostStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessLostStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessLostStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessLostStatus *arg1 = (LivelinessLostStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessLostStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessLostStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessLostStatus *arg1 = (LivelinessLostStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessLostStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LivelinessLostStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LivelinessLostStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LivelinessLostStatus *)new LivelinessLostStatus();
  *(LivelinessLostStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LivelinessLostStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LivelinessLostStatus *arg1 = (LivelinessLostStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessLostStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1alive_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->alive_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1alive_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->alive_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1not_1alive_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->not_alive_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1not_1alive_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->not_alive_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1alive_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->alive_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1alive_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->alive_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1not_1alive_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->not_alive_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1not_1alive_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->not_alive_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1last_1publication_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->last_publication_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LivelinessChangedStatus_1last_1publication_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->last_publication_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LivelinessChangedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LivelinessChangedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LivelinessChangedStatus *)new LivelinessChangedStatus();
  *(LivelinessChangedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LivelinessChangedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LivelinessChangedStatus *arg1 = (LivelinessChangedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LivelinessChangedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedDeadlineMissedStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedDeadlineMissedStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedDeadlineMissedStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedDeadlineMissedStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedDeadlineMissedStatus_1last_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->last_instance_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedDeadlineMissedStatus_1last_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->last_instance_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1OfferedDeadlineMissedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OfferedDeadlineMissedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OfferedDeadlineMissedStatus *)new OfferedDeadlineMissedStatus();
  *(OfferedDeadlineMissedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1OfferedDeadlineMissedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OfferedDeadlineMissedStatus *arg1 = (OfferedDeadlineMissedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedDeadlineMissedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedDeadlineMissedStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedDeadlineMissedStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedDeadlineMissedStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedDeadlineMissedStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedDeadlineMissedStatus_1last_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->last_instance_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedDeadlineMissedStatus_1last_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->last_instance_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1RequestedDeadlineMissedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequestedDeadlineMissedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RequestedDeadlineMissedStatus *)new RequestedDeadlineMissedStatus();
  *(RequestedDeadlineMissedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1RequestedDeadlineMissedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequestedDeadlineMissedStatus *arg1 = (RequestedDeadlineMissedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedDeadlineMissedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QosPolicyCount_1policy_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  QosPolicyCount *arg1 = (QosPolicyCount *) 0 ;
  QosPolicyId_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QosPolicyCount **)&jarg1; 
  arg2 = (QosPolicyId_t)jarg2; 
  if (arg1) (arg1)->policy_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QosPolicyCount_1policy_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  QosPolicyCount *arg1 = (QosPolicyCount *) 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QosPolicyCount **)&jarg1; 
  result = (QosPolicyId_t) ((arg1)->policy_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QosPolicyCount_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  QosPolicyCount *arg1 = (QosPolicyCount *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QosPolicyCount **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QosPolicyCount_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  QosPolicyCount *arg1 = (QosPolicyCount *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QosPolicyCount **)&jarg1; 
  result = (int32_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1QosPolicyCount(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QosPolicyCount *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyCount *)new QosPolicyCount();
  *(QosPolicyCount **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1QosPolicyCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QosPolicyCount *arg1 = (QosPolicyCount *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QosPolicyCount **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1last_1policy_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  QosPolicyId_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  arg2 = (QosPolicyId_t)jarg2; 
  if (arg1) (arg1)->last_policy_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1last_1policy_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  result = (QosPolicyId_t) ((arg1)->last_policy_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1policies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  QosPolicyCountSeq arg2 = (QosPolicyCountSeq) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  arg2 = *(QosPolicyCountSeq *)&jarg2; 
  if (arg1) (arg1)->policies = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OfferedIncompatibleQosStatus_1policies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  QosPolicyCountSeq result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  result = (QosPolicyCountSeq) ((arg1)->policies);
  *(QosPolicyCountSeq *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1OfferedIncompatibleQosStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OfferedIncompatibleQosStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OfferedIncompatibleQosStatus *)new OfferedIncompatibleQosStatus();
  *(OfferedIncompatibleQosStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1OfferedIncompatibleQosStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OfferedIncompatibleQosStatus *arg1 = (OfferedIncompatibleQosStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OfferedIncompatibleQosStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1last_1policy_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  QosPolicyId_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  arg2 = (QosPolicyId_t)jarg2; 
  if (arg1) (arg1)->last_policy_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1last_1policy_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  result = (QosPolicyId_t) ((arg1)->last_policy_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1policies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  QosPolicyCountSeq arg2 = (QosPolicyCountSeq) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  arg2 = *(QosPolicyCountSeq *)&jarg2; 
  if (arg1) (arg1)->policies = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RequestedIncompatibleQosStatus_1policies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  QosPolicyCountSeq result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  result = (QosPolicyCountSeq) ((arg1)->policies);
  *(QosPolicyCountSeq *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1RequestedIncompatibleQosStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequestedIncompatibleQosStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RequestedIncompatibleQosStatus *)new RequestedIncompatibleQosStatus();
  *(RequestedIncompatibleQosStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1RequestedIncompatibleQosStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequestedIncompatibleQosStatus *arg1 = (RequestedIncompatibleQosStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestedIncompatibleQosStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1current_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->current_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1current_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->current_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1current_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->current_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1current_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->current_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1last_1subscription_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->last_subscription_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PublicationMatchedStatus_1last_1subscription_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->last_subscription_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1PublicationMatchedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PublicationMatchedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PublicationMatchedStatus *)new PublicationMatchedStatus();
  *(PublicationMatchedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1PublicationMatchedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PublicationMatchedStatus *arg1 = (PublicationMatchedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicationMatchedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1total_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1total_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1total_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->total_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1total_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->total_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1current_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->current_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1current_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->current_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1current_1count_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->current_count_change = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1current_1count_1change_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  result = (int32_t) ((arg1)->current_count_change);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1last_1publication_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->last_publication_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriptionMatchedStatus_1last_1publication_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->last_publication_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SubscriptionMatchedStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SubscriptionMatchedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SubscriptionMatchedStatus *)new SubscriptionMatchedStatus();
  *(SubscriptionMatchedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SubscriptionMatchedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubscriptionMatchedStatus *arg1 = (SubscriptionMatchedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriptionMatchedStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderSeq_1i_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataReaderSeq *arg1 = (DataReaderSeq *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderSeq **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_seq = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderSeq_1i_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReaderSeq *arg1 = (DataReaderSeq *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderSeq **)&jarg1; 
  result = (int) ((arg1)->i_seq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderSeq_1pp_1datareaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataReaderSeq *arg1 = (DataReaderSeq *) 0 ;
  DataReader **arg2 = (DataReader **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderSeq **)&jarg1; 
  arg2 = *(DataReader ***)&jarg2; 
  if (arg1) (arg1)->pp_datareaders = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderSeq_1pp_1datareaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataReaderSeq *arg1 = (DataReaderSeq *) 0 ;
  DataReader **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderSeq **)&jarg1; 
  result = (DataReader **) ((arg1)->pp_datareaders);
  *(DataReader ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataReaderSeq(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReaderSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReaderSeq *)new DataReaderSeq();
  *(DataReaderSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataReaderSeq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataReaderSeq *arg1 = (DataReaderSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderSeq **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Listener_1not_1used_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Listener *arg1 = (Listener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Listener **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->not_used = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Listener_1not_1used_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Listener *arg1 = (Listener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Listener **)&jarg1; 
  result = (int) ((arg1)->not_used);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Listener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Listener *)new Listener();
  *(Listener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Listener *arg1 = (Listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Listener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicStatus_1inconsistent_1topic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  TopicStatus *arg1 = (TopicStatus *) 0 ;
  InconsistentTopicStatus *arg2 = (InconsistentTopicStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicStatus **)&jarg1; 
  arg2 = *(InconsistentTopicStatus **)&jarg2; 
  if (arg1) (arg1)->inconsistent_topic = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicStatus_1inconsistent_1topic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  TopicStatus *arg1 = (TopicStatus *) 0 ;
  InconsistentTopicStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicStatus **)&jarg1; 
  result = (InconsistentTopicStatus *)& ((arg1)->inconsistent_topic);
  *(InconsistentTopicStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicStatus *)new TopicStatus();
  *(TopicStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicStatus *arg1 = (TopicStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicListenerStatusChangedFlag_1b_1inconsistent_1topic_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  TopicListenerStatusChangedFlag *arg1 = (TopicListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_inconsistent_topic_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicListenerStatusChangedFlag_1b_1inconsistent_1topic_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  TopicListenerStatusChangedFlag *arg1 = (TopicListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_inconsistent_topic_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicListenerStatusChangedFlag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicListenerStatusChangedFlag *)new TopicListenerStatusChangedFlag();
  *(TopicListenerStatusChangedFlag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicListenerStatusChangedFlag *arg1 = (TopicListenerStatusChangedFlag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicListenerStatusChangedFlag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1offered_1deadline_1missed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  OfferedDeadlineMissedStatus *arg2 = (OfferedDeadlineMissedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  arg2 = *(OfferedDeadlineMissedStatus **)&jarg2; 
  if (arg1) (arg1)->offered_deadline_missed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1offered_1deadline_1missed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  OfferedDeadlineMissedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  result = (OfferedDeadlineMissedStatus *)& ((arg1)->offered_deadline_missed);
  *(OfferedDeadlineMissedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1offered_1incompatible_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  OfferedIncompatibleQosStatus *arg2 = (OfferedIncompatibleQosStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  arg2 = *(OfferedIncompatibleQosStatus **)&jarg2; 
  if (arg1) (arg1)->offered_incompatible_qos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1offered_1incompatible_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  OfferedIncompatibleQosStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  result = (OfferedIncompatibleQosStatus *)& ((arg1)->offered_incompatible_qos);
  *(OfferedIncompatibleQosStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1liveliness_1lost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  LivelinessLostStatus *arg2 = (LivelinessLostStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  arg2 = *(LivelinessLostStatus **)&jarg2; 
  if (arg1) (arg1)->liveliness_lost = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1liveliness_1lost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  LivelinessLostStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  result = (LivelinessLostStatus *)& ((arg1)->liveliness_lost);
  *(LivelinessLostStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1publication_1matched_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  PublicationMatchedStatus *arg2 = (PublicationMatchedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  arg2 = *(PublicationMatchedStatus **)&jarg2; 
  if (arg1) (arg1)->publication_matched = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterStatus_1publication_1matched_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  PublicationMatchedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  result = (PublicationMatchedStatus *)& ((arg1)->publication_matched);
  *(PublicationMatchedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataWriterStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataWriterStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataWriterStatus *)new DataWriterStatus();
  *(DataWriterStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataWriterStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataWriterStatus *arg1 = (DataWriterStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1liveliness_1lost_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_liveliness_lost_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1liveliness_1lost_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_liveliness_lost_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1offered_1deadline_1missed_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_offered_deadline_missed_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1offered_1deadline_1missed_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_offered_deadline_missed_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1offered_1incompatible_1qos_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_offered_incompatible_qos_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1offered_1incompatible_1qos_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_offered_incompatible_qos_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1publication_1matched_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_publication_matched_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataWriterListenerStatusChangedFlag_1b_1publication_1matched_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_publication_matched_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataWriterListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataWriterListenerStatusChangedFlag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataWriterListenerStatusChangedFlag *)new DataWriterListenerStatusChangedFlag();
  *(DataWriterListenerStatusChangedFlag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataWriterListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataWriterListenerStatusChangedFlag *arg1 = (DataWriterListenerStatusChangedFlag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataWriterListenerStatusChangedFlag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1requested_1deadline_1missed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  RequestedDeadlineMissedStatus *arg2 = (RequestedDeadlineMissedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  arg2 = *(RequestedDeadlineMissedStatus **)&jarg2; 
  if (arg1) (arg1)->requested_deadline_missed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1requested_1deadline_1missed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  RequestedDeadlineMissedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  result = (RequestedDeadlineMissedStatus *)& ((arg1)->requested_deadline_missed);
  *(RequestedDeadlineMissedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1requested_1incompatible_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  RequestedIncompatibleQosStatus *arg2 = (RequestedIncompatibleQosStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  arg2 = *(RequestedIncompatibleQosStatus **)&jarg2; 
  if (arg1) (arg1)->requested_incompatible_qos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1requested_1incompatible_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  RequestedIncompatibleQosStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  result = (RequestedIncompatibleQosStatus *)& ((arg1)->requested_incompatible_qos);
  *(RequestedIncompatibleQosStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1sample_1rejected_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  SampleRejectedStatus *arg2 = (SampleRejectedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  arg2 = *(SampleRejectedStatus **)&jarg2; 
  if (arg1) (arg1)->sample_rejected = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1sample_1rejected_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  SampleRejectedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  result = (SampleRejectedStatus *)& ((arg1)->sample_rejected);
  *(SampleRejectedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1liveliness_1changed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  LivelinessChangedStatus *arg2 = (LivelinessChangedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  arg2 = *(LivelinessChangedStatus **)&jarg2; 
  if (arg1) (arg1)->liveliness_changed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1liveliness_1changed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  LivelinessChangedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  result = (LivelinessChangedStatus *)& ((arg1)->liveliness_changed);
  *(LivelinessChangedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1subscriber_1matched_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  SubscriptionMatchedStatus *arg2 = (SubscriptionMatchedStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  arg2 = *(SubscriptionMatchedStatus **)&jarg2; 
  if (arg1) (arg1)->subscriber_matched = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1subscriber_1matched_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  SubscriptionMatchedStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  result = (SubscriptionMatchedStatus *)& ((arg1)->subscriber_matched);
  *(SubscriptionMatchedStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1sample_1lost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  SampleLostStatus *arg2 = (SampleLostStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  arg2 = *(SampleLostStatus **)&jarg2; 
  if (arg1) (arg1)->sample_lost = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderStatus_1sample_1lost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  SampleLostStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  result = (SampleLostStatus *)& ((arg1)->sample_lost);
  *(SampleLostStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataReaderStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReaderStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReaderStatus *)new DataReaderStatus();
  *(DataReaderStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataReaderStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataReaderStatus *arg1 = (DataReaderStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1sample_1rejected_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_sample_rejected_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1sample_1rejected_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_sample_rejected_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1liveliness_1changed_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_liveliness_changed_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1liveliness_1changed_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_liveliness_changed_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1requested_1deadline_1missed_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_requested_deadline_missed_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1requested_1deadline_1missed_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_requested_deadline_missed_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1requested_1incompatible_1qos_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_requested_incompatible_qos_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1requested_1incompatible_1qos_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_requested_incompatible_qos_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1data_1available_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_data_available_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1data_1available_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_data_available_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1sample_1lost_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_sample_lost_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1sample_1lost_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_sample_lost_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1subscription_1matched_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_subscription_matched_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataReaderListenerStatusChangedFlag_1b_1subscription_1matched_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_subscription_matched_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataReaderListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReaderListenerStatusChangedFlag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReaderListenerStatusChangedFlag *)new DataReaderListenerStatusChangedFlag();
  *(DataReaderListenerStatusChangedFlag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataReaderListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataReaderListenerStatusChangedFlag *arg1 = (DataReaderListenerStatusChangedFlag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataReaderListenerStatusChangedFlag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberListenerStatusChangedFlag_1b_1data_1on_1readers_1status_1changed_1flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  SubscriberListenerStatusChangedFlag *arg1 = (SubscriberListenerStatusChangedFlag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriberListenerStatusChangedFlag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_data_on_readers_status_changed_flag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubscriberListenerStatusChangedFlag_1b_1data_1on_1readers_1status_1changed_1flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  SubscriberListenerStatusChangedFlag *arg1 = (SubscriberListenerStatusChangedFlag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriberListenerStatusChangedFlag **)&jarg1; 
  result = (bool) ((arg1)->b_data_on_readers_status_changed_flag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SubscriberListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SubscriberListenerStatusChangedFlag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SubscriberListenerStatusChangedFlag *)new SubscriberListenerStatusChangedFlag();
  *(SubscriberListenerStatusChangedFlag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SubscriberListenerStatusChangedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubscriberListenerStatusChangedFlag *arg1 = (SubscriberListenerStatusChangedFlag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubscriberListenerStatusChangedFlag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1get_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Condition *arg1 = (Condition *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  arg2 = *(bool (**)())&jarg2; 
  if (arg1) (arg1)->get_trigger_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1get_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Condition *arg1 = (Condition *) 0 ;
  bool (*result)() = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  result = (bool (*)()) ((arg1)->get_trigger_value);
  *(bool (**)())&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1b_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  Condition *arg1 = (Condition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_trigger_value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1b_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  Condition *arg1 = (Condition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  result = (bool) ((arg1)->b_trigger_value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1condition_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Condition *arg1 = (Condition *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->condition_type = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1condition_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Condition *arg1 = (Condition *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  result = (uint32_t) ((arg1)->condition_type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1p_1waitset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Condition *arg1 = (Condition *) 0 ;
  WaitSet *arg2 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  arg2 = *(WaitSet **)&jarg2; 
  if (arg1) (arg1)->p_waitset = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Condition_1p_1waitset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Condition *arg1 = (Condition *) 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  result = (WaitSet *) ((arg1)->p_waitset);
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Condition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Condition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Condition *)new Condition();
  *(Condition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Condition *arg1 = (Condition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ConditionSeq_1i_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConditionSeq *arg1 = (ConditionSeq *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConditionSeq **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_seq = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ConditionSeq_1i_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConditionSeq *arg1 = (ConditionSeq *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConditionSeq **)&jarg1; 
  result = (int32_t) ((arg1)->i_seq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ConditionSeq_1pp_1conditions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ConditionSeq *arg1 = (ConditionSeq *) 0 ;
  Condition **arg2 = (Condition **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConditionSeq **)&jarg1; 
  arg2 = *(Condition ***)&jarg2; 
  if (arg1) (arg1)->pp_conditions = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ConditionSeq_1pp_1conditions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConditionSeq *arg1 = (ConditionSeq *) 0 ;
  Condition **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConditionSeq **)&jarg1; 
  result = (Condition **) ((arg1)->pp_conditions);
  *(Condition ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ConditionSeq(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConditionSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConditionSeq *)new ConditionSeq();
  *(ConditionSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ConditionSeq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConditionSeq *arg1 = (ConditionSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConditionSeq **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INIT_1CONDITIONSEQ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConditionSeq *arg1 = (ConditionSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConditionSeq **)&jarg1; 
  INIT_CONDITIONSEQ = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INIT_1CONDITIONSEQ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConditionSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConditionSeq *)&INIT_CONDITIONSEQ;
  *(ConditionSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*arg2)(WaitSet *,ConditionSeq *,Duration_t) = (ReturnCode_t (*)(WaitSet *,ConditionSeq *,Duration_t)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(WaitSet *,ConditionSeq *,Duration_t))&jarg2; 
  if (arg1) (arg1)->wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*result)(WaitSet *,ConditionSeq *,Duration_t) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result = (ReturnCode_t (*)(WaitSet *,ConditionSeq *,Duration_t)) ((arg1)->wait);
  *(ReturnCode_t (**)(WaitSet *,ConditionSeq *,Duration_t))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1attach_1condition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*arg2)(WaitSet *,Condition *) = (ReturnCode_t (*)(WaitSet *,Condition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(WaitSet *,Condition *))&jarg2; 
  if (arg1) (arg1)->attach_condition = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1attach_1condition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*result)(WaitSet *,Condition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result = (ReturnCode_t (*)(WaitSet *,Condition *)) ((arg1)->attach_condition);
  *(ReturnCode_t (**)(WaitSet *,Condition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1detach_1condition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*arg2)(WaitSet *,Condition *) = (ReturnCode_t (*)(WaitSet *,Condition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(WaitSet *,Condition *))&jarg2; 
  if (arg1) (arg1)->detach_condition = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1detach_1condition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*result)(WaitSet *,Condition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result = (ReturnCode_t (*)(WaitSet *,Condition *)) ((arg1)->detach_condition);
  *(ReturnCode_t (**)(WaitSet *,Condition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1get_1conditions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*arg2)(WaitSet *,ConditionSeq *) = (ReturnCode_t (*)(WaitSet *,ConditionSeq *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(WaitSet *,ConditionSeq *))&jarg2; 
  if (arg1) (arg1)->get_conditions = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1get_1conditions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  ReturnCode_t (*result)(WaitSet *,ConditionSeq *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result = (ReturnCode_t (*)(WaitSet *,ConditionSeq *)) ((arg1)->get_conditions);
  *(ReturnCode_t (**)(WaitSet *,ConditionSeq *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1waitset_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->waitset_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1waitset_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result =  ((arg1)->waitset_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1i_1conditions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_conditions = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1i_1conditions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result = (int32_t) ((arg1)->i_conditions);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1pp_1conditions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  Condition **arg2 = (Condition **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  arg2 = *(Condition ***)&jarg2; 
  if (arg1) (arg1)->pp_conditions = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1pp_1conditions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  Condition **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result = (Condition **) ((arg1)->pp_conditions);
  *(Condition ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1waitset_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->waitset_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WaitSet_1waitset_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WaitSet *arg1 = (WaitSet *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  result =  ((arg1)->waitset_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1WaitSet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WaitSet *)new WaitSet();
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1WaitSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1get_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  arg2 = *(bool (**)())&jarg2; 
  if (arg1) (arg1)->get_trigger_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1get_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  bool (*result)() = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  result = (bool (*)()) ((arg1)->get_trigger_value);
  *(bool (**)())&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1b_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_trigger_value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1b_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  result = (bool) ((arg1)->b_trigger_value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1condition_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->condition_type = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1condition_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  result = (uint32_t) ((arg1)->condition_type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1p_1waitset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  WaitSet *arg2 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  arg2 = *(WaitSet **)&jarg2; 
  if (arg1) (arg1)->p_waitset = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1p_1waitset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  result = (WaitSet *) ((arg1)->p_waitset);
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1set_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  ReturnCode_t (*arg2)(bool) = (ReturnCode_t (*)(bool)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(bool))&jarg2; 
  if (arg1) (arg1)->set_trigger_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuardCondition_1set_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  ReturnCode_t (*result)(bool) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  result = (ReturnCode_t (*)(bool)) ((arg1)->set_trigger_value);
  *(ReturnCode_t (**)(bool))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1GuardCondition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GuardCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GuardCondition *)new GuardCondition();
  *(GuardCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1GuardCondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GuardCondition *arg1 = (GuardCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuardCondition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1get_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = *(bool (**)())&jarg2; 
  if (arg1) (arg1)->get_trigger_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1get_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  bool (*result)() = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (bool (*)()) ((arg1)->get_trigger_value);
  *(bool (**)())&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1b_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_trigger_value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1b_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (bool) ((arg1)->b_trigger_value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1condition_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->condition_type = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1condition_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (uint32_t) ((arg1)->condition_type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1p_1waitset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  WaitSet *arg2 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = *(WaitSet **)&jarg2; 
  if (arg1) (arg1)->p_waitset = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1p_1waitset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (WaitSet *) ((arg1)->p_waitset);
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1get_1enabled_1statuses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  StatusMask (*arg2)(StatusCondition *) = (StatusMask (*)(StatusCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = *(StatusMask (**)(StatusCondition *))&jarg2; 
  if (arg1) (arg1)->get_enabled_statuses = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1get_1enabled_1statuses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  StatusMask (*result)(StatusCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (StatusMask (*)(StatusCondition *)) ((arg1)->get_enabled_statuses);
  *(StatusMask (**)(StatusCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1set_1enabled_1statuses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  ReturnCode_t (*arg2)(StatusCondition *,StatusMask) = (ReturnCode_t (*)(StatusCondition *,StatusMask)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(StatusCondition *,StatusMask))&jarg2; 
  if (arg1) (arg1)->set_enabled_statuses = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1set_1enabled_1statuses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  ReturnCode_t (*result)(StatusCondition *,StatusMask) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (ReturnCode_t (*)(StatusCondition *,StatusMask)) ((arg1)->set_enabled_statuses);
  *(ReturnCode_t (**)(StatusCondition *,StatusMask))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1get_1entity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  Entity *(*arg2)(StatusCondition *) = (Entity *(*)(StatusCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = *(Entity *(**)(StatusCondition *))&jarg2; 
  if (arg1) (arg1)->get_entity = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1get_1entity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  Entity *(*result)(StatusCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (Entity *(*)(StatusCondition *)) ((arg1)->get_entity);
  *(Entity *(**)(StatusCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1enabled_1statuses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  StatusMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = (StatusMask)jarg2; 
  if (arg1) (arg1)->enabled_statuses = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1enabled_1statuses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  StatusMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (StatusMask) ((arg1)->enabled_statuses);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1p_1entity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  arg2 = *(Entity **)&jarg2; 
  if (arg1) (arg1)->p_entity = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusCondition_1p_1entity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  Entity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  result = (Entity *) ((arg1)->p_entity);
  *(Entity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1StatusCondition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StatusCondition *)new StatusCondition();
  *(StatusCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1StatusCondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DCPS_1STATE_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_READ_1SAMPLE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SampleStateKind)(SampleStateKind)READ_SAMPLE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NOT_1READ_1SAMPLE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SampleStateKind)(SampleStateKind)NOT_READ_SAMPLE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ANY_1SAMPLE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleStateMask result;
  
  (void)jenv;
  (void)jcls;
  result = (SampleStateMask)(SampleStateMask)ANY_SAMPLE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NEW_1VIEW_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ViewStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (ViewStateKind)(ViewStateKind)NEW_VIEW_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NOT_1NEW_1VIEW_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ViewStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (ViewStateKind)(ViewStateKind)NOT_NEW_VIEW_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ANY_1VIEW_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ViewStateMask result;
  
  (void)jenv;
  (void)jcls;
  result = (ViewStateMask)(ViewStateMask)ANY_VIEW_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ALIVE_1INSTANCE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceStateKind)(InstanceStateKind)ALIVE_INSTANCE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NOT_1ALIVE_1DISPOSED_1INSTANCE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceStateKind)(InstanceStateKind)NOT_ALIVE_DISPOSED_INSTANCE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NOT_1ALIVE_1NO_1WRITERS_1INSTANCE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceStateKind result;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceStateKind)(InstanceStateKind)NOT_ALIVE_NO_WRITERS_INSTANCE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ANY_1INSTANCE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceStateMask result;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceStateMask)(InstanceStateMask)ANY_INSTANCE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NOT_1ALIVE_1INSTANCE_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InstanceStateMask result;
  
  (void)jenv;
  (void)jcls;
  result = (InstanceStateMask)(InstanceStateMask)NOT_ALIVE_INSTANCE_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ANY_1STATUS_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusMask result;
  
  (void)jenv;
  (void)jcls;
  result = (StatusMask)(StatusMask)ANY_STATUS_STATE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(bool (**)())&jarg2; 
  if (arg1) (arg1)->get_trigger_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  bool (*result)() = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (bool (*)()) ((arg1)->get_trigger_value);
  *(bool (**)())&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1b_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_trigger_value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1b_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (bool) ((arg1)->b_trigger_value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1condition_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->condition_type = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1condition_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (uint32_t) ((arg1)->condition_type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1p_1waitset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  WaitSet *arg2 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(WaitSet **)&jarg2; 
  if (arg1) (arg1)->p_waitset = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1p_1waitset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (WaitSet *) ((arg1)->p_waitset);
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1sample_1state_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  SampleStateMask (*arg2)(ReadCondition *) = (SampleStateMask (*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(SampleStateMask (**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_sample_state_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1sample_1state_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  SampleStateMask (*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (SampleStateMask (*)(ReadCondition *)) ((arg1)->get_sample_state_mask);
  *(SampleStateMask (**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1view_1state_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  ViewStateMask (*arg2)(ReadCondition *) = (ViewStateMask (*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(ViewStateMask (**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_view_state_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1view_1state_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  ViewStateMask (*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (ViewStateMask (*)(ReadCondition *)) ((arg1)->get_view_state_mask);
  *(ViewStateMask (**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1instance_1state_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  InstanceStateMask (*arg2)(ReadCondition *) = (InstanceStateMask (*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(InstanceStateMask (**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_instance_state_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1instance_1state_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  InstanceStateMask (*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (InstanceStateMask (*)(ReadCondition *)) ((arg1)->get_instance_state_mask);
  *(InstanceStateMask (**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  DataReader *(*arg2)(ReadCondition *) = (DataReader *(*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(DataReader *(**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1get_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  DataReader *(*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (DataReader *(*)(ReadCondition *)) ((arg1)->get_datareader);
  *(DataReader *(**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1l_1sampleStateMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  SampleStateMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = (SampleStateMask)jarg2; 
  if (arg1) (arg1)->l_sampleStateMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1l_1sampleStateMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  SampleStateMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (SampleStateMask) ((arg1)->l_sampleStateMask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1l_1viewStateMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  ViewStateMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = (ViewStateMask)jarg2; 
  if (arg1) (arg1)->l_viewStateMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1l_1viewStateMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  ViewStateMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (ViewStateMask) ((arg1)->l_viewStateMask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1l_1instanceStateMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  InstanceStateMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = (InstanceStateMask)jarg2; 
  if (arg1) (arg1)->l_instanceStateMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1l_1instanceStateMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  InstanceStateMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (InstanceStateMask) ((arg1)->l_instanceStateMask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1p_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(ReadCondition **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  if (arg1) (arg1)->p_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ReadCondition_1p_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  result = (DataReader *) ((arg1)->p_datareader);
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ReadCondition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ReadCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ReadCondition *)new ReadCondition();
  *(ReadCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ReadCondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  bool (*arg2)() = (bool (*)()) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(bool (**)())&jarg2; 
  if (arg1) (arg1)->get_trigger_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  bool (*result)() = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (bool (*)()) ((arg1)->get_trigger_value);
  *(bool (**)())&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1b_1trigger_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_trigger_value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1b_1trigger_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (bool) ((arg1)->b_trigger_value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1condition_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->condition_type = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1condition_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (uint32_t) ((arg1)->condition_type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1waitset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  WaitSet *arg2 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(WaitSet **)&jarg2; 
  if (arg1) (arg1)->p_waitset = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1waitset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (WaitSet *) ((arg1)->p_waitset);
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1sample_1state_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  SampleStateMask (*arg2)(ReadCondition *) = (SampleStateMask (*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(SampleStateMask (**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_sample_state_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1sample_1state_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  SampleStateMask (*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (SampleStateMask (*)(ReadCondition *)) ((arg1)->get_sample_state_mask);
  *(SampleStateMask (**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1view_1state_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ViewStateMask (*arg2)(ReadCondition *) = (ViewStateMask (*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(ViewStateMask (**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_view_state_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1view_1state_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ViewStateMask (*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (ViewStateMask (*)(ReadCondition *)) ((arg1)->get_view_state_mask);
  *(ViewStateMask (**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1instance_1state_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  InstanceStateMask (*arg2)(ReadCondition *) = (InstanceStateMask (*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(InstanceStateMask (**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_instance_state_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1instance_1state_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  InstanceStateMask (*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (InstanceStateMask (*)(ReadCondition *)) ((arg1)->get_instance_state_mask);
  *(InstanceStateMask (**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  DataReader *(*arg2)(ReadCondition *) = (DataReader *(*)(ReadCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(DataReader *(**)(ReadCondition *))&jarg2; 
  if (arg1) (arg1)->get_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  DataReader *(*result)(ReadCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (DataReader *(*)(ReadCondition *)) ((arg1)->get_datareader);
  *(DataReader *(**)(ReadCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1l_1sampleStateMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  SampleStateMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = (SampleStateMask)jarg2; 
  if (arg1) (arg1)->l_sampleStateMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1l_1sampleStateMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  SampleStateMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (SampleStateMask) ((arg1)->l_sampleStateMask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1l_1viewStateMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ViewStateMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = (ViewStateMask)jarg2; 
  if (arg1) (arg1)->l_viewStateMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1l_1viewStateMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ViewStateMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (ViewStateMask) ((arg1)->l_viewStateMask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1l_1instanceStateMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  InstanceStateMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = (InstanceStateMask)jarg2; 
  if (arg1) (arg1)->l_instanceStateMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1l_1instanceStateMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  InstanceStateMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (InstanceStateMask) ((arg1)->l_instanceStateMask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  if (arg1) (arg1)->p_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (DataReader *) ((arg1)->p_datareader);
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1query_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  string (*arg2)(QueryCondition *) = (string (*)(QueryCondition *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(string (**)(QueryCondition *))&jarg2; 
  if (arg1) (arg1)->get_query_expression = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1query_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  string (*result)(QueryCondition *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (string (*)(QueryCondition *)) ((arg1)->get_query_expression);
  *(string (**)(QueryCondition *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1query_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ReturnCode_t (*arg2)(QueryCondition *,StringSeq *) = (ReturnCode_t (*)(QueryCondition *,StringSeq *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(QueryCondition *,StringSeq *))&jarg2; 
  if (arg1) (arg1)->get_query_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1get_1query_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ReturnCode_t (*result)(QueryCondition *,StringSeq *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (ReturnCode_t (*)(QueryCondition *,StringSeq *)) ((arg1)->get_query_parameters);
  *(ReturnCode_t (**)(QueryCondition *,StringSeq *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1set_1query_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ReturnCode_t (*arg2)(QueryCondition *,StringSeq *) = (ReturnCode_t (*)(QueryCondition *,StringSeq *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(QueryCondition *,StringSeq *))&jarg2; 
  if (arg1) (arg1)->set_query_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1set_1query_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  ReturnCode_t (*result)(QueryCondition *,StringSeq *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (ReturnCode_t (*)(QueryCondition *,StringSeq *)) ((arg1)->set_query_parameters);
  *(ReturnCode_t (**)(QueryCondition *,StringSeq *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1query_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->query_expression;
    if (arg2) {
      arg1->query_expression = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->query_expression, (const char *)arg2);
    } else {
      arg1->query_expression = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1query_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (string) ((arg1)->query_expression);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1query_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  StringSeq *arg2 = (StringSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(StringSeq **)&jarg2; 
  if (arg1) (arg1)->query_parameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1query_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  StringSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (StringSeq *)& ((arg1)->query_parameters);
  *(StringSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1expr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  expression_t *arg2 = (expression_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(expression_t **)&jarg2; 
  if (arg1) (arg1)->p_expr = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1expr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  expression_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (expression_t *) ((arg1)->p_expr);
  *(expression_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1typeSupport_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  FooTypeSupport *arg2 = (FooTypeSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(QueryCondition **)&jarg1; 
  arg2 = *(FooTypeSupport **)&jarg2; 
  if (arg1) (arg1)->p_typeSupport = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_QueryCondition_1p_1typeSupport_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  FooTypeSupport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  result = (FooTypeSupport *) ((arg1)->p_typeSupport);
  *(FooTypeSupport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1QueryCondition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QueryCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QueryCondition *)new QueryCondition();
  *(QueryCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1QueryCondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_USERDATA_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)USERDATA_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURABILITY_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)DURABILITY_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PRESENTATION_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)PRESENTATION_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DEADLINE_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)DEADLINE_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LATENCYBUDGET_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)LATENCYBUDGET_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OWNERSHIP_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)OWNERSHIP_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OWNERSHIPSTRENGTH_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)OWNERSHIPSTRENGTH_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIVELINESS_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)LIVELINESS_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIMEBASEDFILTER_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)TIMEBASEDFILTER_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTITION_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)PARTITION_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RELIABILITY_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)RELIABILITY_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DESTINATIONORDER_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)DESTINATIONORDER_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HISTORY_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)HISTORY_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RESOURCELIMITS_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)RESOURCELIMITS_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYFACTORY_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)ENTITYFACTORY_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WRITERDATALIFECYCLE_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)WRITERDATALIFECYCLE_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_READERDATALIFECYCLE_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)READERDATALIFECYCLE_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TOPICDATA_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)TOPICDATA_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GROUPDATA_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)GROUPDATA_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIFESPAN_1QOS_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)LIFESPAN_QOS_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURABILITYSERVICE_1POLICY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = (string)(string)DURABILITYSERVICE_POLICY_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INVALID_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)INVALID_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_USERDATA_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)USERDATA_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURABILITY_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)DURABILITY_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PRESENTATION_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)PRESENTATION_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DEADLINE_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)DEADLINE_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LATENCYBUDGET_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)LATENCYBUDGET_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OWNERSHIP_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)OWNERSHIP_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OWNERSHIPSTRENGTH_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)OWNERSHIPSTRENGTH_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIVELINESS_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)LIVELINESS_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TIMEBASEDFILTER_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)TIMEBASEDFILTER_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTITION_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)PARTITION_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RELIABILITY_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)RELIABILITY_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DESTINATIONORDER_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)DESTINATIONORDER_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HISTORY_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)HISTORY_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RESOURCELIMITS_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)RESOURCELIMITS_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYFACTORY_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)ENTITYFACTORY_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WRITERDATALIFECYCLE_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)WRITERDATALIFECYCLE_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_READERDATALIFECYCLE_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)READERDATALIFECYCLE_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TOPICDATA_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)TOPICDATA_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GROUPDATA_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)GROUPDATA_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TRANSPORTPRIORITY_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)TRANSPORTPRIORITY_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIFESPAN_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)LIFESPAN_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURABILITYSERVICE_1QOS_1POLICY_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QosPolicyId_t result;
  
  (void)jenv;
  (void)jcls;
  result = (QosPolicyId_t)(QosPolicyId_t)DURABILITYSERVICE_QOS_POLICY_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  ReturnCode_t (*arg2)(Entity *) = (ReturnCode_t (*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(Entity *))&jarg2; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  ReturnCode_t (*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (ReturnCode_t (*)(Entity *)) ((arg1)->enable);
  *(ReturnCode_t (**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1get_1statuscondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  StatusCondition *(*arg2)(Entity *) = (StatusCondition *(*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(StatusCondition *(**)(Entity *))&jarg2; 
  if (arg1) (arg1)->get_statuscondition = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1get_1statuscondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  StatusCondition *(*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (StatusCondition *(*)(Entity *)) ((arg1)->get_statuscondition);
  *(StatusCondition *(**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1get_1status_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  StatusMask (*arg2)(Entity *) = (StatusMask (*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(StatusMask (**)(Entity *))&jarg2; 
  if (arg1) (arg1)->get_status_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1get_1status_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  StatusMask (*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (StatusMask (*)(Entity *)) ((arg1)->get_status_changes);
  *(StatusMask (**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1get_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  InstanceHandle_t (*arg2)(Entity *) = (InstanceHandle_t (*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(InstanceHandle_t (**)(Entity *))&jarg2; 
  if (arg1) (arg1)->get_instance_handle = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1get_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  InstanceHandle_t (*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (InstanceHandle_t (*)(Entity *)) ((arg1)->get_instance_handle);
  *(InstanceHandle_t (**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1b_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_enable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1b_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (bool) ((arg1)->b_enable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1p_1status_1condition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  StatusCondition *arg2 = (StatusCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(StatusCondition **)&jarg2; 
  if (arg1) (arg1)->p_status_condition = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1p_1status_1condition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  StatusCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (StatusCondition *) ((arg1)->p_status_condition);
  *(StatusCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1l_1status_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  StatusMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (StatusMask)jarg2; 
  if (arg1) (arg1)->l_status_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1l_1status_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  StatusMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (StatusMask) ((arg1)->l_status_mask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1l_1status_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  StatusMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (StatusMask)jarg2; 
  if (arg1) (arg1)->l_status_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1l_1status_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  StatusMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (StatusMask) ((arg1)->l_status_changes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1entity_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->entity_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1entity_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result =  ((arg1)->entity_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1entity_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->entity_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1entity_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result =  ((arg1)->entity_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1last_1sequencenum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->last_sequencenum = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1last_1sequencenum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (int32_t) ((arg1)->last_sequencenum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1test_1for_1reliablity_1division_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->test_for_reliablity_division = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1test_1for_1reliablity_1division_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (int32_t) ((arg1)->test_for_reliablity_division);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1test_1for_1reliablity_1bulk_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->test_for_reliablity_bulk_start = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1test_1for_1reliablity_1bulk_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (int32_t) ((arg1)->test_for_reliablity_bulk_start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1test_1for_1reliablity_1bulk_1last_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->test_for_reliablity_bulk_last = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1test_1for_1reliablity_1bulk_1last_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (int32_t) ((arg1)->test_for_reliablity_bulk_last);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Entity_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (int32_t) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Entity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Entity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Entity *)new Entity();
  *(Entity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Entity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1PARTICIPANT_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1i_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1i_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  result = (int32_t) ((arg1)->i_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1i_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_parameters = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1i_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  result = (int32_t) ((arg1)->i_parameters);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1pp_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  dds_parameter_t **arg2 = (dds_parameter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  arg2 = *(dds_parameter_t ***)&jarg2; 
  if (arg1) (arg1)->pp_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1pp_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  dds_parameter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  result = (dds_parameter_t **) ((arg1)->pp_parameters);
  *(dds_parameter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1offsetcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->offsetcount = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeSupport_1offsetcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeSupport **)&jarg1; 
  result = (int32_t) ((arg1)->offsetcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TypeSupport(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TypeSupport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TypeSupport *)new TypeSupport();
  *(TypeSupport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TypeSupport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TypeSupport *arg1 = (TypeSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TypeSupport **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1get_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string (*arg2)(Topic *) = (string (*)(Topic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = *(string (**)(Topic *))&jarg2; 
  if (arg1) (arg1)->get_type_name = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1get_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string (*result)(Topic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (string (*)(Topic *)) ((arg1)->get_type_name);
  *(string (**)(Topic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1get_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string (*arg2)(Topic *) = (string (*)(Topic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = *(string (**)(Topic *))&jarg2; 
  if (arg1) (arg1)->get_name = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1get_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string (*result)(Topic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (string (*)(Topic *)) ((arg1)->get_name);
  *(string (**)(Topic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1get_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  DomainParticipant *(*arg2)(Topic *) = (DomainParticipant *(*)(Topic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = *(DomainParticipant *(**)(Topic *))&jarg2; 
  if (arg1) (arg1)->get_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1get_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  DomainParticipant *(*result)(Topic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (DomainParticipant *(*)(Topic *)) ((arg1)->get_participant);
  *(DomainParticipant *(**)(Topic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->topic_name;
    if (arg2) {
      arg1->topic_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->topic_name, (const char *)arg2);
    } else {
      arg1->topic_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (string) ((arg1)->topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type_name;
    if (arg2) {
      arg1->type_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type_name, (const char *)arg2);
    } else {
      arg1->type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (string) ((arg1)->type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1p_1domain_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  if (arg1) (arg1)->p_domain_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1p_1domain_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (DomainParticipant *) ((arg1)->p_domain_participant);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1topic_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  TOPIC_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  arg2 = (TOPIC_TYPE)jarg2; 
  if (arg1) (arg1)->topic_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TopicDescription_1topic_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  TOPIC_TYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  result = (TOPIC_TYPE) ((arg1)->topic_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TopicDescription(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopicDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopicDescription *)new TopicDescription();
  *(TopicDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TopicDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  ReturnCode_t (*arg2)(Entity *) = (ReturnCode_t (*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(Entity *))&jarg2; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  ReturnCode_t (*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (ReturnCode_t (*)(Entity *)) ((arg1)->enable);
  *(ReturnCode_t (**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1statuscondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusCondition *(*arg2)(Entity *) = (StatusCondition *(*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(StatusCondition *(**)(Entity *))&jarg2; 
  if (arg1) (arg1)->get_statuscondition = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1statuscondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusCondition *(*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (StatusCondition *(*)(Entity *)) ((arg1)->get_statuscondition);
  *(StatusCondition *(**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1status_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusMask (*arg2)(Entity *) = (StatusMask (*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(StatusMask (**)(Entity *))&jarg2; 
  if (arg1) (arg1)->get_status_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1status_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusMask (*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (StatusMask (*)(Entity *)) ((arg1)->get_status_changes);
  *(StatusMask (**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  InstanceHandle_t (*arg2)(Entity *) = (InstanceHandle_t (*)(Entity *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(InstanceHandle_t (**)(Entity *))&jarg2; 
  if (arg1) (arg1)->get_instance_handle = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  InstanceHandle_t (*result)(Entity *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (InstanceHandle_t (*)(Entity *)) ((arg1)->get_instance_handle);
  *(InstanceHandle_t (**)(Entity *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1b_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_enable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1b_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (bool) ((arg1)->b_enable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1p_1status_1condition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusCondition *arg2 = (StatusCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(StatusCondition **)&jarg2; 
  if (arg1) (arg1)->p_status_condition = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1p_1status_1condition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (StatusCondition *) ((arg1)->p_status_condition);
  *(StatusCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1l_1status_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (StatusMask)jarg2; 
  if (arg1) (arg1)->l_status_mask = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1l_1status_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (StatusMask) ((arg1)->l_status_mask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1l_1status_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusMask arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (StatusMask)jarg2; 
  if (arg1) (arg1)->l_status_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1l_1status_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StatusMask result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (StatusMask) ((arg1)->l_status_changes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1entity_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->entity_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1entity_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result =  ((arg1)->entity_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1entity_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->entity_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1entity_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result =  ((arg1)->entity_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1last_1sequencenum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->last_sequencenum = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1last_1sequencenum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (int32_t) ((arg1)->last_sequencenum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1test_1for_1reliablity_1division_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->test_for_reliablity_division = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1test_1for_1reliablity_1division_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (int32_t) ((arg1)->test_for_reliablity_division);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1test_1for_1reliablity_1bulk_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->test_for_reliablity_bulk_start = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1test_1for_1reliablity_1bulk_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (int32_t) ((arg1)->test_for_reliablity_bulk_start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1test_1for_1reliablity_1bulk_1last_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->test_for_reliablity_bulk_last = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1test_1for_1reliablity_1bulk_1last_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (int32_t) ((arg1)->test_for_reliablity_bulk_last);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (int32_t) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string (*arg2)(Topic *) = (string (*)(Topic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(string (**)(Topic *))&jarg2; 
  if (arg1) (arg1)->get_type_name = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string (*result)(Topic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (string (*)(Topic *)) ((arg1)->get_type_name);
  *(string (**)(Topic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string (*arg2)(Topic *) = (string (*)(Topic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(string (**)(Topic *))&jarg2; 
  if (arg1) (arg1)->get_name = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string (*result)(Topic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (string (*)(Topic *)) ((arg1)->get_name);
  *(string (**)(Topic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  DomainParticipant *(*arg2)(Topic *) = (DomainParticipant *(*)(Topic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(DomainParticipant *(**)(Topic *))&jarg2; 
  if (arg1) (arg1)->get_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  DomainParticipant *(*result)(Topic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (DomainParticipant *(*)(Topic *)) ((arg1)->get_participant);
  *(DomainParticipant *(**)(Topic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->topic_name;
    if (arg2) {
      arg1->topic_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->topic_name, (const char *)arg2);
    } else {
      arg1->topic_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (string) ((arg1)->topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->type_name;
    if (arg2) {
      arg1->type_name = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->type_name, (const char *)arg2);
    } else {
      arg1->type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (string) ((arg1)->type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1p_1domain_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  if (arg1) (arg1)->p_domain_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1p_1domain_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (DomainParticipant *) ((arg1)->p_domain_participant);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1topic_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  TOPIC_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = (TOPIC_TYPE)jarg2; 
  if (arg1) (arg1)->topic_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1topic_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  TOPIC_TYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (TOPIC_TYPE) ((arg1)->topic_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1subscription_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string (*arg2)(MultiTopic *) = (string (*)(MultiTopic *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(string (**)(MultiTopic *))&jarg2; 
  if (arg1) (arg1)->get_subscription_expression = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1subscription_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string (*result)(MultiTopic *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (string (*)(MultiTopic *)) ((arg1)->get_subscription_expression);
  *(string (**)(MultiTopic *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1expression_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  ReturnCode_t (*arg2)(MultiTopic *,StringSeq *) = (ReturnCode_t (*)(MultiTopic *,StringSeq *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(MultiTopic *,StringSeq *))&jarg2; 
  if (arg1) (arg1)->get_expression_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1get_1expression_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  ReturnCode_t (*result)(MultiTopic *,StringSeq *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (ReturnCode_t (*)(MultiTopic *,StringSeq *)) ((arg1)->get_expression_parameters);
  *(ReturnCode_t (**)(MultiTopic *,StringSeq *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1set_1expression_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  ReturnCode_t (*arg2)(MultiTopic *,StringSeq *) = (ReturnCode_t (*)(MultiTopic *,StringSeq *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(ReturnCode_t (**)(MultiTopic *,StringSeq *))&jarg2; 
  if (arg1) (arg1)->set_expression_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1set_1expression_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  ReturnCode_t (*result)(MultiTopic *,StringSeq *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (ReturnCode_t (*)(MultiTopic *,StringSeq *)) ((arg1)->set_expression_parameters);
  *(ReturnCode_t (**)(MultiTopic *,StringSeq *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1subscription_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string arg2 = (string) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (string)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->subscription_expression;
    if (arg2) {
      arg1->subscription_expression = (string) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->subscription_expression, (const char *)arg2);
    } else {
      arg1->subscription_expression = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1subscription_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (string) ((arg1)->subscription_expression);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1expression_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StringSeq *arg2 = (StringSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(MultiTopic **)&jarg1; 
  arg2 = *(StringSeq **)&jarg2; 
  if (arg1) (arg1)->expression_parameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MultiTopic_1expression_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  StringSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  result = (StringSeq *)& ((arg1)->expression_parameters);
  *(StringSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1MultiTopic(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultiTopic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultiTopic *)new MultiTopic();
  *(MultiTopic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1MultiTopic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1CACHECHANGE_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MAX_1KEY_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  result = (long) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  result = (uint32_t) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  result = (uint32_t) ((arg1)->len);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cpskey_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cpskey_t **)&jarg1; 
  result = (void *) ((arg1)->p_value);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1cpskey_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cpskey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cpskey_t *)new cpskey_t();
  *(cpskey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1cpskey_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cpskey_t *arg1 = (cpskey_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cpskey_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_key_1guid_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  key_guid_t *arg1 = (key_guid_t *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(key_guid_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->key;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_key_1guid_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  key_guid_t *arg1 = (key_guid_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(key_guid_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->key);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 16); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1key_1guid_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  key_guid_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (key_guid_t *)new key_guid_t();
  *(key_guid_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1key_1guid_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  key_guid_t *arg1 = (key_guid_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(key_guid_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->i_key = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (uint32_t) ((arg1)->i_key);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1keylist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  cpskey_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = *(cpskey_t **)&jarg2; 
  {
    size_t ii;
    cpskey_t *b = (cpskey_t *) arg1->keylist;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((cpskey_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1keylist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  cpskey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (cpskey_t *)(cpskey_t *) ((arg1)->keylist);
  *(cpskey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1max_1samples_1per_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->max_samples_per_instance = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1max_1samples_1per_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (int32_t) ((arg1)->max_samples_per_instance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1history_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_history_depth = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1history_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_history_depth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1messages_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_messages = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1messages_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_messages);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1pp_1messages_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  message_t **arg2 = (message_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = *(message_t ***)&jarg2; 
  if (arg1) (arg1)->pp_messages = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1pp_1messages_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  message_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (message_t **) ((arg1)->pp_messages);
  *(message_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1key_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_key_guid = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1i_1key_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_key_guid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1pp_1key_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  key_guid_t **arg2 = (key_guid_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = *(key_guid_t ***)&jarg2; 
  if (arg1) (arg1)->pp_key_guid = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1pp_1key_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  key_guid_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (key_guid_t **) ((arg1)->pp_key_guid);
  *(key_guid_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1instance_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  InstanceStateKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (InstanceStateKind)jarg2; 
  if (arg1) (arg1)->instance_state = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1instance_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  InstanceStateKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (InstanceStateKind) ((arg1)->instance_state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1sample_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  SampleStateKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (SampleStateKind)jarg2; 
  if (arg1) (arg1)->sample_state = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1sample_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  SampleStateKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (SampleStateKind) ((arg1)->sample_state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1view_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  ViewStateKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = (ViewStateKind)jarg2; 
  if (arg1) (arg1)->view_state = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1view_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  ViewStateKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (ViewStateKind) ((arg1)->view_state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1register_1instance_1timestamp_1set_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->register_instance_timestamp_set = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1register_1instance_1timestamp_1set_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (bool) ((arg1)->register_instance_timestamp_set);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1register_1instance_1timestamp_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(instanceset_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->register_instance_timestamp_value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1t_1register_1instance_1timestamp_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->register_instance_timestamp_value);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1instanceset_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  instanceset_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (instanceset_t *)new instanceset_t();
  *(instanceset_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1instanceset_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(instanceset_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1sample_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  SampleStateKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (SampleStateKind)jarg2; 
  if (arg1) (arg1)->sample_state = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1sample_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  SampleStateKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (SampleStateKind) ((arg1)->sample_state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1view_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  ViewStateKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (ViewStateKind)jarg2; 
  if (arg1) (arg1)->view_state = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1view_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  ViewStateKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (ViewStateKind) ((arg1)->view_state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1instance_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  InstanceStateKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (InstanceStateKind)jarg2; 
  if (arg1) (arg1)->instance_state = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1instance_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  InstanceStateKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (InstanceStateKind) ((arg1)->instance_state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1source_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->source_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1source_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (Time_t *)& ((arg1)->source_timestamp);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->instance_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->instance_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1publication_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->publication_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1publication_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->publication_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1disposed_1generation_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->disposed_generation_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1disposed_1generation_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (int32_t) ((arg1)->disposed_generation_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1no_1writers_1generation_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->no_writers_generation_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1no_1writers_1generation_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (int32_t) ((arg1)->no_writers_generation_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1sample_1rank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->sample_rank = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1sample_1rank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (int32_t) ((arg1)->sample_rank);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1generation_1rank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->generation_rank = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1generation_1rank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (int32_t) ((arg1)->generation_rank);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1absolute_1generation_1rank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->absolute_generation_rank = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1absolute_1generation_1rank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (int32_t) ((arg1)->absolute_generation_rank);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1valid_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->valid_data = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1valid_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (bool) ((arg1)->valid_data);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1disposed_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(SampleInfo **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->disposed_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfo_1disposed_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  result = (Time_t *)& ((arg1)->disposed_timestamp);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SampleInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleInfo *)new SampleInfo();
  *(SampleInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SampleInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleInfo *arg1 = (SampleInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfoSeq_1i_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SampleInfoSeq *arg1 = (SampleInfoSeq *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleInfoSeq **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_seq = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfoSeq_1i_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SampleInfoSeq *arg1 = (SampleInfoSeq *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleInfoSeq **)&jarg1; 
  result = (int32_t) ((arg1)->i_seq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfoSeq_1pp_1sample_1infos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SampleInfoSeq *arg1 = (SampleInfoSeq *) 0 ;
  SampleInfo **arg2 = (SampleInfo **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleInfoSeq **)&jarg1; 
  arg2 = *(SampleInfo ***)&jarg2; 
  if (arg1) (arg1)->pp_sample_infos = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SampleInfoSeq_1pp_1sample_1infos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SampleInfoSeq *arg1 = (SampleInfoSeq *) 0 ;
  SampleInfo **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleInfoSeq **)&jarg1; 
  result = (SampleInfo **) ((arg1)->pp_sample_infos);
  *(SampleInfo ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SampleInfoSeq(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleInfoSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleInfoSeq *)new SampleInfoSeq();
  *(SampleInfoSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SampleInfoSeq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SampleInfoSeq *arg1 = (SampleInfoSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SampleInfoSeq **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INIT_1SAMPLEINFOSEQ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SampleInfoSeq *arg1 = (SampleInfoSeq *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SampleInfoSeq **)&jarg1; 
  INIT_SAMPLEINFOSEQ = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INIT_1SAMPLEINFOSEQ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SampleInfoSeq *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SampleInfoSeq *)&INIT_SAMPLEINFOSEQ;
  *(SampleInfoSeq **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataSample_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataSample *arg1 = (DataSample *) 0 ;
  SampleData *arg2 = (SampleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataSample **)&jarg1; 
  arg2 = *(SampleData **)&jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataSample_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataSample *arg1 = (DataSample *) 0 ;
  SampleData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSample **)&jarg1; 
  result = (SampleData *)& ((arg1)->data);
  *(SampleData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataSample_1sample_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataSample *arg1 = (DataSample *) 0 ;
  SampleInfo *arg2 = (SampleInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSample **)&jarg1; 
  arg2 = *(SampleInfo **)&jarg2; 
  if (arg1) (arg1)->sample_info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataSample_1sample_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataSample *arg1 = (DataSample *) 0 ;
  SampleInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSample **)&jarg1; 
  result = (SampleInfo *)& ((arg1)->sample_info);
  *(SampleInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataSample(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataSample *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataSample *)new DataSample();
  *(DataSample **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataSample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataSample *arg1 = (DataSample *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataSample **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BUTIN_1PARTICIPANT_1DOMAIN_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-999);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DURATIOIN_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Duration_t *)&DURATIOIN_ZERO;
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANTINFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("DCPSParticipant");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TOPICINFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("DCPSTopic");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PUBLICATIONINFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("DCPSPublication");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SUBSCRIPTIONINFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("DCPSSubscription");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIVELINESSP2P_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("DCPSLivenessP2P");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANTINFO_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("participantInfoType");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TOPICINFO_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("topicInfoType");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PUBLICATIONINFO_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("publicationInfoType");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SUBSCRIPTIONINFO_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("subscriptionInfoType");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LIVELINESSP2PINFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("livenessp2pInfoType");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BUILTIN_1PUBLISHER_1PARTITION_1QOS_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("builtin_partition");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  dds_string *arg1 = (dds_string *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  dds_string *arg1 = (dds_string *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  result = (int32_t) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  dds_string *arg1 = (dds_string *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->value, (const char *)arg2, 256-1);
      arg1->value[256-1] = 0;
    } else {
      arg1->value[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  dds_string *arg1 = (dds_string *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  result = (char *)(char *) ((arg1)->value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1dds_1string(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dds_string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dds_string *)new dds_string();
  *(dds_string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1dds_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dds_string *arg1 = (dds_string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string2_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dds_string2 *arg1 = (dds_string2 *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_string2 **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string2_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dds_string2 *arg1 = (dds_string2 *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_string2 **)&jarg1; 
  result = (int32_t) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string2_1p_1dummy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  dds_string2 *arg1 = (dds_string2 *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_string2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->p_dummy;
    if (arg2) {
      arg1->p_dummy = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->p_dummy, (const char *)arg2);
    } else {
      arg1->p_dummy = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_dds_1string2_1p_1dummy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dds_string2 *arg1 = (dds_string2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_string2 **)&jarg1; 
  result = (char *) ((arg1)->p_dummy);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1dds_1string2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dds_string2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dds_string2 *)new dds_string2();
  *(dds_string2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1dds_1string2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dds_string2 *arg1 = (dds_string2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DomainParticipantFactory_1get_1instance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DomainParticipantFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DomainParticipantFactory *)DomainParticipantFactory_get_instance();
  *(DomainParticipantFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  init_entity(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1publisher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Publisher *arg1 = (Publisher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  init_publisher(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Topic *arg1 = (Topic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  init_topic(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1topic_1description(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  init_topic_description(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1domain_1paticipant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  init_domain_paticipant(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  init_datawriter(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Subscriber *arg1 = (Subscriber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  init_subscriber(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1content_1filtered_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  init_content_filtered_topic(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1multi_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  init_multi_topic(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataReader *arg1 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  init_datareader(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1read_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  init_read_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Condition *arg1 = (Condition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  init_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1query_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  init_query_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1status_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  init_status_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1waitset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  init_waitset(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  destroy_entity(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1domain_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  destroy_domain_participant(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1publisher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Publisher *arg1 = (Publisher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Publisher **)&jarg1; 
  destroy_publisher(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1subscriber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Subscriber *arg1 = (Subscriber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  destroy_subscriber(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Topic *arg1 = (Topic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  destroy_topic(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1domain_1participant_1factory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DomainParticipantFactory *arg1 = (DomainParticipantFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantFactory **)&jarg1; 
  destroy_domain_participant_factory(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1topic_1description(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopicDescription *arg1 = (TopicDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopicDescription **)&jarg1; 
  destroy_topic_description(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1content_1filtered_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ContentFilteredTopic *arg1 = (ContentFilteredTopic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilteredTopic **)&jarg1; 
  destroy_content_filtered_topic(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1multi_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultiTopic *arg1 = (MultiTopic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiTopic **)&jarg1; 
  destroy_multi_topic(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  destroy_datawriter(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataReader *arg1 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  destroy_datareader(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1read_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  destroy_read_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Condition *arg1 = (Condition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Condition **)&jarg1; 
  destroy_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1query_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QueryCondition *arg1 = (QueryCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueryCondition **)&jarg1; 
  destroy_query_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1read_1condition_1except_1read_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReadCondition *arg1 = (ReadCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReadCondition **)&jarg1; 
  destroy_read_condition_except_read_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1status_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StatusCondition *arg1 = (StatusCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusCondition **)&jarg1; 
  destroy_status_condition(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1waitset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WaitSet *arg1 = (WaitSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WaitSet **)&jarg1; 
  destroy_waitset(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1set_1default_1participant_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  result = (ReturnCode_t)static_set_default_participant_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1get_1default_1participant_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipantQos *arg1 = (DomainParticipantQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipantQos **)&jarg1; 
  result = (ReturnCode_t)static_get_default_participant_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1set_1default_1publisher_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  result = (ReturnCode_t)static_set_default_publisher_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1get_1default_1publisher_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  result = (ReturnCode_t)static_get_default_publisher_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1set_1default_1subscriber_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  result = (ReturnCode_t)static_set_default_subscriber_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1get_1default_1subscriber_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  result = (ReturnCode_t)static_get_default_subscriber_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1set_1default_1topic_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (ReturnCode_t)static_set_default_topic_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1get_1default_1topic_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopicQos *arg1 = (TopicQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicQos **)&jarg1; 
  result = (ReturnCode_t)static_get_default_topic_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1set_1default_1datawriter_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (ReturnCode_t)static_set_default_datawriter_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1get_1default_1datawriter_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataWriterQos *arg1 = (DataWriterQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriterQos **)&jarg1; 
  result = (ReturnCode_t)static_get_default_datawriter_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1set_1default_1datareader_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (ReturnCode_t)static_set_default_datareader_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_static_1get_1default_1datareader_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReaderQos *arg1 = (DataReaderQos *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReaderQos **)&jarg1; 
  result = (ReturnCode_t)static_get_default_datareader_qos(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1domain_1participant_1factory_1module_1id(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_domain_participant_factory_module_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_waitset_1new(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WaitSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WaitSet *)waitset_new();
  *(WaitSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_quit(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  quit();
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_is_1quit(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)is_quit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_is_1terminated(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)is_terminated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1string(JNIEnv *jenv, jclass jcls, jstring jarg1, jintArray jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (char *)get_string(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_expression_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  expression_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (expression_t *)expression_parse((char const *)arg1);
  *(expression_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_expression_1check_1field(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  expression_t *arg1 = (expression_t *) 0 ;
  FooTypeSupport *arg2 = (FooTypeSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(expression_t **)&jarg1; 
  arg2 = *(FooTypeSupport **)&jarg2; 
  expression_check_field(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1string_1rtps_1to_1type_1support(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  dds_string2 *arg1 = (dds_string2 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  long arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dds_string2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (long)jarg5; 
  result = (int)set_string_rtps_to_type_support(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_caculate_1message_1data_1type_1support_1to_1rtps(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jstring jarg5) {
  jint jresult = 0 ;
  message_t *arg1 = (message_t *) 0 ;
  FooTypeSupport *arg2 = (FooTypeSupport *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(message_t **)&jarg1; 
  arg2 = *(FooTypeSupport **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (long)caculate_message_data_type_support_to_rtps(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instaceset_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  message_t *arg1 = (message_t *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  instanceset_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(message_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (instanceset_t *)instaceset_new(arg1,arg2,arg3);
  *(instanceset_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_insert_1instanceset_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DataReader *arg1 = (DataReader *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  insert_instanceset_datareader(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_insert_1instanceset_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  insert_instanceset_datawriter(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Entity *arg1 = (Entity *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  instanceset_remove(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_remove_1in_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  message_t *arg2 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(message_t **)&jarg2; 
  remove_in_order(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_remove_1in_1instanceset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  message_t *arg1 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(message_t **)&jarg1; 
  remove_in_instanceset(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_instanceset_1find_1from_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  DataReader *arg1 = (DataReader *) (DataReader *)0 ;
  GUID_t arg2 ;
  GUID_t const *argp2 ;
  instanceset_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t const");
    return 0;
  }
  arg2 = *argp2; 
  result = (instanceset_t *)instanceset_find_from_datareader((DataReader const *)arg1,arg2);
  *(instanceset_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_status_1condition_1plain_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  StatusKind arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  arg2 = (StatusKind)jarg2; 
  result = (ReturnCode_t)status_condition_plain_status_set(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_data_1on_1readers_1statuscondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (ReturnCode_t)data_on_readers_statuscondition(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_data_1available_1statuscondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Entity *arg1 = (Entity *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Entity **)&jarg1; 
  result = (ReturnCode_t)data_available_statuscondition(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1DataOnReaders_1DataAvailable_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (ReturnCode_t)change_DataOnReaders_DataAvailable_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1RequestedDeadlineMissed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  InstanceHandle_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (ReturnCode_t)change_RequestedDeadlineMissed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1RequestedIncompatibleQoS_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  QosPolicyId_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (QosPolicyId_t)jarg2; 
  result = (ReturnCode_t)change_RequestedIncompatibleQoS_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1OfferedIncompatibleQoS_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  QosPolicyId_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = (QosPolicyId_t)jarg2; 
  result = (ReturnCode_t)change_OfferedIncompatibleQoS_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1SubscriberMathed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  int arg2 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)change_SubscriberMathed_status(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1SubscriberMathed_1CurrentCount_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  int arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ReturnCode_t)change_SubscriberMathed_CurrentCount_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1PublicationMathced_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  int arg2 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)change_PublicationMathced_status(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1publication_1mathced_1current_1count_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  int arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ReturnCode_t)change_publication_mathced_current_count_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1OfferedDeadlineMissed_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  InstanceHandle_t arg2 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  result = (ReturnCode_t)change_OfferedDeadlineMissed_status(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1SampleRejected_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  SampleRejectedStatusKind arg2 ;
  InstanceHandle_t arg3 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (SampleRejectedStatusKind)jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (ReturnCode_t)change_SampleRejected_status(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1sample_1lost_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  result = (ReturnCode_t)change_sample_lost_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_change_1topic_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  result = (ReturnCode_t)change_topic_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1subscriber_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Subscriber *arg1 = (Subscriber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Subscriber **)&jarg1; 
  init_subscriber_status(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1topic_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Topic *arg1 = (Topic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  init_topic_status(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1key_1guid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  message_t *arg1 = (message_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(message_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  get_key_guid(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1builtin_1participant_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReader *)get_builtin_participant_reader();
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1builtin_1topic_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReader *)get_builtin_topic_reader();
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1builtin_1publisher_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReader *)get_builtin_publisher_reader();
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1builtin_1subscriber_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataReader *)get_builtin_subscriber_reader();
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1builtin_1participant_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParticipantBuiltinTopicData *arg1 = (ParticipantBuiltinTopicData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantBuiltinTopicData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  get_builtin_participant_data(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1publication_1builtin_1topic_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PublicationBuiltinTopicData *arg1 = (PublicationBuiltinTopicData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicationBuiltinTopicData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  get_publication_builtin_topic_data(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_is_1matched_1remote_1publisher(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  result = (bool)is_matched_remote_publisher(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_is_1matched_1remote_1subscriber(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  result = (bool)is_matched_remote_subscriber(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1subscription_1builtin_1topic_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SubscriptionBuiltinTopicData *arg1 = (SubscriptionBuiltinTopicData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriptionBuiltinTopicData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  get_subscription_builtin_topic_data(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1builtin_1topic_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TopicBuiltinTopicData *arg1 = (TopicBuiltinTopicData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopicBuiltinTopicData **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  get_builtin_topic_data(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ignore_1writerproxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  ignore_writerproxy(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ignore_1writerproxy_1guid_1prefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  ignore_writerproxy_guid_prefix(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ignore_1readerproxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  ignore_readerproxy(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ignore_1readerproxy_1guid_1prefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  ignore_readerproxy_guid_prefix(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1new_1data_1sample_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  Entity *arg1 = (Entity *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  check_new_data_sample_status(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1new_1data_1instance_1stautus(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  Entity *arg1 = (Entity *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  check_new_data_instance_stautus(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1newData_1viewStautus(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  Entity *arg1 = (Entity *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  check_newData_viewStautus(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1instanceStatus_1disposed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Entity *arg1 = (Entity *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  check_instanceStatus_disposed(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1instanceStatus_1unregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Entity *arg1 = (Entity *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Entity **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  check_instanceStatus_unregister(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_read_1instance_1change_1sample_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReader *arg1 = (DataReader *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  read_instance_change_sample_status(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_read_1instance_1change_1instance_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReader *arg1 = (DataReader *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  read_instance_change_instance_status(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_read_1change_1sample_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataReader *arg1 = (DataReader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (int)jarg2; 
  read_change_sample_status(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_read_1change_1instance_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataReader *arg1 = (DataReader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (int)jarg2; 
  read_change_instance_status(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_take_1remove_1instance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReader *arg1 = (DataReader *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  take_remove_instance(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_take_1instance_1change_1instance_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataReader *arg1 = (DataReader *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  take_instance_change_instance_status(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_take_1change_1instance_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataReader *arg1 = (DataReader *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = (int)jarg2; 
  take_change_instance_status(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_read_1condition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  result = (ReturnCode_t)read_condition_set(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_read_1condition_1set_1from_1add_1instanceset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  DataReader *arg1 = (DataReader *) 0 ;
  instanceset_t *arg2 = (instanceset_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(instanceset_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  result = (ReturnCode_t)read_condition_set_from_add_instanceset(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1all_1samples_1sample_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  instanceset_t *arg1 = (instanceset_t *) 0 ;
  ReturnCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(instanceset_t **)&jarg1; 
  result = (ReturnCode_t)check_all_samples_sample_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_qosim_1dcps_1message_1ordering_1change(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataReader *arg1 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  qosim_dcps_message_ordering_change(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_take_1change_1instance_1status_1querycondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  DataReader *arg1 = (DataReader *) 0 ;
  message_t *arg2 = (message_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataReader **)&jarg1; 
  arg2 = *(message_t **)&jarg2; 
  arg3 = (int)jarg3; 
  take_change_instance_status_querycondition(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MODULE_1FAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MODULE_RETURN_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (MODULE_RETURN_TYPE)MODULE_FAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FIND_1PARENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MODULE_FIND_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (MODULE_FIND_TYPE)FIND_PARENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (int) ((arg1)->i_object_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (int) ((arg1)->i_object_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1psz_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_type;
    if (arg2) {
      arg1->psz_object_type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_type, (const char *)arg2);
    } else {
      arg1->psz_object_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1psz_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1psz_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_name;
    if (arg2) {
      arg1->psz_object_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_name, (const char *)arg2);
    } else {
      arg1->psz_object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1psz_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1libmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  libmodule_t *arg2 = (libmodule_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(libmodule_t **)&jarg2; 
  if (arg1) (arg1)->p_libmodule = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1libmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  libmodule_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (libmodule_t *) ((arg1)->p_libmodule);
  *(libmodule_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1module_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_t *arg2 = (module_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(module_t **)&jarg2; 
  if (arg1) (arg1)->p_module = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1module_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (module_t *) ((arg1)->p_module);
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  if (arg1) (arg1)->p_parent = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (module_object_t *) ((arg1)->p_parent);
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1pp_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_object_t **arg2 = (module_object_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(module_object_t ***)&jarg2; 
  if (arg1) (arg1)->pp_children = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1pp_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_object_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (module_object_t **) ((arg1)->pp_children);
  *(module_object_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_children = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_children);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1refcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_refcount = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1refcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_refcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1attached_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_attached = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1attached_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_attached);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1force_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_force = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1force_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_force);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1var_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->var_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1var_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result =  ((arg1)->var_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_vars = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1i_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (int) ((arg1)->i_vars);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  variable_t *arg2 = (variable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(variable_t **)&jarg2; 
  if (arg1) (arg1)->p_vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1p_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  variable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (variable_t *) ((arg1)->p_vars);
  *(variable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1thread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1thread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1v_1private_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->v_private = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1v_1private_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (void *) ((arg1)->v_private);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1object_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1module_1object_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (module_object_t *)new module_object_t();
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1module_1object_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int) ((arg1)->i_object_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int) ((arg1)->i_object_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1psz_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_type;
    if (arg2) {
      arg1->psz_object_type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_type, (const char *)arg2);
    } else {
      arg1->psz_object_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1psz_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1psz_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_name;
    if (arg2) {
      arg1->psz_object_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_name, (const char *)arg2);
    } else {
      arg1->psz_object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1psz_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1libmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  libmodule_t *arg2 = (libmodule_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(libmodule_t **)&jarg2; 
  if (arg1) (arg1)->p_libmodule = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1libmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  libmodule_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (libmodule_t *) ((arg1)->p_libmodule);
  *(libmodule_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1module_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_t *arg2 = (module_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(module_t **)&jarg2; 
  if (arg1) (arg1)->p_module = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1module_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (module_t *) ((arg1)->p_module);
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  if (arg1) (arg1)->p_parent = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (module_object_t *) ((arg1)->p_parent);
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1pp_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_object_t **arg2 = (module_object_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(module_object_t ***)&jarg2; 
  if (arg1) (arg1)->pp_children = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1pp_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_object_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (module_object_t **) ((arg1)->pp_children);
  *(module_object_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_children = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_children);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1refcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_refcount = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1refcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_refcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1attached_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_attached = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1attached_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_attached);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1force_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_force = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1force_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_force);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1var_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->var_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1var_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result =  ((arg1)->var_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_vars = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int) ((arg1)->i_vars);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  variable_t *arg2 = (variable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(variable_t **)&jarg2; 
  if (arg1) (arg1)->p_vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  variable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (variable_t *) ((arg1)->p_vars);
  *(variable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1thread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1thread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1v_1private_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->v_private = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1v_1private_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (void *) ((arg1)->v_private);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1ready_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_ready = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1b_1ready_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (bool) ((arg1)->b_ready);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1counter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_counter = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1counter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int) ((arg1)->i_counter);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1objects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_objects = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1i_1objects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (int) ((arg1)->i_objects);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1pp_1objects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_object_t **arg2 = (module_object_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(module_object_t ***)&jarg2; 
  if (arg1) (arg1)->pp_objects = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1pp_1objects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_object_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (module_object_t **) ((arg1)->pp_objects);
  *(module_object_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1module_1bank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_bank_t *arg2 = (module_bank_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  arg2 = *(module_bank_t **)&jarg2; 
  if (arg1) (arg1)->p_module_bank = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_libmodule_1t_1p_1module_1bank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  module_bank_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  result = (module_bank_t *) ((arg1)->p_module_bank);
  *(module_bank_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1libmodule_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libmodule_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libmodule_t *)new libmodule_t();
  *(libmodule_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1libmodule_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libmodule_t *arg1 = (libmodule_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libmodule_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_MODULE_1SHORTCUT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(50);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (int) ((arg1)->i_object_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (int) ((arg1)->i_object_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1psz_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_type;
    if (arg2) {
      arg1->psz_object_type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_type, (const char *)arg2);
    } else {
      arg1->psz_object_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1psz_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1psz_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_name;
    if (arg2) {
      arg1->psz_object_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_name, (const char *)arg2);
    } else {
      arg1->psz_object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1psz_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1libmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  libmodule_t *arg2 = (libmodule_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = *(libmodule_t **)&jarg2; 
  if (arg1) (arg1)->p_libmodule = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1libmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  libmodule_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (libmodule_t *) ((arg1)->p_libmodule);
  *(libmodule_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1module_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_t *arg2 = (module_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = *(module_t **)&jarg2; 
  if (arg1) (arg1)->p_module = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1module_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (module_t *) ((arg1)->p_module);
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  if (arg1) (arg1)->p_parent = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (module_object_t *) ((arg1)->p_parent);
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1pp_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_object_t **arg2 = (module_object_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = *(module_object_t ***)&jarg2; 
  if (arg1) (arg1)->pp_children = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1pp_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_object_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (module_object_t **) ((arg1)->pp_children);
  *(module_object_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_children = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_children);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1refcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_refcount = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1refcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_refcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1attached_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_attached = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1attached_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_attached);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1force_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_force = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1force_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_force);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1var_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->var_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1var_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result =  ((arg1)->var_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_vars = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (int) ((arg1)->i_vars);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  variable_t *arg2 = (variable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = *(variable_t **)&jarg2; 
  if (arg1) (arg1)->p_vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1p_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  variable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (variable_t *) ((arg1)->p_vars);
  *(variable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1thread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1thread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1v_1private_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->v_private = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1v_1private_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (void *) ((arg1)->v_private);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1usage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_usage = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1i_1usage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (int) ((arg1)->i_usage);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1main_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_main = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1main_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool) ((arg1)->b_main);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1builtins_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_builtins = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1builtins_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool) ((arg1)->b_builtins);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1plugins_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_plugins = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1bank_1t_1b_1plugins_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  result = (bool) ((arg1)->b_plugins);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1module_1bank_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  module_bank_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (module_bank_t *)new module_bank_t();
  *(module_bank_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1module_1bank_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_bank_t *arg1 = (module_bank_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_bank_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int) ((arg1)->i_object_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int) ((arg1)->i_object_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_type;
    if (arg2) {
      arg1->psz_object_type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_type, (const char *)arg2);
    } else {
      arg1->psz_object_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_name;
    if (arg2) {
      arg1->psz_object_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_name, (const char *)arg2);
    } else {
      arg1->psz_object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1libmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  libmodule_t *arg2 = (libmodule_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(libmodule_t **)&jarg2; 
  if (arg1) (arg1)->p_libmodule = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1libmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  libmodule_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (libmodule_t *) ((arg1)->p_libmodule);
  *(libmodule_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1module_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_t *arg2 = (module_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(module_t **)&jarg2; 
  if (arg1) (arg1)->p_module = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1module_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (module_t *) ((arg1)->p_module);
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  if (arg1) (arg1)->p_parent = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (module_object_t *) ((arg1)->p_parent);
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pp_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_object_t **arg2 = (module_object_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(module_object_t ***)&jarg2; 
  if (arg1) (arg1)->pp_children = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pp_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_object_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (module_object_t **) ((arg1)->pp_children);
  *(module_object_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_children = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_children);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1refcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_refcount = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1refcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_refcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1attached_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_attached = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1attached_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_attached);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1force_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_force = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1force_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_force);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1var_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->var_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1var_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result =  ((arg1)->var_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_vars = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int) ((arg1)->i_vars);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  variable_t *arg2 = (variable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(variable_t **)&jarg2; 
  if (arg1) (arg1)->p_vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  variable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (variable_t *) ((arg1)->p_vars);
  *(variable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1thread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1thread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1v_1private_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->v_private = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1v_1private_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (void *) ((arg1)->v_private);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1shortname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_shortname;
    if (arg2) {
      arg1->psz_shortname = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_shortname, (const char *)arg2);
    } else {
      arg1->psz_shortname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1shortname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (char *) ((arg1)->psz_shortname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1longname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_longname;
    if (arg2) {
      arg1->psz_longname = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_longname, (const char *)arg2);
    } else {
      arg1->psz_longname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1longname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (char *) ((arg1)->psz_longname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1capability_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_capability;
    if (arg2) {
      arg1->psz_capability = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_capability, (const char *)arg2);
    } else {
      arg1->psz_capability = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1psz_1capability_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (char *) ((arg1)->psz_capability);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_score = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int) ((arg1)->i_score);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pp_1shortcuts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char **arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  {
    size_t ii;
    char * *b = (char * *) arg1->pp_shortcuts;
    for (ii = 0; ii < (size_t)50; ii++) b[ii] = *((char * *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pp_1shortcuts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (char **)(char **) ((arg1)->pp_shortcuts);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pf_1activate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int (*arg2)(module_object_t *) = (int (*)(module_object_t *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(int (**)(module_object_t *))&jarg2; 
  if (arg1) (arg1)->pf_activate = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pf_1activate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  int (*result)(module_object_t *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (int (*)(module_object_t *)) ((arg1)->pf_activate);
  *(int (**)(module_object_t *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pf_1deactivate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  void (*arg2)(module_object_t *) = (void (*)(module_object_t *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(void (**)(module_object_t *))&jarg2; 
  if (arg1) (arg1)->pf_deactivate = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1pf_1deactivate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  void (*result)(module_object_t *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (void (*)(module_object_t *)) ((arg1)->pf_deactivate);
  *(void (**)(module_object_t *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_config_t *arg2 = (module_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = *(module_config_t **)&jarg2; 
  if (arg1) (arg1)->p_config = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1p_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  module_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (module_config_t *) ((arg1)->p_config);
  *(module_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1config_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->i_config_items = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1config_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (unsigned int) ((arg1)->i_config_items);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1bool_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->i_bool_items = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleload_1t_1i_1bool_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  result = (unsigned int) ((arg1)->i_bool_items);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1moduleload_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  moduleload_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (moduleload_t *)new moduleload_t();
  *(moduleload_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1moduleload_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  moduleload_t *arg1 = (moduleload_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduleload_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1object_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1object_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (int) ((arg1)->i_object_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_object_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (int) ((arg1)->i_object_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1psz_1object_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_type;
    if (arg2) {
      arg1->psz_object_type = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_type, (const char *)arg2);
    } else {
      arg1->psz_object_type = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1psz_1object_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_type);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1psz_1object_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_object_name;
    if (arg2) {
      arg1->psz_object_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_object_name, (const char *)arg2);
    } else {
      arg1->psz_object_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1psz_1object_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (char *) ((arg1)->psz_object_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1libmodule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  libmodule_t *arg2 = (libmodule_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(libmodule_t **)&jarg2; 
  if (arg1) (arg1)->p_libmodule = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1libmodule_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  libmodule_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (libmodule_t *) ((arg1)->p_libmodule);
  *(libmodule_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1module_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  module_t *arg2 = (module_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(module_t **)&jarg2; 
  if (arg1) (arg1)->p_module = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1module_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (module_t *) ((arg1)->p_module);
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  if (arg1) (arg1)->p_parent = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (module_object_t *) ((arg1)->p_parent);
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1pp_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  module_object_t **arg2 = (module_object_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(module_object_t ***)&jarg2; 
  if (arg1) (arg1)->pp_children = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1pp_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  module_object_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (module_object_t **) ((arg1)->pp_children);
  *(module_object_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1children_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_children = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1children_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_children);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1refcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_refcount = (int volatile )arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1refcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (int)(int) ((arg1)->i_refcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1attached_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_attached = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1attached_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_attached);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1force_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_force = (bool volatile )arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1force_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (bool)(bool) ((arg1)->b_force);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1var_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->var_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1var_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result =  ((arg1)->var_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_vars = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (int) ((arg1)->i_vars);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  variable_t *arg2 = (variable_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(variable_t **)&jarg2; 
  if (arg1) (arg1)->p_vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1p_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  variable_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (variable_t *) ((arg1)->p_vars);
  *(variable_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1thread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1thread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1v_1private_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->v_private = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1v_1private_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (void *) ((arg1)->v_private);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1domain_1participants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_domain_participants = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1i_1domain_1participants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (int) ((arg1)->i_domain_participants);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1pp_1domain_1participants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_t *arg1 = (module_t *) 0 ;
  DomainParticipant **arg2 = (DomainParticipant **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  arg2 = *(DomainParticipant ***)&jarg2; 
  if (arg1) (arg1)->pp_domain_participants = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1t_1pp_1domain_1participants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_t *arg1 = (module_t *) 0 ;
  DomainParticipant **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  result = (DomainParticipant **) ((arg1)->pp_domain_participants);
  *(DomainParticipant ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1module_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (module_t *)new module_t();
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1module_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_t *arg1 = (module_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1HASCHOICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0100);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1HASMIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0200);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1HASMAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0400);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1HASSTEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0800);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1ISCOMMAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x2000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1DOINHERIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x8000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VAR_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00ff);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1i_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_int = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1i_1int_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (int) ((arg1)->i_int);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1b_1bool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_bool = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1b_1bool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (bool) ((arg1)->b_bool);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1f_1float_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->f_float = arg2;
}


SWIGEXPORT jfloat JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1f_1float_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (float) ((arg1)->f_float);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1psz_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->psz_string;
    if (arg2) {
      arg1->psz_string = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->psz_string, (const char *)arg2);
    } else {
      arg1->psz_string = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1psz_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (char *) ((arg1)->psz_string);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1p_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->p_address = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1p_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (void *) ((arg1)->p_address);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1p_1object_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  if (arg1) (arg1)->p_object = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1p_1object_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  module_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (module_object_t *) ((arg1)->p_object);
  *(module_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1p_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  module_list_t *arg2 = (module_list_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = *(module_list_t **)&jarg2; 
  if (arg1) (arg1)->p_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1p_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  module_list_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (module_list_t *) ((arg1)->p_list);
  *(module_list_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1i_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  value_t *arg1 = (value_t *) 0 ;
  mtime_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  arg2 = (mtime_t)jarg2; 
  if (arg1) (arg1)->i_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_value_1t_1i_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  value_t *arg1 = (value_t *) 0 ;
  mtime_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(value_t **)&jarg1; 
  result = (mtime_t) ((arg1)->i_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1value_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  value_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (value_t *)new value_t();
  *(value_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1value_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  value_t *arg1 = (value_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(value_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1list_1t_1i_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  module_list_t *arg1 = (module_list_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1list_1t_1i_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_list_t *arg1 = (module_list_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  result = (int) ((arg1)->i_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1list_1t_1p_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  module_list_t *arg1 = (module_list_t *) 0 ;
  value_t *arg2 = (value_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_list_t **)&jarg1; 
  arg2 = *(value_t **)&jarg2; 
  if (arg1) (arg1)->p_values = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1list_1t_1p_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_list_t *arg1 = (module_list_t *) 0 ;
  value_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  result = (value_t *) ((arg1)->p_values);
  *(value_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1list_1t_1pi_1types_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  module_list_t *arg1 = (module_list_t *) 0 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->pi_types = arg2;
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_module_1list_1t_1pi_1types_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jintArray jresult = 0 ;
  module_list_t *arg1 = (module_list_t *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  result = (int *) ((arg1)->pi_types);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1module_1list_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  module_list_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (module_list_t *)new module_list_t();
  *(module_list_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1module_1list_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_list_t *arg1 = (module_list_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)object_create(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  object_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1attach(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  module_object_t *arg2 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(module_object_t **)&jarg2; 
  object_attach(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1detach(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  object_detach(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)object_get(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (void *)object_find(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_current_1object(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  module_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (module_t *)current_object(arg1);
  *(module_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1yield(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  object_yield(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_object_1release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  object_release(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleInitBank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  moduleInitBank(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleInit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)moduleInit(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleCreate(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)moduleCreate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  moduleload_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (moduleload_t *)moduleUse(arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(moduleload_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleUnuse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  moduleload_t *arg2 = (moduleload_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(moduleload_t **)&jarg2; 
  moduleUnuse(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleListFind(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int arg2 ;
  int arg3 ;
  module_list_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (module_list_t *)moduleListFind(arg1,arg2,arg3);
  *(module_list_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleListRelease(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_list_t *arg1 = (module_list_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_list_t **)&jarg1; 
  moduleListRelease(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_moduleEndBank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  moduleEndBank(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_modules_1register(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)modules_register();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_modules_1unregister(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)modules_unregister(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)PAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ACKNACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)ACKNACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HEARTBEAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)HEARTBEAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)GAP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INFO_1TS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)INFO_TS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INFO_1SRC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)INFO_SRC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INFO_1REPLY_1IP4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)INFO_REPLY_IP4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INFO_1DST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)INFO_DST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_INFO_1REPLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)INFO_REPLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NACK_1FRAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)NACK_FRAG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HEARTBEAT_1FRAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)HEARTBEAT_FRAG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DATA_1FRAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SubmessageKind result;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageKind)DATA_FRAG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolId_1t_1_1rtps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  ProtocolId_t *arg1 = (ProtocolId_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolId_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->_rtps, (const char *)arg2, 4-1);
      arg1->_rtps[4-1] = 0;
    } else {
      arg1->_rtps[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolId_1t_1_1rtps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  ProtocolId_t *arg1 = (ProtocolId_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolId_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->_rtps);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ProtocolId_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProtocolId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProtocolId_t *)new ProtocolId_t();
  *(ProtocolId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ProtocolId_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProtocolId_t *arg1 = (ProtocolId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolId_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1protocol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Header *arg1 = (Header *) 0 ;
  ProtocolId_t *arg2 = (ProtocolId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  arg2 = *(ProtocolId_t **)&jarg2; 
  if (arg1) (arg1)->protocol = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1protocol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Header *arg1 = (Header *) 0 ;
  ProtocolId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  result = (ProtocolId_t *)& ((arg1)->protocol);
  *(ProtocolId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Header *arg1 = (Header *) 0 ;
  ProtocolVersion_t *arg2 = (ProtocolVersion_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  arg2 = *(ProtocolVersion_t **)&jarg2; 
  if (arg1) (arg1)->version = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Header *arg1 = (Header *) 0 ;
  ProtocolVersion_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  result = (ProtocolVersion_t *)& ((arg1)->version);
  *(ProtocolVersion_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1vendor_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Header *arg1 = (Header *) 0 ;
  VendorId_t *arg2 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  arg2 = *(VendorId_t **)&jarg2; 
  if (arg1) (arg1)->vendor_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1vendor_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Header *arg1 = (Header *) 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  result = (VendorId_t *)& ((arg1)->vendor_id);
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Header *arg1 = (Header *) 0 ;
  GuidPrefix_t *arg2 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  arg2 = *(GuidPrefix_t **)&jarg2; 
  if (arg1) (arg1)->guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Header_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Header *arg1 = (Header *) 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  result = (GuidPrefix_t *)& ((arg1)->guid_prefix);
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Header *)new Header();
  *(Header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Header *arg1 = (Header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubmessageHeader_1submessage_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  SubmessageKind1 arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  arg2 = (SubmessageKind1)jarg2; 
  if (arg1) (arg1)->submessage_id = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubmessageHeader_1submessage_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  SubmessageKind1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  result = (SubmessageKind1) ((arg1)->submessage_id);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubmessageHeader_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  octet arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  arg2 = (octet)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubmessageHeader_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  octet result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  result = (octet) ((arg1)->flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubmessageHeader_1submessage_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->submessage_length = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SubmessageHeader_1submessage_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  result = (ushort) ((arg1)->submessage_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SubmessageHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SubmessageHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SubmessageHeader *)new SubmessageHeader();
  *(SubmessageHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SubmessageHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SubmessageHeader *arg1 = (SubmessageHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SubmessageHeader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1source_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  ProtocolVersion_t *arg2 = (ProtocolVersion_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(ProtocolVersion_t **)&jarg2; 
  if (arg1) (arg1)->source_version = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1source_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  ProtocolVersion_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (ProtocolVersion_t *)& ((arg1)->source_version);
  *(ProtocolVersion_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1source_1vendor_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  VendorId_t *arg2 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(VendorId_t **)&jarg2; 
  if (arg1) (arg1)->source_vendor_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1source_1vendor_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (VendorId_t *)& ((arg1)->source_vendor_id);
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1source_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  GuidPrefix_t *arg2 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(GuidPrefix_t **)&jarg2; 
  if (arg1) (arg1)->source_guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1source_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (GuidPrefix_t *)& ((arg1)->source_guid_prefix);
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1dest_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  GuidPrefix_t *arg2 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(GuidPrefix_t **)&jarg2; 
  if (arg1) (arg1)->dest_guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1dest_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (GuidPrefix_t *)& ((arg1)->dest_guid_prefix);
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1pp_1unicast_1reply_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_reply_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1pp_1unicast_1reply_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_reply_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1pp_1multicast_1reply_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_reply_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1pp_1multicast_1reply_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_reply_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1have_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  Receiver *arg1 = (Receiver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->have_timestamp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1have_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (bool) ((arg1)->have_timestamp);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Receiver *arg1 = (Receiver *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Receiver **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Receiver_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Receiver *arg1 = (Receiver *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  result = (Time_t *)& ((arg1)->timestamp);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Receiver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Receiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Receiver *)new Receiver();
  *(Receiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Receiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Receiver *arg1 = (Receiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Receiver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuidPrefix_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GuidPrefix *arg1 = (GuidPrefix *) 0 ;
  GuidPrefix_t *arg2 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuidPrefix **)&jarg1; 
  arg2 = *(GuidPrefix_t **)&jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuidPrefix_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GuidPrefix *arg1 = (GuidPrefix *) 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuidPrefix **)&jarg1; 
  result = (GuidPrefix_t *)& ((arg1)->value);
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1GuidPrefix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GuidPrefix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GuidPrefix *)new GuidPrefix();
  *(GuidPrefix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1GuidPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GuidPrefix *arg1 = (GuidPrefix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuidPrefix **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityId_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  EntityId *arg1 = (EntityId *) 0 ;
  EntityId_t *arg2 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId **)&jarg1; 
  arg2 = *(EntityId_t **)&jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityId_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  EntityId *arg1 = (EntityId *) 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId **)&jarg1; 
  result = (EntityId_t *)& ((arg1)->value);
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1EntityId(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId *)new EntityId();
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1EntityId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId *arg1 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Flags_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  Flags *arg1 = (Flags *) 0 ;
  SubmessageFlag arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Flags **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Flags_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  Flags *arg1 = (Flags *) 0 ;
  SubmessageFlag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Flags **)&jarg1; 
  result = (SubmessageFlag) ((arg1)->value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Flags(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Flags *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Flags *)new Flags();
  *(Flags **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Flags *arg1 = (Flags *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Flags **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumber_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SequenceNumber *arg1 = (SequenceNumber *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumber_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SequenceNumber *arg1 = (SequenceNumber *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->value);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SequenceNumber(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SequenceNumber *)new SequenceNumber();
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SequenceNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SequenceNumber *arg1 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumberSet_1bitmap_1base_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->bitmap_base = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumberSet_1bitmap_1base_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->bitmap_base);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumberSet_1numbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numbits = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumberSet_1numbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  result = (uint32_t) ((arg1)->numbits);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumberSet_1bitmap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  uint32_t *arg2 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->bitmap;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumberSet_1bitmap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlongArray jresult = 0 ;
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->bitmap);
  jresult = SWIG_JavaArrayOutUint(jenv, (unsigned int *)result, 8); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SequenceNumberSet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SequenceNumberSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SequenceNumberSet *)new SequenceNumberSet();
  *(SequenceNumberSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SequenceNumberSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SequenceNumberSet *arg1 = (SequenceNumberSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumberSet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayload_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SerializedPayload *arg1 = (SerializedPayload *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayload **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayload_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SerializedPayload *arg1 = (SerializedPayload *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayload **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SerializedPayload(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SerializedPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SerializedPayload *)new SerializedPayload();
  *(SerializedPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SerializedPayload(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SerializedPayload *arg1 = (SerializedPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayload **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForWriter_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForWriter_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForWriter_1i_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->i_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForWriter_1i_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  result = (uint16_t) ((arg1)->i_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForWriter_1entity_1key_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->entity_key_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForWriter_1entity_1key_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  result = (GUID_t *)& ((arg1)->entity_key_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SerializedPayloadForWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SerializedPayloadForWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SerializedPayloadForWriter *)new SerializedPayloadForWriter();
  *(SerializedPayloadForWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SerializedPayloadForWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SerializedPayloadForWriter *arg1 = (SerializedPayloadForWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForReader_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForReader_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForReader_1i_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->i_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForReader_1i_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  result = (uint16_t) ((arg1)->i_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForReader_1entity_1key_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->entity_key_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadForReader_1entity_1key_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  result = (GUID_t *)& ((arg1)->entity_key_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SerializedPayloadForReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SerializedPayloadForReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SerializedPayloadForReader *)new SerializedPayloadForReader();
  *(SerializedPayloadForReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SerializedPayloadForReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SerializedPayloadForReader *arg1 = (SerializedPayloadForReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadForReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadFragment_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SerializedPayloadFragment *arg1 = (SerializedPayloadFragment *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadFragment **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SerializedPayloadFragment_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SerializedPayloadFragment *arg1 = (SerializedPayloadFragment *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadFragment **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SerializedPayloadFragment(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SerializedPayloadFragment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SerializedPayloadFragment *)new SerializedPayloadFragment();
  *(SerializedPayloadFragment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SerializedPayloadFragment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SerializedPayloadFragment *arg1 = (SerializedPayloadFragment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SerializedPayloadFragment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Timestamp_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Timestamp *arg1 = (Timestamp *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Timestamp **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Timestamp_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Timestamp *arg1 = (Timestamp *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Timestamp **)&jarg1; 
  result = (Time_t *)& ((arg1)->value);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Timestamp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Timestamp *)new Timestamp();
  *(Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Timestamp *arg1 = (Timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Timestamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Count_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Count *arg1 = (Count *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Count **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Count_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Count *arg1 = (Count *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Count **)&jarg1; 
  result = (Count_t) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Count(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Count *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Count *)new Count();
  *(Count **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Count(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Count *arg1 = (Count *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Count **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VendorId_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  VendorId *arg1 = (VendorId *) 0 ;
  VendorId_t *arg2 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId **)&jarg1; 
  arg2 = *(VendorId_t **)&jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VendorId_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  VendorId *arg1 = (VendorId *) 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId **)&jarg1; 
  result = (VendorId_t *)& ((arg1)->value);
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1VendorId(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VendorId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VendorId *)new VendorId();
  *(VendorId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1VendorId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VendorId *arg1 = (VendorId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolVersion_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ProtocolVersion *arg1 = (ProtocolVersion *) 0 ;
  ProtocolVersion_t *arg2 = (ProtocolVersion_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion **)&jarg1; 
  arg2 = *(ProtocolVersion_t **)&jarg2; 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolVersion_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ProtocolVersion *arg1 = (ProtocolVersion *) 0 ;
  ProtocolVersion_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion **)&jarg1; 
  result = (ProtocolVersion_t *)& ((arg1)->value);
  *(ProtocolVersion_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ProtocolVersion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProtocolVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProtocolVersion *)new ProtocolVersion();
  *(ProtocolVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ProtocolVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProtocolVersion *arg1 = (ProtocolVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LocatorList_1pp_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  LocatorList *arg1 = (LocatorList *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LocatorList **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LocatorList_1pp_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LocatorList *arg1 = (LocatorList *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LocatorList **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_value);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LocatorList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LocatorList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LocatorList *)new LocatorList();
  *(LocatorList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LocatorList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LocatorList *arg1 = (LocatorList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LocatorList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterList_1pp_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ParameterList *arg1 = (ParameterList *) 0 ;
  ParameterWithValue **arg2 = (ParameterWithValue **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterList **)&jarg1; 
  arg2 = *(ParameterWithValue ***)&jarg2; 
  if (arg1) (arg1)->pp_parameters = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterList_1pp_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ParameterList *arg1 = (ParameterList *) 0 ;
  ParameterWithValue **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterList **)&jarg1; 
  result = (ParameterWithValue **) ((arg1)->pp_parameters);
  *(ParameterWithValue ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterList_1i_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  ParameterList *arg1 = (ParameterList *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterList **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_parameters = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterList_1i_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ParameterList *arg1 = (ParameterList *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterList **)&jarg1; 
  result = (int32_t) ((arg1)->i_parameters);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ParameterList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ParameterList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ParameterList *)new ParameterList();
  *(ParameterList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ParameterList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ParameterList *arg1 = (ParameterList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Parameter_1parameter_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  Parameter *arg1 = (Parameter *) 0 ;
  ParameterId_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parameter **)&jarg1; 
  arg2 = (ParameterId_t)jarg2; 
  if (arg1) (arg1)->parameter_id = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Parameter_1parameter_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  ParameterId_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parameter **)&jarg1; 
  result = (ParameterId_t) ((arg1)->parameter_id);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Parameter_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Parameter *arg1 = (Parameter *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parameter **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Parameter_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Parameter *arg1 = (Parameter *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parameter **)&jarg1; 
  result = (uint16_t) ((arg1)->length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Parameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Parameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Parameter *)new Parameter();
  *(Parameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Parameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Parameter *arg1 = (Parameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterWithValue_1parameter_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  ParameterId_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  arg2 = (ParameterId_t)jarg2; 
  if (arg1) (arg1)->parameter_id = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterWithValue_1parameter_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  ParameterId_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  result = (ParameterId_t) ((arg1)->parameter_id);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterWithValue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterWithValue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  result = (uint16_t) ((arg1)->length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterWithValue_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->p_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParameterWithValue_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  result = (uint8_t *) ((arg1)->p_value);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ParameterWithValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ParameterWithValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ParameterWithValue *)new ParameterWithValue();
  *(ParameterWithValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ParameterWithValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ParameterWithValue *arg1 = (ParameterWithValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParameterWithValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FragmentNumber_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  FragmentNumber *arg1 = (FragmentNumber *) 0 ;
  FragmentNumber_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumber **)&jarg1; 
  arg2 = (FragmentNumber_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FragmentNumber_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FragmentNumber *arg1 = (FragmentNumber *) 0 ;
  FragmentNumber_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumber **)&jarg1; 
  result = (FragmentNumber_t) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1FragmentNumber(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FragmentNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FragmentNumber *)new FragmentNumber();
  *(FragmentNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1FragmentNumber(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FragmentNumber *arg1 = (FragmentNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumber **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FragmentNumberSet_1base_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  FragmentNumberSet *arg1 = (FragmentNumberSet *) 0 ;
  FragmentNumber_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumberSet **)&jarg1; 
  arg2 = (FragmentNumber_t)jarg2; 
  if (arg1) (arg1)->base = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FragmentNumberSet_1base_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FragmentNumberSet *arg1 = (FragmentNumberSet *) 0 ;
  FragmentNumber_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumberSet **)&jarg1; 
  result = (FragmentNumber_t) ((arg1)->base);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FragmentNumberSet_1pp_1set_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FragmentNumberSet *arg1 = (FragmentNumberSet *) 0 ;
  FragmentNumber_t **arg2 = (FragmentNumber_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumberSet **)&jarg1; 
  arg2 = *(FragmentNumber_t ***)&jarg2; 
  if (arg1) (arg1)->pp_set = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FragmentNumberSet_1pp_1set_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FragmentNumberSet *arg1 = (FragmentNumberSet *) 0 ;
  FragmentNumber_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumberSet **)&jarg1; 
  result = (FragmentNumber_t **) ((arg1)->pp_set);
  *(FragmentNumber_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1FragmentNumberSet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FragmentNumberSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FragmentNumberSet *)new FragmentNumberSet();
  *(FragmentNumberSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1FragmentNumberSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FragmentNumberSet *arg1 = (FragmentNumberSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FragmentNumberSet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1extra_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Data *arg1 = (Data *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->extra_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1extra_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Data *arg1 = (Data *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  result = (uint16_t) ((arg1)->extra_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1octets_1to_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  Data *arg1 = (Data *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->octets_to_inline_qos = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1octets_1to_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  Data *arg1 = (Data *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  result = (short) ((arg1)->octets_to_inline_qos);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Data *arg1 = (Data *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Data *arg1 = (Data *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Data *arg1 = (Data *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Data *arg1 = (Data *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Data *arg1 = (Data *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Data_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Data *arg1 = (Data *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Data(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Data *)new Data();
  *(Data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Data *arg1 = (Data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1extra_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->extra_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1extra_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (uint16_t) ((arg1)->extra_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1octets_1to_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->octets_to_inline_qos = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1octets_1to_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (short) ((arg1)->octets_to_inline_qos);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  ParameterList *arg2 = (ParameterList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = *(ParameterList **)&jarg2; 
  if (arg1) (arg1)->inline_qos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  ParameterList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (ParameterList *)& ((arg1)->inline_qos);
  *(ParameterList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1p_1serialized_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  SerializedPayload *arg2 = (SerializedPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = *(SerializedPayload **)&jarg2; 
  if (arg1) (arg1)->p_serialized_data = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFull_1p_1serialized_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  SerializedPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (SerializedPayload *) ((arg1)->p_serialized_data);
  *(SerializedPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataFull(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataFull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataFull *)new DataFull();
  *(DataFull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataFull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFull *arg1 = (DataFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1extra_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->extra_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1extra_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (uint16_t) ((arg1)->extra_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1octets_1to_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->octets_to_inline_qos = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1octets_1to_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (short) ((arg1)->octets_to_inline_qos);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  ParameterList *arg2 = (ParameterList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = *(ParameterList **)&jarg2; 
  if (arg1) (arg1)->inline_qos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  ParameterList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (ParameterList *)& ((arg1)->inline_qos);
  *(ParameterList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  ParameterList *arg2 = (ParameterList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  arg2 = *(ParameterList **)&jarg2; 
  if (arg1) (arg1)->list = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFullList_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataFullList *arg1 = (DataFullList *) 0 ;
  ParameterList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataFullList **)&jarg1; 
  result = (ParameterList *)& ((arg1)->list);
  *(ParameterList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataFullList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataFullList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataFullList *)new DataFullList();
  *(DataFullList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataFullList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFullList *arg1 = (DataFullList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFullList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1extra_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->extra_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1extra_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (uint16_t) ((arg1)->extra_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1octets_1to_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->octets_to_inline_qos = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1octets_1to_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (short) ((arg1)->octets_to_inline_qos);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1fragment_1starting_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  FragmentNumber *arg2 = (FragmentNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = *(FragmentNumber **)&jarg2; 
  if (arg1) (arg1)->fragment_starting_num = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1fragment_1starting_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  FragmentNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (FragmentNumber *)& ((arg1)->fragment_starting_num);
  *(FragmentNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1fragments_1in_1submessage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->fragments_in_submessage = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1fragments_1in_1submessage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (ushort) ((arg1)->fragments_in_submessage);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1fragment_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->fragment_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1fragment_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (ushort) ((arg1)->fragment_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1data_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->data_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFrag_1data_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFrag *arg1 = (DataFrag *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  result = (uint32_t) ((arg1)->data_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataFrag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataFrag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataFrag *)new DataFrag();
  *(DataFrag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataFrag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFrag *arg1 = (DataFrag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFrag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1extra_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->extra_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1extra_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (uint16_t) ((arg1)->extra_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1octets_1to_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->octets_to_inline_qos = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1octets_1to_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (short) ((arg1)->octets_to_inline_qos);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1fragment_1starting_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  FragmentNumber *arg2 = (FragmentNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = *(FragmentNumber **)&jarg2; 
  if (arg1) (arg1)->fragment_starting_num = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1fragment_1starting_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  FragmentNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (FragmentNumber *)& ((arg1)->fragment_starting_num);
  *(FragmentNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1fragments_1in_1submessage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->fragments_in_submessage = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1fragments_1in_1submessage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (ushort) ((arg1)->fragments_in_submessage);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1fragment_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = (ushort)jarg2; 
  if (arg1) (arg1)->fragment_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1fragment_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  ushort result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (ushort) ((arg1)->fragment_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1data_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->data_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1data_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (uint32_t) ((arg1)->data_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  ParameterList *arg2 = (ParameterList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = *(ParameterList **)&jarg2; 
  if (arg1) (arg1)->inline_qos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  ParameterList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (ParameterList *)& ((arg1)->inline_qos);
  *(ParameterList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1p_1serialized_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  SerializedPayload *arg2 = (SerializedPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  arg2 = *(SerializedPayload **)&jarg2; 
  if (arg1) (arg1)->p_serialized_data = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DataFragFull_1p_1serialized_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  SerializedPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  result = (SerializedPayload *) ((arg1)->p_serialized_data);
  *(SerializedPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1DataFragFull(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataFragFull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataFragFull *)new DataFragFull();
  *(DataFragFull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1DataFragFull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Gap *arg1 = (Gap *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Gap *arg1 = (Gap *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Gap *arg1 = (Gap *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Gap *arg1 = (Gap *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1gap_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Gap *arg1 = (Gap *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->gap_start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1gap_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Gap *arg1 = (Gap *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->gap_start);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1gap_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Gap *arg1 = (Gap *) 0 ;
  SequenceNumberSet *arg2 = (SequenceNumberSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  arg2 = *(SequenceNumberSet **)&jarg2; 
  if (arg1) (arg1)->gap_list = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Gap_1gap_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Gap *arg1 = (Gap *) 0 ;
  SequenceNumberSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  result = (SequenceNumberSet *)& ((arg1)->gap_list);
  *(SequenceNumberSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Gap(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Gap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Gap *)new Gap();
  *(Gap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Gap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Gap *arg1 = (Gap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Gap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1first_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->first_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1first_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->first_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1last_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->last_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1last_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->last_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  Count *arg2 = (Count *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  arg2 = *(Count **)&jarg2; 
  if (arg1) (arg1)->count = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Heartbeat_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  Count *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  result = (Count *)& ((arg1)->count);
  *(Count **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Heartbeat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Heartbeat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Heartbeat *)new Heartbeat();
  *(Heartbeat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Heartbeat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Heartbeat *arg1 = (Heartbeat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Heartbeat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  AckNack *arg1 = (AckNack *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  AckNack *arg1 = (AckNack *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  AckNack *arg1 = (AckNack *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  AckNack *arg1 = (AckNack *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1reader_1sn_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  AckNack *arg1 = (AckNack *) 0 ;
  SequenceNumberSet *arg2 = (SequenceNumberSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  arg2 = *(SequenceNumberSet **)&jarg2; 
  if (arg1) (arg1)->reader_sn_state = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1reader_1sn_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  AckNack *arg1 = (AckNack *) 0 ;
  SequenceNumberSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  result = (SequenceNumberSet *)& ((arg1)->reader_sn_state);
  *(SequenceNumberSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  AckNack *arg1 = (AckNack *) 0 ;
  Count *arg2 = (Count *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  arg2 = *(Count **)&jarg2; 
  if (arg1) (arg1)->count = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_AckNack_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  AckNack *arg1 = (AckNack *) 0 ;
  Count *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  result = (Count *)& ((arg1)->count);
  *(Count **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1AckNack(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AckNack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AckNack *)new AckNack();
  *(AckNack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1AckNack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AckNack *arg1 = (AckNack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AckNack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1last_1fragment_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  FragmentNumber *arg2 = (FragmentNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  arg2 = *(FragmentNumber **)&jarg2; 
  if (arg1) (arg1)->last_fragment_num = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1last_1fragment_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  FragmentNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  result = (FragmentNumber *)& ((arg1)->last_fragment_num);
  *(FragmentNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  Count *arg2 = (Count *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  arg2 = *(Count **)&jarg2; 
  if (arg1) (arg1)->count = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HeartbeatFrag_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  Count *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  result = (Count *)& ((arg1)->count);
  *(Count **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1HeartbeatFrag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HeartbeatFrag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (HeartbeatFrag *)new HeartbeatFrag();
  *(HeartbeatFrag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1HeartbeatFrag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HeartbeatFrag *arg1 = (HeartbeatFrag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeartbeatFrag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1reader_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  NackFrag *arg1 = (NackFrag *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->reader_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1reader_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NackFrag *arg1 = (NackFrag *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  result = (EntityId *)& ((arg1)->reader_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1writer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  NackFrag *arg1 = (NackFrag *) 0 ;
  EntityId *arg2 = (EntityId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  arg2 = *(EntityId **)&jarg2; 
  if (arg1) (arg1)->writer_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1writer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NackFrag *arg1 = (NackFrag *) 0 ;
  EntityId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  result = (EntityId *)& ((arg1)->writer_id);
  *(EntityId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  NackFrag *arg1 = (NackFrag *) 0 ;
  SequenceNumber *arg2 = (SequenceNumber *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  arg2 = *(SequenceNumber **)&jarg2; 
  if (arg1) (arg1)->writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NackFrag *arg1 = (NackFrag *) 0 ;
  SequenceNumber *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  result = (SequenceNumber *)& ((arg1)->writer_sn);
  *(SequenceNumber **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1fragment_1number_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  NackFrag *arg1 = (NackFrag *) 0 ;
  SequenceNumberSet *arg2 = (SequenceNumberSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  arg2 = *(SequenceNumberSet **)&jarg2; 
  if (arg1) (arg1)->fragment_number_state = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1fragment_1number_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NackFrag *arg1 = (NackFrag *) 0 ;
  SequenceNumberSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  result = (SequenceNumberSet *)& ((arg1)->fragment_number_state);
  *(SequenceNumberSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  NackFrag *arg1 = (NackFrag *) 0 ;
  Count *arg2 = (Count *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  arg2 = *(Count **)&jarg2; 
  if (arg1) (arg1)->count = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NackFrag_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  NackFrag *arg1 = (NackFrag *) 0 ;
  Count *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  result = (Count *)& ((arg1)->count);
  *(Count **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1NackFrag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NackFrag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NackFrag *)new NackFrag();
  *(NackFrag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1NackFrag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NackFrag *arg1 = (NackFrag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NackFrag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Pad_1umm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Pad *arg1 = (Pad *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Pad **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->umm = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Pad_1umm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Pad *arg1 = (Pad *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Pad **)&jarg1; 
  result = (int) ((arg1)->umm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Pad(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Pad *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Pad *)new Pad();
  *(Pad **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Pad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Pad *arg1 = (Pad *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Pad **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoTimestamp_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoTimestamp *arg1 = (InfoTimestamp *) 0 ;
  Timestamp *arg2 = (Timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoTimestamp **)&jarg1; 
  arg2 = *(Timestamp **)&jarg2; 
  if (arg1) (arg1)->timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoTimestamp_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoTimestamp *arg1 = (InfoTimestamp *) 0 ;
  Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoTimestamp **)&jarg1; 
  result = (Timestamp *)& ((arg1)->timestamp);
  *(Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1InfoTimestamp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InfoTimestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InfoTimestamp *)new InfoTimestamp();
  *(InfoTimestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1InfoTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InfoTimestamp *arg1 = (InfoTimestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoTimestamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoReply_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoReply *arg1 = (InfoReply *) 0 ;
  LocatorList *arg2 = (LocatorList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoReply **)&jarg1; 
  arg2 = *(LocatorList **)&jarg2; 
  if (arg1) (arg1)->multicast_locator_list = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoReply_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoReply *arg1 = (InfoReply *) 0 ;
  LocatorList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoReply **)&jarg1; 
  result = (LocatorList *)& ((arg1)->multicast_locator_list);
  *(LocatorList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoReply_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoReply *arg1 = (InfoReply *) 0 ;
  LocatorList *arg2 = (LocatorList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoReply **)&jarg1; 
  arg2 = *(LocatorList **)&jarg2; 
  if (arg1) (arg1)->unicast_locator_list = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoReply_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoReply *arg1 = (InfoReply *) 0 ;
  LocatorList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoReply **)&jarg1; 
  result = (LocatorList *)& ((arg1)->unicast_locator_list);
  *(LocatorList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1InfoReply(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InfoReply *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InfoReply *)new InfoReply();
  *(InfoReply **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1InfoReply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InfoReply *arg1 = (InfoReply *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoReply **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoDestination_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoDestination *arg1 = (InfoDestination *) 0 ;
  GuidPrefix *arg2 = (GuidPrefix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoDestination **)&jarg1; 
  arg2 = *(GuidPrefix **)&jarg2; 
  if (arg1) (arg1)->guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoDestination_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoDestination *arg1 = (InfoDestination *) 0 ;
  GuidPrefix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoDestination **)&jarg1; 
  result = (GuidPrefix *)& ((arg1)->guid_prefix);
  *(GuidPrefix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1InfoDestination(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InfoDestination *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InfoDestination *)new InfoDestination();
  *(InfoDestination **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1InfoDestination(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InfoDestination *arg1 = (InfoDestination *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoDestination **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoSource_1protocol_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoSource *arg1 = (InfoSource *) 0 ;
  ProtocolVersion *arg2 = (ProtocolVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  arg2 = *(ProtocolVersion **)&jarg2; 
  if (arg1) (arg1)->protocol_version = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoSource_1protocol_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoSource *arg1 = (InfoSource *) 0 ;
  ProtocolVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  result = (ProtocolVersion *)& ((arg1)->protocol_version);
  *(ProtocolVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoSource_1vendor_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoSource *arg1 = (InfoSource *) 0 ;
  VendorId *arg2 = (VendorId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  arg2 = *(VendorId **)&jarg2; 
  if (arg1) (arg1)->vendor_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoSource_1vendor_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoSource *arg1 = (InfoSource *) 0 ;
  VendorId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  result = (VendorId *)& ((arg1)->vendor_id);
  *(VendorId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoSource_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  InfoSource *arg1 = (InfoSource *) 0 ;
  GuidPrefix *arg2 = (GuidPrefix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  arg2 = *(GuidPrefix **)&jarg2; 
  if (arg1) (arg1)->guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_InfoSource_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  InfoSource *arg1 = (InfoSource *) 0 ;
  GuidPrefix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  result = (GuidPrefix *)& ((arg1)->guid_prefix);
  *(GuidPrefix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1InfoSource(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InfoSource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InfoSource *)new InfoSource();
  *(InfoSource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1InfoSource(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InfoSource *arg1 = (InfoSource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(InfoSource **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1DATAFRAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1GAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1HEARTBEAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1ACKNACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1HEARTBEATFRAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1NACKFRAG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1PAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1INFOTIMESTAMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1INFOREPLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1INFODESTINATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1INFOSOURCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_FOUND_1INFOREPLY_1IP4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VendorId_1t_1vendor_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2) {
  VendorId_t *arg1 = (VendorId_t *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->vendor_id;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VendorId_1t_1vendor_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshortArray jresult = 0 ;
  VendorId_t *arg1 = (VendorId_t *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId_t **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->vendor_id);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 2); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1VendorId_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VendorId_t *)new VendorId_t();
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1VendorId_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VendorId_t *arg1 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VENDORID_1UNKNOWN_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VendorId_t *arg1 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId_t **)&jarg1; 
  VENDORID_UNKNOWN = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VENDORID_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VendorId_t *)&VENDORID_UNKNOWN;
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VENDORID_1ETRI_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VendorId_t *arg1 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VendorId_t **)&jarg1; 
  VENDORID_ETRI = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_VENDORID_1ETRI_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VendorId_t *)&VENDORID_ETRI;
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LOCATOR_1KIND_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LOCATOR_1PORT_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LOCATOR_1KIND_1RESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LOCATOR_1KIND_1UDPv4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LOCATOR_1KIND_1UDPv6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_NO_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_WITH_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BEST_1EFFORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RELIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PARTICIPANT_1ANNOUNCER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PARTICIPANT_1DETECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PUBLICATION_1ANNOUNCER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PUBLICATION_1DETECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1SUBSCRIPTION_1ANNOUNCER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1SUBSCRIPTION_1DETECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PARTICIPANT_1PROXY_1ANNOUNCER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PARTICIPANT_1PROXY_1DETECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PARTICIPANT_1STATE_1ANNOUNCER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DISC_1BUILTIN_1ENDPOINT_1PARTICIPANT_1STATE_1DETECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BUILTIN_1ENDPOINT_1PARTICIPANT_1MESSAGE_1DATA_1WRITER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_BUILTIN_1ENDPOINT_1PARTICIPANT_1MESSAGE_1DATA_1READER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00000001 << 11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1UNKNOWN_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) strcpy((char *)PARTICIPANT_MESSAGE_DATA_KIND_UNKNOWN, (const char *)arg1);
    else PARTICIPANT_MESSAGE_DATA_KIND_UNKNOWN[0] = 0;
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)PARTICIPANT_MESSAGE_DATA_KIND_UNKNOWN;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1AUTOMATIC_1LIVELINESS_1UPDATE_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) strcpy((char *)PARTICIPANT_MESSAGE_DATA_KIND_AUTOMATIC_LIVELINESS_UPDATE, (const char *)arg1);
    else PARTICIPANT_MESSAGE_DATA_KIND_AUTOMATIC_LIVELINESS_UPDATE[0] = 0;
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1AUTOMATIC_1LIVELINESS_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)PARTICIPANT_MESSAGE_DATA_KIND_AUTOMATIC_LIVELINESS_UPDATE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1AUTOMATIC_1LIVELINESS_1UPDATE_1FOR_1TEST_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) strcpy((char *)PARTICIPANT_MESSAGE_DATA_KIND_AUTOMATIC_LIVELINESS_UPDATE_FOR_TEST, (const char *)arg1);
    else PARTICIPANT_MESSAGE_DATA_KIND_AUTOMATIC_LIVELINESS_UPDATE_FOR_TEST[0] = 0;
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1AUTOMATIC_1LIVELINESS_1UPDATE_1FOR_1TEST_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)PARTICIPANT_MESSAGE_DATA_KIND_AUTOMATIC_LIVELINESS_UPDATE_FOR_TEST;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1MANUAL_1LIVELINESS_1UPDATE_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) strcpy((char *)PARTICIPANT_MESSAGE_DATA_KIND_MANUAL_LIVELINESS_UPDATE, (const char *)arg1);
    else PARTICIPANT_MESSAGE_DATA_KIND_MANUAL_LIVELINESS_UPDATE[0] = 0;
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PARTICIPANT_1MESSAGE_1DATA_1KIND_1MANUAL_1LIVELINESS_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)PARTICIPANT_MESSAGE_DATA_KIND_MANUAL_LIVELINESS_UPDATE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1SENTINEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1USER_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x002c);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TOPIC_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0005);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TYPE_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0007);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1GROUP_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x002d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TOPIC_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x002e);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DURABILITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x001d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DURABILITY_1SERVICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x001e);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DEADINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0023);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1LATENCY_1BUDGET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0027);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1LIVELINESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x001b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1RELIABILITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x001a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1LIFESPAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x002b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DESTINATION_1ORDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0025);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1HISTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0040);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1RESOURCE_1LIMITS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0041);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1OWNERSHIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x001f);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1OWNERSHIP_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0006);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PRESENTATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0021);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PARTITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0029);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TIME_1BASED_1FILTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TRANSPORT_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0049);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PROTOCOL_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0015);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1VENDORID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0016);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1UNICAST_1LOCATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x002f);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1MULTICAST_1LOCATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0030);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1MULTICAST_1IPADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0011);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DEFAULT_1UNICAST_1LOCATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0031);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DEFAULT_1MULTICAST_1LOCATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0048);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1METATRAFFIC_1UNICAST_1LOCATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0032);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1METATRAFFIC_1MULTICAST_1LOCATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0033);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DEFAULT_1UNICAST_1IPADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000c);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1DEFAULT_1UNICAST_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000e);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1METATRAFFIC_1UNICAST_1IPADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0045);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1METATRAFFIC_1UNICAST_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1METATRAFFIC_1MULTICAST_1IPADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1METATRAFFIC_1MULTICAST_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0046);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1EXPECTS_1INLINE_1QOS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0043);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PARTICIPANT_1MANUAL_1LIVENESS_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0034);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PARTICIPANT_1BUILTIN_1ENDPOINTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0044);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PARTICIPANT_1LEASE_1DURATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1CONTENT_1FILTER_1PROPERTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0035);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PARTICIPANT_1GUID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0050);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PARTICIPANT_1ENTITYID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0051);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1GROUP_1GUID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0052);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1GROUP_1ENTITYID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0053);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1COHERENT_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0056);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1BUILTIN_1ENDPOINT_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0058);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PROPERTY_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0059);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TYPE_1MAX_1SIZE_1SERIALIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0060);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1ENTITY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0062);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1KEY_1HASH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0070);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1STATUS_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0071);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PERSISTENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TYPE_1CHECKSUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0008);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TYPE2_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0009);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1TYPE2_1CHECKSUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1EXPECTS_1ACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0010);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1MANAGER_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0012);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1SEND_1QUEUE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0013);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1RELIABILITY_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0014);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1VARGAPPS_1SEQUENCE_1NUMBER_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0017);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1RECV_1QUEUE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0018);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1RELIABILITY_1OFFERED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0019);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1PRODUCT_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x8000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PID_1ENDPOINT_1GUID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x005a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_CDR_1BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_CDR_1LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PL_1CDR_1BE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_PL_1CDR_1LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1UNKNOWN_1USER_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1WRITER_1WITH_1KEY_1USER_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x02);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1WRITER_1NO_1KEY_1USER_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x03);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1READER_1WITH_1KEY_1USER_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x07);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1READER_1NO_1KEY_1USER_1DEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x04);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1UNKNOWN_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xc0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1PARTICIPANT_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xc1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1WRITER_1WITH_1KEY_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xc2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1WRITER_1NO_1KEY_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xc3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1READER_1WITH_1KEY_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xc4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KIND_1OF_1ENTITY_1READER_1NO_1KEY_1BUILTIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xc7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityId_1t_1entity_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->entity_key;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityId_1t_1entity_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshortArray jresult = 0 ;
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->entity_key);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 3); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityId_1t_1entity_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  octet arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  arg2 = (octet)jarg2; 
  if (arg1) (arg1)->entity_kind = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityId_1t_1entity_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  octet result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  result = (octet) ((arg1)->entity_kind);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1EntityId_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)new EntityId_t();
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1EntityId_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1PARTICIPANT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_PARTICIPANT = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1PARTICIPANT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_PARTICIPANT;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1TOPIC_1WRITER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SEDP_BUILTIN_TOPIC_WRITER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1TOPIC_1WRITER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SEDP_BUILTIN_TOPIC_WRITER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1TOPIC_1READER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SEDP_BUILTIN_TOPIC_READER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1TOPIC_1READER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SEDP_BUILTIN_TOPIC_READER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1PUBLICATIONS_1WRITER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1PUBLICATIONS_1WRITER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1PUBLICATIONS_1READER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1PUBLICATIONS_1READER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1SUBSCRIPTIONS_1WRITER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1SUBSCRIPTIONS_1WRITER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1SUBSCRIPTIONS_1READER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SEDP_1BUILTIN_1SUBSCRIPTIONS_1READER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SPDP_1BUILTIN_1PARTICIPANT_1WRITER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SPDP_BUILTIN_PARTICIPANT_WRITER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SPDP_1BUILTIN_1PARTICIPANT_1WRITER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SPDP_BUILTIN_PARTICIPANT_WRITER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SPDP_1BUILTIN_1PARTICIPANT_1READER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1SPDP_1BUILTIN_1PARTICIPANT_1READER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1P2P_1BUILTIN_1PARTICIPANT_1MESSAGE_1WRITER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_P2P_BUILTIN_PARTICIPANT_MESSAGE_WRITER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1P2P_1BUILTIN_1PARTICIPANT_1MESSAGE_1WRITER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_P2P_BUILTIN_PARTICIPANT_MESSAGE_WRITER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1P2P_1BUILTIN_1PARTICIPANT_1MESSAGE_1READER_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_P2P_BUILTIN_PARTICIPANT_MESSAGE_READER = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1P2P_1BUILTIN_1PARTICIPANT_1MESSAGE_1READER_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_P2P_BUILTIN_PARTICIPANT_MESSAGE_READER;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KeyHash_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  KeyHash_t *arg1 = (KeyHash_t *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KeyHash_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->value;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_KeyHash_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  KeyHash_t *arg1 = (KeyHash_t *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KeyHash_t **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->value);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 16); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1KeyHash_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  KeyHash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (KeyHash_t *)new KeyHash_t();
  *(KeyHash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1KeyHash_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  KeyHash_t *arg1 = (KeyHash_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KeyHash_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusInfo_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  StatusInfo_t *arg1 = (StatusInfo_t *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StatusInfo_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->value;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_StatusInfo_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  StatusInfo_t *arg1 = (StatusInfo_t *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StatusInfo_t **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->value);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 4); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1StatusInfo_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StatusInfo_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StatusInfo_t *)new StatusInfo_t();
  *(StatusInfo_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1StatusInfo_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StatusInfo_t *arg1 = (StatusInfo_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StatusInfo_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeWithShortKey_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TypeWithShortKey *arg1 = (TypeWithShortKey *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeWithShortKey **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeWithShortKey_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TypeWithShortKey *arg1 = (TypeWithShortKey *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeWithShortKey **)&jarg1; 
  result = (int32_t) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeWithShortKey_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TypeWithShortKey *arg1 = (TypeWithShortKey *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeWithShortKey **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 6-1);
      arg1->name[6-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_TypeWithShortKey_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TypeWithShortKey *arg1 = (TypeWithShortKey *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TypeWithShortKey **)&jarg1; 
  result = (char *)(char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1TypeWithShortKey(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TypeWithShortKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TypeWithShortKey *)new TypeWithShortKey();
  *(TypeWithShortKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1TypeWithShortKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TypeWithShortKey *arg1 = (TypeWithShortKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TypeWithShortKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuidPrefix_1t_1_1guidprefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2) {
  GuidPrefix_t *arg1 = (GuidPrefix_t *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuidPrefix_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->_guidprefix;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GuidPrefix_1t_1_1guidprefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshortArray jresult = 0 ;
  GuidPrefix_t *arg1 = (GuidPrefix_t *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuidPrefix_t **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->_guidprefix);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 12); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1GuidPrefix_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GuidPrefix_t *)new GuidPrefix_t();
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1GuidPrefix_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GuidPrefix_t *arg1 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GuidPrefix_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GUID_1t_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GUID_t *arg1 = (GUID_t *) 0 ;
  GuidPrefix_t *arg2 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID_t **)&jarg1; 
  arg2 = *(GuidPrefix_t **)&jarg2; 
  if (arg1) (arg1)->guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GUID_1t_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t *arg1 = (GUID_t *) 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID_t **)&jarg1; 
  result = (GuidPrefix_t *)& ((arg1)->guid_prefix);
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GUID_1t_1entity_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  GUID_t *arg1 = (GUID_t *) 0 ;
  EntityId_t *arg2 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID_t **)&jarg1; 
  arg2 = *(EntityId_t **)&jarg2; 
  if (arg1) (arg1)->entity_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GUID_1t_1entity_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t *arg1 = (GUID_t *) 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID_t **)&jarg1; 
  result = (EntityId_t *)& ((arg1)->entity_id);
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1GUID_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GUID_t *)new GUID_t();
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1GUID_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GUID_t *arg1 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1UNKNOWN_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityId_t *arg1 = (EntityId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityId_t **)&jarg1; 
  ENTITYID_UNKNOWN = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ENTITYID_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityId_t *)&ENTITYID_UNKNOWN;
  *(EntityId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GUID_1UNKNOWN_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GUID_t *arg1 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID_t **)&jarg1; 
  GUID_UNKNOWN = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_GUID_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GUID_t *)&GUID_UNKNOWN;
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Locator_1t_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Locator_t *arg1 = (Locator_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Locator_1t_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  Locator_t *arg1 = (Locator_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  result = (int32_t) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Locator_1t_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Locator_t *arg1 = (Locator_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Locator_1t_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Locator_t *arg1 = (Locator_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  result = (uint32_t) ((arg1)->port);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Locator_1t_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2) {
  Locator_t *arg1 = (Locator_t *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->address;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Locator_1t_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshortArray jresult = 0 ;
  Locator_t *arg1 = (Locator_t *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->address);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 16); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Locator_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Locator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Locator_t *)new Locator_t();
  *(Locator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Locator_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Locator_t *arg1 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Locator_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolVersion_1t_1major_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  ProtocolVersion_t *arg1 = (ProtocolVersion_t *) 0 ;
  octet arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion_t **)&jarg1; 
  arg2 = (octet)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolVersion_1t_1major_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  ProtocolVersion_t *arg1 = (ProtocolVersion_t *) 0 ;
  octet result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion_t **)&jarg1; 
  result = (octet) ((arg1)->major);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolVersion_1t_1minor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  ProtocolVersion_t *arg1 = (ProtocolVersion_t *) 0 ;
  octet arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion_t **)&jarg1; 
  arg2 = (octet)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ProtocolVersion_1t_1minor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  ProtocolVersion_t *arg1 = (ProtocolVersion_t *) 0 ;
  octet result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion_t **)&jarg1; 
  result = (octet) ((arg1)->minor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ProtocolVersion_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProtocolVersion_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProtocolVersion_t *)new ProtocolVersion_t();
  *(ProtocolVersion_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ProtocolVersion_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProtocolVersion_t *arg1 = (ProtocolVersion_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProtocolVersion_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumber_1t_1high_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  SequenceNumber_t *arg1 = (SequenceNumber_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->high = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumber_1t_1high_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SequenceNumber_t *arg1 = (SequenceNumber_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber_t **)&jarg1; 
  result = (int32_t) ((arg1)->high);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumber_1t_1low_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SequenceNumber_t *arg1 = (SequenceNumber_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->low = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_SequenceNumber_1t_1low_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SequenceNumber_t *arg1 = (SequenceNumber_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber_t **)&jarg1; 
  result = (uint32_t) ((arg1)->low);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1SequenceNumber_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SequenceNumber_t *)new SequenceNumber_t();
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1SequenceNumber_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SequenceNumber_t *arg1 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SequenceNumber_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1WRITER_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1STATEFULWRITER_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1READER_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1STATEFULREADER_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1READERPROXY_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_RTPS_1WRITERPROXY_1T_1DEFINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cache_1for_1guid_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cache_for_guid **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cache_1for_1guid_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cache_for_guid **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cache_1for_1guid_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  ChangeForReaderStatusKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cache_for_guid **)&jarg1; 
  arg2 = (ChangeForReaderStatusKind)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cache_1for_1guid_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  ChangeForReaderStatusKind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cache_for_guid **)&jarg1; 
  result = (ChangeForReaderStatusKind) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cache_1for_1guid_1is_1relevant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cache_for_guid **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_relevant = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_cache_1for_1guid_1is_1relevant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(cache_for_guid **)&jarg1; 
  result = (bool) ((arg1)->is_relevant);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1cache_1for_1guid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cache_for_guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cache_for_guid *)new cache_for_guid();
  *(cache_for_guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1cache_1for_1guid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cache_for_guid *arg1 = (cache_for_guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cache_for_guid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  ChangeKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = (ChangeKind_t)jarg2; 
  if (arg1) (arg1)->kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  ChangeKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (ChangeKind_t) ((arg1)->kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1writer_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->writer_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1writer_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->writer_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1instance_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  InstanceHandle_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = (InstanceHandle_t)jarg2; 
  if (arg1) (arg1)->instance_handle = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1instance_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  InstanceHandle_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (InstanceHandle_t) ((arg1)->instance_handle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1sequence_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->sequence_number = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1sequence_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->sequence_number);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1p_1data_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  SerializedPayload *arg2 = (SerializedPayload *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(SerializedPayload **)&jarg2; 
  if (arg1) (arg1)->p_data_value = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1p_1data_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  SerializedPayload *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (SerializedPayload *) ((arg1)->p_data_value);
  *(SerializedPayload **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1read_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_read = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1read_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (bool) ((arg1)->b_read);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1is_1blockcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->is_blockcount = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1is_1blockcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (int32_t) ((arg1)->is_blockcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1source_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->source_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1source_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->source_timestamp);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1lifespan_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->lifespan_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1lifespan_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->lifespan_duration);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1is_1coherent_1set_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_coherent_set = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1is_1coherent_1set_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (bool) ((arg1)->is_coherent_set);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1coherent_1set_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->coherent_set_number = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1coherent_1set_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->coherent_set_number);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1received_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->received_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1received_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->received_time);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1is_1same_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_same = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1is_1same_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (bool) ((arg1)->is_same);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1pp_1cache_1for_1guids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  cache_for_guid **arg2 = (cache_for_guid **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(cache_for_guid ***)&jarg2; 
  if (arg1) (arg1)->pp_cache_for_guids = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1pp_1cache_1for_1guids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  cache_for_guid **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (cache_for_guid **) ((arg1)->pp_cache_for_guids);
  *(cache_for_guid ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1i_1cache_1for_1guids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->i_cache_for_guids = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1i_1cache_1for_1guids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (uint16_t) ((arg1)->i_cache_for_guids);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1tmp_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  ChangeForReaderStatusKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = (ChangeForReaderStatusKind)jarg2; 
  if (arg1) (arg1)->tmp_status = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1tmp_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  ChangeForReaderStatusKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (ChangeForReaderStatusKind) ((arg1)->tmp_status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1isdisposed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_isdisposed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1isdisposed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (bool) ((arg1)->b_isdisposed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1ref_1rtps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_ref_rtps = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1ref_1rtps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (bool) ((arg1)->b_ref_rtps);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1ref_1dcps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_ref_dcps = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1b_1ref_1dcps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (bool) ((arg1)->b_ref_dcps);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1p_1org_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  message_t *arg2 = (message_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(message_t **)&jarg2; 
  if (arg1) (arg1)->p_org_message = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1p_1org_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  message_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (message_t *) ((arg1)->p_org_message);
  *(message_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1key_1guid_1for_1reader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshortArray jarg2) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->key_guid_for_reader;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1t_1key_1guid_1for_1reader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshortArray jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->key_guid_for_reader);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 16); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1cachechange_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_cachechange_t *)new rtps_cachechange_t();
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1cachechange_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1pp_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_cachechange_t **arg2 = (rtps_cachechange_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t ***)&jarg2; 
  if (arg1) (arg1)->pp_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1pp_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (rtps_cachechange_t **) ((arg1)->pp_changes);
  *(rtps_cachechange_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1i_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->i_changes = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1i_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (uint16_t) ((arg1)->i_changes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1p_1rtsp_1reader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_reader_t *arg2 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_reader_t **)&jarg2; 
  if (arg1) (arg1)->p_rtsp_reader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1p_1rtsp_1reader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_reader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (rtps_reader_t *) ((arg1)->p_rtsp_reader);
  *(rtps_reader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1p_1rtps_1writer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_writer = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1p_1rtps_1writer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_writer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (rtps_writer_t *) ((arg1)->p_rtps_writer);
  *(rtps_writer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1history_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  HistoryQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = (HistoryQosPolicyKind)jarg2; 
  if (arg1) (arg1)->history_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1history_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  HistoryQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (HistoryQosPolicyKind) ((arg1)->history_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1history_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->history_depth = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1history_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (int32_t) ((arg1)->history_depth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1history_1max_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->history_max_length = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1history_1max_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (int32_t) ((arg1)->history_max_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1reliability_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  ReliabilityQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = (ReliabilityQosPolicyKind)jarg2; 
  if (arg1) (arg1)->reliability_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1reliability_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  ReliabilityQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (ReliabilityQosPolicyKind) ((arg1)->reliability_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1coherent_1set_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->coherent_set_number = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1t_1coherent_1set_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->coherent_set_number);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1historycache_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_historycache_t *)new rtps_historycache_t();
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1historycache_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1entity_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_entity_t *arg1 = (rtps_entity_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_entity_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1entity_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_entity_t *arg1 = (rtps_entity_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_entity_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1entity_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_entity_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_entity_t *)new rtps_entity_t();
  *(rtps_entity_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1entity_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_entity_t *arg1 = (rtps_entity_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_entity_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1protocol_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  ProtocolVersion_t *arg2 = (ProtocolVersion_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(ProtocolVersion_t **)&jarg2; 
  if (arg1) (arg1)->protocol_version = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1protocol_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  ProtocolVersion_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (ProtocolVersion_t *)& ((arg1)->protocol_version);
  *(ProtocolVersion_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1vendor_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  VendorId_t *arg2 = (VendorId_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(VendorId_t **)&jarg2; 
  if (arg1) (arg1)->vendor_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1vendor_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  VendorId_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (VendorId_t *)& ((arg1)->vendor_id);
  *(VendorId_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1pp_1default_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_default_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1pp_1default_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_default_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1pp_1default_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_default_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1pp_1default_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_default_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1p_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  if (arg1) (arg1)->p_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1p_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  DomainParticipant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (DomainParticipant *) ((arg1)->p_participant);
  *(DomainParticipant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1i_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_endpoint = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1i_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_endpoint);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1pp_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  rtps_endpoint_t **arg2 = (rtps_endpoint_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(rtps_endpoint_t ***)&jarg2; 
  if (arg1) (arg1)->pp_endpoint = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1pp_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  rtps_endpoint_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (rtps_endpoint_t **) ((arg1)->pp_endpoint);
  *(rtps_endpoint_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1p_1spdp_1builtin_1participant_1writer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  rtps_statelesswriter_t *arg2 = (rtps_statelesswriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(rtps_statelesswriter_t **)&jarg2; 
  if (arg1) (arg1)->p_spdp_builtin_participant_writer = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1p_1spdp_1builtin_1participant_1writer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  rtps_statelesswriter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (rtps_statelesswriter_t *) ((arg1)->p_spdp_builtin_participant_writer);
  *(rtps_statelesswriter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1p_1spdp_1builtin_1participant_1reader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  rtps_statelessreader_t *arg2 = (rtps_statelessreader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  arg2 = *(rtps_statelessreader_t **)&jarg2; 
  if (arg1) (arg1)->p_spdp_builtin_participant_reader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1t_1p_1spdp_1builtin_1participant_1reader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  rtps_statelessreader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  result = (rtps_statelessreader_t *) ((arg1)->p_spdp_builtin_participant_reader);
  *(rtps_statelessreader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1participant_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_participant_t *)new rtps_participant_t();
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1participant_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_participant_t *arg1 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_participant_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1endpoint_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1endpoint_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)new rtps_endpoint_t();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1endpoint_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1p_1topic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  if (arg1) (arg1)->p_topic = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1topic_1t_1p_1topic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  Topic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_topic_t **)&jarg1; 
  result = (Topic *) ((arg1)->p_topic);
  *(Topic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1topic_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_topic_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_topic_t *)new rtps_topic_t();
  *(rtps_topic_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1topic_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_topic_t *arg1 = (rtps_topic_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_topic_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1datawriter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  DataWriter *arg2 = (DataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(DataWriter **)&jarg2; 
  if (arg1) (arg1)->p_datawriter = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1datawriter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  DataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (DataWriter *) ((arg1)->p_datawriter);
  *(DataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1push_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->push_mode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1push_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (bool) ((arg1)->push_mode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1heartbeat_1period_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_period = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1heartbeat_1period_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_period);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1nack_1response_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->nack_response_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1nack_1response_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->nack_response_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1nack_1suppression_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->nack_suppression_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1nack_1suppression_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->nack_suppression_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1last_1change_1sequence_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->last_change_sequence_number = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1last_1change_1sequence_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->last_change_sequence_number);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1writer_1cache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  rtps_historycache_t *arg2 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(rtps_historycache_t **)&jarg2; 
  if (arg1) (arg1)->p_writer_cache = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1writer_1cache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (rtps_historycache_t *) ((arg1)->p_writer_cache);
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1accessout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  access_out_t *arg2 = (access_out_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(access_out_t **)&jarg2; 
  if (arg1) (arg1)->p_accessout = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1p_1accessout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  access_out_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (access_out_t *) ((arg1)->p_accessout);
  *(access_out_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1b_1has_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_has_liveliness = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1b_1has_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (bool) ((arg1)->b_has_liveliness);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1fragment_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->fragment_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1fragment_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->fragment_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1heartbeat_1frag_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_heartbeat_frag_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1i_1heartbeat_1frag_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_heartbeat_frag_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1is_1builtin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_builtin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1is_1builtin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (bool) ((arg1)->is_builtin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->send_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int64_t) ((arg1)->send_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->send_sample_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int64_t) ((arg1)->send_sample_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1send_1sample_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1b_1thread_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread_first = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1t_1b_1thread_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread_first);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1writer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_writer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_writer_t *)new rtps_writer_t();
  *(rtps_writer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1writer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1p_1writerproxy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  rtps_writerproxy_t *arg2 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  arg2 = *(rtps_writerproxy_t **)&jarg2; 
  if (arg1) (arg1)->p_writerproxy = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1p_1writerproxy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  rtps_writerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  result = (rtps_writerproxy_t *) ((arg1)->p_writerproxy);
  *(rtps_writerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1i_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->i_key = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1i_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  result = (uint32_t) ((arg1)->i_key);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1keylist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  cpskey_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  arg2 = *(cpskey_t **)&jarg2; 
  {
    size_t ii;
    cpskey_t *b = (cpskey_t *) arg1->keylist;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((cpskey_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1keylist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  cpskey_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  result = (cpskey_t *)(cpskey_t *) ((arg1)->keylist);
  *(cpskey_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1b_1has_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_has_key = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1b_1has_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  result = (bool) ((arg1)->b_has_key);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1b_1is_1owner_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_is_owner = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1exclusive_1writer_1t_1b_1is_1owner_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  result = (bool) ((arg1)->b_is_owner);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1exclusive_1writer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_exclusive_writer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_exclusive_writer_t *)new rtps_exclusive_writer_t();
  *(rtps_exclusive_writer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1exclusive_1writer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_exclusive_writer_t *arg1 = (rtps_exclusive_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_exclusive_writer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  if (arg1) (arg1)->p_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (DataReader *) ((arg1)->p_datareader);
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1heartbeat_1response_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_response_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1heartbeat_1response_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_response_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1heartbeat_1suppression_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_suppression_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1heartbeat_1suppression_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_suppression_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1reader_1cache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  rtps_historycache_t *arg2 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(rtps_historycache_t **)&jarg2; 
  if (arg1) (arg1)->p_reader_cache = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1reader_1cache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (rtps_historycache_t *) ((arg1)->p_reader_cache);
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1expects_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expects_inline_qos = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1expects_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (bool) ((arg1)->expects_inline_qos);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1data_1fifo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  data_fifo_t *arg2 = (data_fifo_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(data_fifo_t **)&jarg2; 
  if (arg1) (arg1)->p_data_fifo = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1p_1data_1fifo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  data_fifo_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (data_fifo_t *) ((arg1)->p_data_fifo);
  *(data_fifo_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (Count_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1datafragfull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  DataFragFull **arg2 = (DataFragFull **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(DataFragFull ***)&jarg2; 
  if (arg1) (arg1)->pp_datafragfull = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1datafragfull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  DataFragFull **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (DataFragFull **) ((arg1)->pp_datafragfull);
  *(DataFragFull ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1datafragfull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_datafragfull = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1datafragfull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_datafragfull);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1is_1builtin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_builtin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1is_1builtin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (bool) ((arg1)->is_builtin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1source_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->source_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1source_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->source_timestamp);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int64_t) ((arg1)->received_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_sample_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int64_t) ((arg1)->received_sample_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1received_1sample_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1exclusive_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  rtps_exclusive_writer_t **arg2 = (rtps_exclusive_writer_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(rtps_exclusive_writer_t ***)&jarg2; 
  if (arg1) (arg1)->pp_exclusive_writers = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1pp_1exclusive_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  rtps_exclusive_writer_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (rtps_exclusive_writer_t **) ((arg1)->pp_exclusive_writers);
  *(rtps_exclusive_writer_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1exclusive_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_exclusive_writers = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1t_1i_1exclusive_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_exclusive_writers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1reader_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_reader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_reader_t *)new rtps_reader_t();
  *(rtps_reader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1reader_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1datawriter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  DataWriter *arg2 = (DataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(DataWriter **)&jarg2; 
  if (arg1) (arg1)->p_datawriter = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1datawriter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  DataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (DataWriter *) ((arg1)->p_datawriter);
  *(DataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1push_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->push_mode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1push_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (bool) ((arg1)->push_mode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1heartbeat_1period_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_period = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1heartbeat_1period_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_period);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1nack_1response_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->nack_response_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1nack_1response_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->nack_response_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1nack_1suppression_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->nack_suppression_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1nack_1suppression_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->nack_suppression_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1last_1change_1sequence_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->last_change_sequence_number = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1last_1change_1sequence_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->last_change_sequence_number);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1writer_1cache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_historycache_t *arg2 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(rtps_historycache_t **)&jarg2; 
  if (arg1) (arg1)->p_writer_cache = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1writer_1cache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (rtps_historycache_t *) ((arg1)->p_writer_cache);
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1accessout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  access_out_t *arg2 = (access_out_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(access_out_t **)&jarg2; 
  if (arg1) (arg1)->p_accessout = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1p_1accessout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  access_out_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (access_out_t *) ((arg1)->p_accessout);
  *(access_out_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1b_1has_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_has_liveliness = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1b_1has_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_has_liveliness);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1fragment_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->fragment_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1fragment_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->fragment_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1heartbeat_1frag_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_heartbeat_frag_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1heartbeat_1frag_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_heartbeat_frag_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1is_1builtin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_builtin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1is_1builtin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (bool) ((arg1)->is_builtin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->send_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int64_t) ((arg1)->send_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->send_sample_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int64_t) ((arg1)->send_sample_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1send_1sample_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1b_1thread_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread_first = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1b_1thread_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread_first);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1resend_1data_1period_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->resend_data_period = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1resend_1data_1period_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->resend_data_period);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1pp_1reader_1locators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_readerlocator_t **arg2 = (rtps_readerlocator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(rtps_readerlocator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_reader_locators = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1pp_1reader_1locators_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_readerlocator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (rtps_readerlocator_t **) ((arg1)->pp_reader_locators);
  *(rtps_readerlocator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1reader_1locators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_reader_locators = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1t_1i_1reader_1locators_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_reader_locators);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1statelesswriter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_statelesswriter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_statelesswriter_t *)new rtps_statelesswriter_t();
  *(rtps_statelesswriter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1statelesswriter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1datawriter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  DataWriter *arg2 = (DataWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(DataWriter **)&jarg2; 
  if (arg1) (arg1)->p_datawriter = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1datawriter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  DataWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (DataWriter *) ((arg1)->p_datawriter);
  *(DataWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1push_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->push_mode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1push_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (bool) ((arg1)->push_mode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1heartbeat_1period_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_period = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1heartbeat_1period_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_period);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1nack_1response_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->nack_response_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1nack_1response_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->nack_response_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1nack_1suppression_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->nack_suppression_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1nack_1suppression_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->nack_suppression_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1last_1change_1sequence_1number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->last_change_sequence_number = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1last_1change_1sequence_1number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->last_change_sequence_number);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1writer_1cache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_historycache_t *arg2 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(rtps_historycache_t **)&jarg2; 
  if (arg1) (arg1)->p_writer_cache = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1writer_1cache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (rtps_historycache_t *) ((arg1)->p_writer_cache);
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1accessout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  access_out_t *arg2 = (access_out_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(access_out_t **)&jarg2; 
  if (arg1) (arg1)->p_accessout = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1p_1accessout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  access_out_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (access_out_t *) ((arg1)->p_accessout);
  *(access_out_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1has_1liveliness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_has_liveliness = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1has_1liveliness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_has_liveliness);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1fragment_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->fragment_size = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1fragment_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->fragment_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1heartbeat_1frag_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_heartbeat_frag_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1heartbeat_1frag_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_heartbeat_frag_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1is_1builtin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_builtin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1is_1builtin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (bool) ((arg1)->is_builtin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->send_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int64_t) ((arg1)->send_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->send_sample_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int64_t) ((arg1)->send_sample_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->send_sample_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1send_1sample_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int32_t) ((arg1)->send_sample_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1thread_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_thread_first = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1thread_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_thread_first);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1pp_1matched_1readers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_readerproxy_t **arg2 = (rtps_readerproxy_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(rtps_readerproxy_t ***)&jarg2; 
  if (arg1) (arg1)->pp_matched_readers = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1pp_1matched_1readers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_readerproxy_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (rtps_readerproxy_t **) ((arg1)->pp_matched_readers);
  *(rtps_readerproxy_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1matched_1readers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i_matched_readers = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1i_1matched_1readers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (int) ((arg1)->i_matched_readers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1last_1send_1heartbeat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->last_send_heartbeat = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1last_1send_1heartbeat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->last_send_heartbeat);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1last_1nack_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->last_nack_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1last_1nack_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->last_nack_time);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1heatbeat_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->heatbeat_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1heatbeat_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (Count_t) ((arg1)->heatbeat_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1enable_1multicast_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_enable_multicast = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1t_1b_1enable_1multicast_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  result = (bool) ((arg1)->b_enable_multicast);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1statefulwriter_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_statefulwriter_t *)new rtps_statefulwriter_t();
  *(rtps_statefulwriter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1statefulwriter_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1pp_1requested_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  rtps_cachechange_t **arg2 = (rtps_cachechange_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t ***)&jarg2; 
  if (arg1) (arg1)->pp_requested_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1pp_1requested_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (rtps_cachechange_t **) ((arg1)->pp_requested_changes);
  *(rtps_cachechange_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1pp_1unsent_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  rtps_cachechange_t **arg2 = (rtps_cachechange_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unsent_changes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1pp_1unsent_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (rtps_cachechange_t **) ((arg1)->pp_unsent_changes);
  *(rtps_cachechange_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  if (arg1) (arg1)->locator = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  Locator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (Locator_t *)& ((arg1)->locator);
  *(Locator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1expects_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expects_inline_qos = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1expects_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (bool) ((arg1)->expects_inline_qos);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1i_1unsent_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unsent_changes = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1i_1unsent_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unsent_changes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1i_1sent_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_sent_changes = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1i_1sent_1changes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_sent_changes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1i_1for_1writer_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_for_writer_state = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1t_1i_1for_1writer_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_for_writer_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1readerlocator_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_readerlocator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_readerlocator_t *)new rtps_readerlocator_t();
  *(rtps_readerlocator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1readerlocator_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1for_1reader_1t_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_change_for_reader_t *arg1 = (rtps_change_for_reader_t *) 0 ;
  ChangeForReaderStatusKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_for_reader_t **)&jarg1; 
  arg2 = (ChangeForReaderStatusKind)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1for_1reader_1t_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_change_for_reader_t *arg1 = (rtps_change_for_reader_t *) 0 ;
  ChangeForReaderStatusKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_for_reader_t **)&jarg1; 
  result = (ChangeForReaderStatusKind) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1for_1reader_1t_1is_1relevant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_change_for_reader_t *arg1 = (rtps_change_for_reader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_for_reader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_relevant = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1for_1reader_1t_1is_1relevant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_change_for_reader_t *arg1 = (rtps_change_for_reader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_for_reader_t **)&jarg1; 
  result = (bool) ((arg1)->is_relevant);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1change_1for_1reader_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_change_for_reader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_change_for_reader_t *)new rtps_change_for_reader_t();
  *(rtps_change_for_reader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1change_1for_1reader_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_change_for_reader_t *arg1 = (rtps_change_for_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_for_reader_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1remote_1reader_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->remote_reader_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1remote_1reader_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->remote_reader_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1pp_1changes_1for_1reader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_cachechange_t **arg2 = (rtps_cachechange_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t ***)&jarg2; 
  if (arg1) (arg1)->pp_changes_for_reader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1pp_1changes_1for_1reader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (rtps_cachechange_t **) ((arg1)->pp_changes_for_reader);
  *(rtps_cachechange_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1expects_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expects_inline_qos = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1expects_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->expects_inline_qos);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1b_1is_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_is_active = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1b_1is_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->b_is_active);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1changes_1for_1reader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_changes_for_reader = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1changes_1for_1reader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_changes_for_reader);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator_list = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator_list);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator_list = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator_list);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1for_1writer_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_for_writer_state = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1for_1writer_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_for_writer_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1for_1writer_1fromReader_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_for_writer_fromReader_state = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1i_1for_1writer_1fromReader_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_for_writer_fromReader_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1p_1rtps_1writer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_writer = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1p_1rtps_1writer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_writer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (rtps_writer_t *) ((arg1)->p_rtps_writer);
  *(rtps_writer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1remote_1endpoint_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->remote_endpoint_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1remote_1endpoint_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->remote_endpoint_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1deadline_1base_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->deadline_base_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1deadline_1base_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->deadline_base_time);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1lifespan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->lifespan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1lifespan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->lifespan);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  octet arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = (octet)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  octet result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (octet) ((arg1)->flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1is_1zero_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_zero = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1is_1zero_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->is_zero);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1is_1ignore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_ignore = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1t_1is_1ignore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->is_ignore);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1readerproxy_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_readerproxy_t *)new rtps_readerproxy_t();
  *(rtps_readerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1readerproxy_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  if (arg1) (arg1)->p_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (DataReader *) ((arg1)->p_datareader);
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1heartbeat_1response_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_response_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1heartbeat_1response_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_response_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1heartbeat_1suppression_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_suppression_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1heartbeat_1suppression_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_suppression_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1reader_1cache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  rtps_historycache_t *arg2 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(rtps_historycache_t **)&jarg2; 
  if (arg1) (arg1)->p_reader_cache = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1reader_1cache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (rtps_historycache_t *) ((arg1)->p_reader_cache);
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1expects_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expects_inline_qos = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1expects_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (bool) ((arg1)->expects_inline_qos);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1data_1fifo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  data_fifo_t *arg2 = (data_fifo_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(data_fifo_t **)&jarg2; 
  if (arg1) (arg1)->p_data_fifo = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1p_1data_1fifo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  data_fifo_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (data_fifo_t *) ((arg1)->p_data_fifo);
  *(data_fifo_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (Count_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1datafragfull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  DataFragFull **arg2 = (DataFragFull **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(DataFragFull ***)&jarg2; 
  if (arg1) (arg1)->pp_datafragfull = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1datafragfull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  DataFragFull **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (DataFragFull **) ((arg1)->pp_datafragfull);
  *(DataFragFull ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1datafragfull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_datafragfull = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1datafragfull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_datafragfull);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1is_1builtin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_builtin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1is_1builtin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (bool) ((arg1)->is_builtin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1source_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->source_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1source_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->source_timestamp);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int64_t) ((arg1)->received_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_sample_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int64_t) ((arg1)->received_sample_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1received_1sample_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1exclusive_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  rtps_exclusive_writer_t **arg2 = (rtps_exclusive_writer_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = *(rtps_exclusive_writer_t ***)&jarg2; 
  if (arg1) (arg1)->pp_exclusive_writers = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1pp_1exclusive_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  rtps_exclusive_writer_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (rtps_exclusive_writer_t **) ((arg1)->pp_exclusive_writers);
  *(rtps_exclusive_writer_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1exclusive_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_exclusive_writers = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1t_1i_1exclusive_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_exclusive_writers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1statelessreader_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_statelessreader_t *)new rtps_statelessreader_t();
  *(rtps_statelessreader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1statelessreader_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1topic_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  TopicKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (TopicKind_t)jarg2; 
  if (arg1) (arg1)->topic_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1topic_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  TopicKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (TopicKind_t) ((arg1)->topic_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1reliability_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  ReliabilityKind_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (ReliabilityKind_t)jarg2; 
  if (arg1) (arg1)->reliability_level = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1reliability_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  ReliabilityKind_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (ReliabilityKind_t) ((arg1)->reliability_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1rtps_1participant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_participant_t *arg2 = (rtps_participant_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(rtps_participant_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_participant = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1rtps_1participant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (rtps_participant_t *) ((arg1)->p_rtps_participant);
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1behavior_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->behavior_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1behavior_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->behavior_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1unicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1unicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1multicast_1locator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1multicast_1locator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1entity_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_entity_type = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1entity_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_entity_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1datareader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  if (arg1) (arg1)->p_datareader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1datareader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  DataReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (DataReader *) ((arg1)->p_datareader);
  *(DataReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1heartbeat_1response_1delay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_response_delay = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1heartbeat_1response_1delay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_response_delay);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1heartbeat_1suppression_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->heartbeat_suppression_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1heartbeat_1suppression_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->heartbeat_suppression_duration);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1reader_1cache_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_historycache_t *arg2 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(rtps_historycache_t **)&jarg2; 
  if (arg1) (arg1)->p_reader_cache = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1reader_1cache_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (rtps_historycache_t *) ((arg1)->p_reader_cache);
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1expects_1inline_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->expects_inline_qos = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1expects_1inline_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (bool) ((arg1)->expects_inline_qos);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1b_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_end = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1b_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (bool) ((arg1)->b_end);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1data_1fifo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  data_fifo_t *arg2 = (data_fifo_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(data_fifo_t **)&jarg2; 
  if (arg1) (arg1)->p_data_fifo = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1p_1data_1fifo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  data_fifo_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (data_fifo_t *) ((arg1)->p_data_fifo);
  *(data_fifo_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1thread_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  module_thread_t arg2 ;
  module_thread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  argp2 = *(module_thread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null module_thread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->thread_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1thread_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  module_thread_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result =  ((arg1)->thread_id);
  *(module_thread_t **)&jresult = new module_thread_t((const module_thread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (Count_t) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1datafragfull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  DataFragFull **arg2 = (DataFragFull **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(DataFragFull ***)&jarg2; 
  if (arg1) (arg1)->pp_datafragfull = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1datafragfull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  DataFragFull **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (DataFragFull **) ((arg1)->pp_datafragfull);
  *(DataFragFull ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1datafragfull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_datafragfull = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1datafragfull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_datafragfull);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1is_1builtin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_builtin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1is_1builtin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (bool) ((arg1)->is_builtin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1source_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->source_timestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1source_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->source_timestamp);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int64_t) ((arg1)->received_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->received_sample_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int64_t) ((arg1)->received_sample_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1count_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_count_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1count_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_count_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1bytes_1throughput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->received_sample_bytes_throughput = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1received_1sample_1bytes_1throughput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->received_sample_bytes_throughput);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1exclusive_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_exclusive_writer_t **arg2 = (rtps_exclusive_writer_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(rtps_exclusive_writer_t ***)&jarg2; 
  if (arg1) (arg1)->pp_exclusive_writers = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1exclusive_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_exclusive_writer_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (rtps_exclusive_writer_t **) ((arg1)->pp_exclusive_writers);
  *(rtps_exclusive_writer_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1exclusive_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_exclusive_writers = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1exclusive_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_exclusive_writers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1matched_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_writerproxy_t **arg2 = (rtps_writerproxy_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(rtps_writerproxy_t ***)&jarg2; 
  if (arg1) (arg1)->pp_matched_writers = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1pp_1matched_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_writerproxy_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (rtps_writerproxy_t **) ((arg1)->pp_matched_writers);
  *(rtps_writerproxy_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1matched_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_matched_writers = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1t_1i_1matched_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_matched_writers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1statefulreader_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_statefulreader_t *)new rtps_statefulreader_t();
  *(rtps_statefulreader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1statefulreader_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1remote_1writer_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->remote_writer_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1remote_1writer_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->remote_writer_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1pp_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_unicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1pp_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_unicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1pp_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Locator_t **arg2 = (Locator_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Locator_t ***)&jarg2; 
  if (arg1) (arg1)->pp_multicast_locator_list = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1pp_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Locator_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Locator_t **) ((arg1)->pp_multicast_locator_list);
  *(Locator_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1pp_1changes_1from_1writers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  rtps_cachechange_t **arg2 = (rtps_cachechange_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t ***)&jarg2; 
  if (arg1) (arg1)->pp_changes_from_writers = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1pp_1changes_1from_1writers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (rtps_cachechange_t **) ((arg1)->pp_changes_from_writers);
  *(rtps_cachechange_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1unicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_unicast_locator_list = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1unicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_unicast_locator_list);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1multicast_1locator_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_multicast_locator_list = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1multicast_1locator_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_multicast_locator_list);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1changes_1from_1writer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_changes_from_writer = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1changes_1from_1writer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_changes_from_writer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1object_1lock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  mutex_t arg2 ;
  mutex_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(mutex_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mutex_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_lock = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1object_1lock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  mutex_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result =  ((arg1)->object_lock);
  *(mutex_t **)&jresult = new mutex_t((const mutex_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1object_1wait_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  cond_t arg2 ;
  cond_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(cond_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cond_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->object_wait = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1object_1wait_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  cond_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result =  ((arg1)->object_wait);
  *(cond_t **)&jresult = new cond_t((const cond_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1for_1reader_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_for_reader_state = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1for_1reader_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_for_reader_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1ackcheced_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->ackcheced_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1ackcheced_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->ackcheced_time);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1a_1remote_1heartbeat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Heartbeat *arg2 = (Heartbeat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Heartbeat **)&jarg2; 
  if (arg1) (arg1)->a_remote_heartbeat = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1a_1remote_1heartbeat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Heartbeat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Heartbeat *)& ((arg1)->a_remote_heartbeat);
  *(Heartbeat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1ack_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->i_ack_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1ack_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Count_t) ((arg1)->i_ack_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1nack_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Count_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (Count_t)jarg2; 
  if (arg1) (arg1)->i_nack_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1nack_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Count_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Count_t) ((arg1)->i_nack_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1p_1rtps_1reader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  rtps_reader_t *arg2 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(rtps_reader_t **)&jarg2; 
  if (arg1) (arg1)->p_rtps_reader = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1p_1rtps_1reader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  rtps_reader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (rtps_reader_t *) ((arg1)->p_rtps_reader);
  *(rtps_reader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1last_1available_1seq_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->last_available_seq_num = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1last_1available_1seq_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->last_available_seq_num);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1base_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->base_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1base_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->base_time);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1deadline_1base_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->deadline_base_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1deadline_1base_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->deadline_base_time);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1lifespan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Duration_t **)&jarg2; 
  if (arg1) (arg1)->lifespan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1lifespan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Duration_t *)& ((arg1)->lifespan);
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1for_1reader_1state_1for_1ack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_for_reader_state_for_ack = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1for_1reader_1state_1for_1ack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_for_reader_state_for_ack);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1is_1first_1ack_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_first_ack = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1is_1first_1ack_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->is_first_ack);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1ownership_1strength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->ownership_strength = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1ownership_1strength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->ownership_strength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1ref_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_ref_count = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1i_1ref_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_ref_count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1is_1ignore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_ignore = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1is_1ignore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->is_ignore);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1b_1is_1alive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_is_alive = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1b_1is_1alive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->b_is_alive);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1liveliness_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  LivelinessQosPolicyKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = (LivelinessQosPolicyKind)jarg2; 
  if (arg1) (arg1)->liveliness_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1liveliness_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  LivelinessQosPolicyKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (LivelinessQosPolicyKind) ((arg1)->liveliness_kind);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1liveliness_1lease_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->liveliness_lease_duration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1liveliness_1lease_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->liveliness_lease_duration);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1liveliness_1base_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Time_t *arg2 = (Time_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = *(Time_t **)&jarg2; 
  if (arg1) (arg1)->liveliness_base_time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1liveliness_1base_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  Time_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (Time_t *)& ((arg1)->liveliness_base_time);
  *(Time_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1b_1is_1deadline_1on_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b_is_deadline_on = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1t_1b_1is_1deadline_1on_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = (bool) ((arg1)->b_is_deadline_on);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1writerproxy_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_writerproxy_t *)new rtps_writerproxy_t();
  *(rtps_writerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1writerproxy_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1from_1writer_1t_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  rtps_change_from_writer_t *arg1 = (rtps_change_from_writer_t *) 0 ;
  ChangeFromWriterStatusKind arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_from_writer_t **)&jarg1; 
  arg2 = (ChangeFromWriterStatusKind)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1from_1writer_1t_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  rtps_change_from_writer_t *arg1 = (rtps_change_from_writer_t *) 0 ;
  ChangeFromWriterStatusKind result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_from_writer_t **)&jarg1; 
  result = (ChangeFromWriterStatusKind) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1from_1writer_1t_1is_1relevant_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  rtps_change_from_writer_t *arg1 = (rtps_change_from_writer_t *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_from_writer_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_relevant = arg2;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1change_1from_1writer_1t_1is_1relevant_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  rtps_change_from_writer_t *arg1 = (rtps_change_from_writer_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_from_writer_t **)&jarg1; 
  result = (bool) ((arg1)->is_relevant);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1rtps_1change_1from_1writer_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_change_from_writer_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_change_from_writer_t *)new rtps_change_from_writer_t();
  *(rtps_change_from_writer_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1rtps_1change_1from_1writer_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_change_from_writer_t *arg1 = (rtps_change_from_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_change_from_writer_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1content_1filtered_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->content_filtered_topic_name, (const char *)arg2, 256-1);
      arg1->content_filtered_topic_name[256-1] = 0;
    } else {
      arg1->content_filtered_topic_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1content_1filtered_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->content_filtered_topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1related_1topic_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->related_topic_name, (const char *)arg2, 256-1);
      arg1->related_topic_name[256-1] = 0;
    } else {
      arg1->related_topic_name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1related_1topic_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->related_topic_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1p_1filter_1expression_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->p_filter_expression;
    if (arg2) {
      arg1->p_filter_expression = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->p_filter_expression, (const char *)arg2);
    } else {
      arg1->p_filter_expression = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1p_1filter_1expression_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  result = (char *) ((arg1)->p_filter_expression);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1pp_1expression_1parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char **arg2 = (char **) 0 ;
  jint size2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  {
    int i = 0;
    size2 = jenv->GetArrayLength(jarg2);
    arg2 = (char **) malloc((size2+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size2; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg2[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg2[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg2[i] = 0;
  }
  if (arg1) (arg1)->pp_expression_parameters = arg2;
  {
    int i;
    for (i=0; i<size2-1; i++)
    free(arg2[i]);
    free(arg2);
  }
}


SWIGEXPORT jobjectArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterProperty_1t_1pp_1expression_1parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ;
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  result = (char **) ((arg1)->pp_expression_parameters);
  {
    int i;
    int len=0;
    jstring temp_string;
    const jclass clazz = jenv->FindClass("java/lang/String");
    
    while (result[len]) len++;    
    jresult = jenv->NewObjectArray(len, clazz, NULL);
    /* exception checking omitted */
    
    for (i=0; i<len; i++) {
      temp_string = jenv->NewStringUTF(*result++);
      jenv->SetObjectArrayElement(jresult, i, temp_string);
      jenv->DeleteLocalRef(temp_string);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ContentFilterProperty_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ContentFilterProperty_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ContentFilterProperty_t *)new ContentFilterProperty_t();
  *(ContentFilterProperty_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ContentFilterProperty_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ContentFilterProperty_t *arg1 = (ContentFilterProperty_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ContentFilterProperty_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI__1filterSignature_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  _filterSignature_t *arg1 = (_filterSignature_t *) 0 ;
  int32_t *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_filterSignature_t **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->value;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI__1filterSignature_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  _filterSignature_t *arg1 = (_filterSignature_t *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_filterSignature_t **)&jarg1; 
  result = (int32_t *)(int32_t *) ((arg1)->value);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, 4); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1_1filterSignature_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _filterSignature_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_filterSignature_t *)new _filterSignature_t();
  *(_filterSignature_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1_1filterSignature_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _filterSignature_t *arg1 = (_filterSignature_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_filterSignature_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterInfo_1t_1filter_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ContentFilterInfo_t *arg1 = (ContentFilterInfo_t *) 0 ;
  FilterResult_t arg2 = (FilterResult_t) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterInfo_t **)&jarg1; 
  arg2 = *(FilterResult_t *)&jarg2; 
  if (arg1) (arg1)->filter_result = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterInfo_1t_1filter_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ContentFilterInfo_t *arg1 = (ContentFilterInfo_t *) 0 ;
  FilterResult_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterInfo_t **)&jarg1; 
  result = (FilterResult_t) ((arg1)->filter_result);
  *(FilterResult_t *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterInfo_1t_1pp_1filter_1signatures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ContentFilterInfo_t *arg1 = (ContentFilterInfo_t *) 0 ;
  FilterSignature_t **arg2 = (FilterSignature_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterInfo_t **)&jarg1; 
  arg2 = *(FilterSignature_t ***)&jarg2; 
  if (arg1) (arg1)->pp_filter_signatures = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ContentFilterInfo_1t_1pp_1filter_1signatures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ContentFilterInfo_t *arg1 = (ContentFilterInfo_t *) 0 ;
  FilterSignature_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ContentFilterInfo_t **)&jarg1; 
  result = (FilterSignature_t **) ((arg1)->pp_filter_signatures);
  *(FilterSignature_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ContentFilterInfo_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ContentFilterInfo_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ContentFilterInfo_t *)new ContentFilterInfo_t();
  *(ContentFilterInfo_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ContentFilterInfo_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ContentFilterInfo_t *arg1 = (ContentFilterInfo_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ContentFilterInfo_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Property_1t_1p_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Property_t *arg1 = (Property_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Property_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->p_name;
    if (arg2) {
      arg1->p_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->p_name, (const char *)arg2);
    } else {
      arg1->p_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Property_1t_1p_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Property_t *arg1 = (Property_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Property_t **)&jarg1; 
  result = (char *) ((arg1)->p_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Property_1t_1p_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Property_t *arg1 = (Property_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Property_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->p_value;
    if (arg2) {
      arg1->p_value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->p_value, (const char *)arg2);
    } else {
      arg1->p_value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_Property_1t_1p_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Property_t *arg1 = (Property_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Property_t **)&jarg1; 
  result = (char *) ((arg1)->p_value);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1Property_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Property_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Property_t *)new Property_t();
  *(Property_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1Property_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Property_t *arg1 = (Property_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Property_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityName_1t_1i_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EntityName_t *arg1 = (EntityName_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityName_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->i_length = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityName_1t_1i_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EntityName_t *arg1 = (EntityName_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityName_t **)&jarg1; 
  result = (int32_t) ((arg1)->i_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityName_1t_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  EntityName_t *arg1 = (EntityName_t *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityName_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 12-1);
      arg1->name[12-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_EntityName_1t_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  EntityName_t *arg1 = (EntityName_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityName_t **)&jarg1; 
  result = (char *)(char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1EntityName_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityName_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EntityName_t *)new EntityName_t();
  *(EntityName_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1EntityName_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityName_t *arg1 = (EntityName_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityName_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OriginalWriterInfo_1t_1original_1writer_1guid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  GUID_t *arg2 = (GUID_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  if (arg1) (arg1)->original_writer_guid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OriginalWriterInfo_1t_1original_1writer_1guid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  GUID_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  result = (GUID_t *)& ((arg1)->original_writer_guid);
  *(GUID_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OriginalWriterInfo_1t_1original_1writer_1sn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  if (arg1) (arg1)->original_writer_sn = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OriginalWriterInfo_1t_1original_1writer_1sn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  SequenceNumber_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  result = (SequenceNumber_t *)& ((arg1)->original_writer_sn);
  *(SequenceNumber_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OriginalWriterInfo_1t_1original_1writer_1qos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  ParameterList *arg2 = (ParameterList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  arg2 = *(ParameterList **)&jarg2; 
  if (arg1) (arg1)->original_writer_qos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_OriginalWriterInfo_1t_1original_1writer_1qos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  ParameterList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  result = (ParameterList *)& ((arg1)->original_writer_qos);
  *(ParameterList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1OriginalWriterInfo_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OriginalWriterInfo_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OriginalWriterInfo_t *)new OriginalWriterInfo_t();
  *(OriginalWriterInfo_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1OriginalWriterInfo_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OriginalWriterInfo_t *arg1 = (OriginalWriterInfo_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OriginalWriterInfo_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LocatorUDPv4_1t_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  LocatorUDPv4_t *arg1 = (LocatorUDPv4_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocatorUDPv4_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->address = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LocatorUDPv4_1t_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LocatorUDPv4_t *arg1 = (LocatorUDPv4_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocatorUDPv4_t **)&jarg1; 
  result = (uint32_t) ((arg1)->address);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LocatorUDPv4_1t_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  LocatorUDPv4_t *arg1 = (LocatorUDPv4_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocatorUDPv4_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_LocatorUDPv4_1t_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LocatorUDPv4_t *arg1 = (LocatorUDPv4_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LocatorUDPv4_t **)&jarg1; 
  result = (uint32_t) ((arg1)->port);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1LocatorUDPv4_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LocatorUDPv4_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LocatorUDPv4_t *)new LocatorUDPv4_t();
  *(LocatorUDPv4_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1LocatorUDPv4_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LocatorUDPv4_t *arg1 = (LocatorUDPv4_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LocatorUDPv4_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1participant_1guid_1prefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  GuidPrefix_t *arg2 = (GuidPrefix_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  arg2 = *(GuidPrefix_t **)&jarg2; 
  if (arg1) (arg1)->participant_guid_prefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1participant_1guid_1prefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  GuidPrefix_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  result = (GuidPrefix_t *)& ((arg1)->participant_guid_prefix);
  *(GuidPrefix_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->kind;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->kind);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 4); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1sequence_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->sequence_length;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1sequence_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->sequence_length);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 4); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  octet *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    octet *b = (octet *) arg1->data;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((octet *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ParticipantMessageData_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  octet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  result = (octet *)(octet *) ((arg1)->data);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 4); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1ParticipantMessageData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ParticipantMessageData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ParticipantMessageData *)new ParticipantMessageData();
  *(ParticipantMessageData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1ParticipantMessageData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ParticipantMessageData *arg1 = (ParticipantMessageData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParticipantMessageData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  result = (void *)rtps_write(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1dispose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  void *arg3 = (void *) 0 ;
  InstanceHandle_t arg4 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (InstanceHandle_t)jarg4; 
  result = (void *)rtps_dispose(arg1,arg2,arg3,arg4);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1unregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  void *arg3 = (void *) 0 ;
  InstanceHandle_t arg4 ;
  bool arg5 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (InstanceHandle_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (void *)rtps_unregister(arg1,arg2,arg3,arg4,arg5);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1write_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  message_t *arg3 = (message_t *) 0 ;
  Time_t arg4 ;
  Time_t *argp4 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(message_t **)&jarg3; 
  argp4 = *(Time_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg4 = *argp4; 
  result = (void *)rtps_write_timestamp(arg1,arg2,arg3,arg4);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1dispose_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  void *arg3 = (void *) 0 ;
  InstanceHandle_t arg4 ;
  Time_t arg5 ;
  Time_t *argp5 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (InstanceHandle_t)jarg4; 
  argp5 = *(Time_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg5 = *argp5; 
  result = (void *)rtps_dispose_timestamp(arg1,arg2,arg3,arg4,arg5);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1unregister_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  void *arg3 = (void *) 0 ;
  InstanceHandle_t arg4 ;
  Time_t arg5 ;
  Time_t *argp5 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (InstanceHandle_t)jarg4; 
  argp5 = *(Time_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg5 = *argp5; 
  result = (void *)rtps_unregister_timestamp(arg1,arg2,arg3,arg4,arg5);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1message_1parser(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  GuidPrefix_t **arg4 = (GuidPrefix_t **) 0 ;
  GuidPrefix_t **arg5 = (GuidPrefix_t **) 0 ;
  EntityId_t **arg6 = (EntityId_t **) 0 ;
  EntityId_t **arg7 = (EntityId_t **) 0 ;
  DataFull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int32_t)jarg3; 
  arg4 = *(GuidPrefix_t ***)&jarg4; 
  arg5 = *(GuidPrefix_t ***)&jarg5; 
  arg6 = *(EntityId_t ***)&jarg6; 
  arg7 = *(EntityId_t ***)&jarg7; 
  result = (DataFull *)rtps_message_parser(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(DataFull **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1add_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(Entity **)&jarg2; 
  result = (int32_t)rtps_add_entity(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(Entity **)&jarg2; 
  result = (int32_t)rtps_remove_entity(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1add_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  result = (int32_t)rtps_add_participant(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  DomainParticipant *arg2 = (DomainParticipant *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(DomainParticipant **)&jarg2; 
  result = (int32_t)rtps_remove_participant(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1add_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  result = (int32_t)rtps_add_datareader(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1datareader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  DataReader *arg2 = (DataReader *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(DataReader **)&jarg2; 
  result = (int32_t)rtps_remove_datareader(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1add_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  DataWriter *arg2 = (DataWriter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(DataWriter **)&jarg2; 
  result = (int32_t)rtps_add_datawriter(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  DataWriter *arg2 = (DataWriter *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(DataWriter **)&jarg2; 
  result = (int32_t)rtps_remove_datawriter(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1add_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  result = (int32_t)rtps_add_topic(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(Topic **)&jarg2; 
  result = (int32_t)rtps_remove_topic(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1rtps_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_entity_t *arg1 = (rtps_entity_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_entity_t **)&jarg1; 
  init_rtps_entity(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_init_1rtps_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  init_rtps_endpoint(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1add_1endpoint_1to_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_endpoint_t *arg2 = (rtps_endpoint_t *) 0 ;
  DomainParticipant *arg3 = (DomainParticipant *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_endpoint_t **)&jarg2; 
  arg3 = *(DomainParticipant **)&jarg3; 
  result = (int32_t)rtps_add_endpoint_to_participant(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1endpoint_1from_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  Entity *arg2 = (Entity *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(Entity **)&jarg2; 
  result = (int32_t)rtps_remove_endpoint_from_participant(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destroy_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_endpoint_t *arg1 = (rtps_endpoint_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_endpoint_t **)&jarg1; 
  destroy_endpoint(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1parse_1serializedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int32_t arg2 ;
  DataFull *arg3 = (DataFull *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(DataFull **)&jarg3; 
  result = (int32_t)rtps_parse_serializedData(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1parse_1serializedDataFrag(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int32_t arg2 ;
  DataFragFull *arg3 = (DataFragFull *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(DataFragFull **)&jarg3; 
  result = (int32_t)rtps_parse_serializedDataFrag(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1parse_1Parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Parameter arg1 ;
  char *arg2 = (char *) 0 ;
  ParameterList *arg3 = (ParameterList *) 0 ;
  Parameter *argp1 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Parameter **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Parameter");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ParameterList **)&jarg3; 
  result = (int32_t)rtps_parse_Parameter(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1lock(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  rtps_participant_lock();
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1participant_1unlock(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  rtps_participant_unlock();
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1rtps_1participants(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  jlong jresult = 0 ;
  int32_t *arg1 = (int32_t *) 0 ;
  jint *jarr1 ;
  rtps_participant_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, (int **)&arg1, jarg1)) return 0; 
  result = (rtps_participant_t **)get_rtps_participants(arg1);
  *(rtps_participant_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr1, (int *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1rtps_1builtin_1participant(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_participant_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_participant_t *)get_rtps_builtin_participant();
  *(rtps_participant_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  rtps_writer_init(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1reader_1init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  rtps_reader_init(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writer_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  rtps_writer_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1new(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_statelessreader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_statelessreader_t *)rtps_statelessreader_new();
  *(rtps_statelessreader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelessreader_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  rtps_statelessreader_destory(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  bool arg2 ;
  rtps_statelesswriter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (rtps_statelesswriter_t *)rtps_statelesswriter_new(arg1,arg2);
  *(rtps_statelesswriter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  rtps_statelesswriter_destory(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1unsent_1changes_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  rtps_statelesswriter_unsent_changes_reset(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1new(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_historycache_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_historycache_t *)rtps_historycache_new();
  *(rtps_historycache_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1remove_1change(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  rtps_historycache_remove_change(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  rtps_historycache_destory(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1get_1seq_1num_1max(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  SequenceNumber_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = rtps_historycache_get_seq_num_max(arg1);
  *(SequenceNumber_t **)&jresult = new SequenceNumber_t((const SequenceNumber_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1get_1seq_1num_1min(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  SequenceNumber_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  result = rtps_historycache_get_seq_num_min(arg1);
  *(SequenceNumber_t **)&jresult = new SequenceNumber_t((const SequenceNumber_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  Locator_t arg1 ;
  bool arg2 ;
  Locator_t *argp1 ;
  rtps_readerlocator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Locator_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  result = (rtps_readerlocator_t *)rtps_readerlocator_new(arg1,arg2);
  *(rtps_readerlocator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  rtps_readerlocator_destory(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statelesswriter_1reader_1locator_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  rtps_readerlocator_t *arg2 = (rtps_readerlocator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  arg2 = *(rtps_readerlocator_t **)&jarg2; 
  rtps_statelesswriter_reader_locator_add(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1next_1unsent_1change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  result = (rtps_cachechange_t *)rtps_readerlocator_next_unsent_change(arg1);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerlocator_1unsent_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  rtps_readerlocator_t *arg1 = (rtps_readerlocator_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  jint *jarr2 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerlocator_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (rtps_cachechange_t **)rtps_readerlocator_unsent_changes(arg1,arg2);
  *(rtps_cachechange_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1new(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  ChangeKind_t arg1 ;
  GUID_t arg2 ;
  SequenceNumber_t arg3 ;
  SerializedPayload *arg4 = (SerializedPayload *) 0 ;
  InstanceHandle_t arg5 ;
  GUID_t *argp2 ;
  SequenceNumber_t *argp3 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ChangeKind_t)jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SequenceNumber_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(SerializedPayload **)&jarg4; 
  arg5 = (InstanceHandle_t)jarg5; 
  result = (rtps_cachechange_t *)rtps_cachechange_new(arg1,arg2,arg3,arg4,arg5);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  rtps_cachechange_destory(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1get_1associated_1cache_1for_1guid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  GUID_t *argp1 ;
  cache_for_guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  result = (cache_for_guid *)rtps_cachechange_get_associated_cache_for_guid(arg1,arg2);
  *(cache_for_guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1add_1change(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  result = (rtps_cachechange_t *)rtps_historycache_add_change(arg1,arg2);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1change_1dispose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  GUID_t arg3 ;
  GUID_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  argp3 = *(GUID_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return ;
  }
  arg3 = *argp3; 
  rtps_historycache_change_dispose(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1historycache_1change_1unregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  GUID_t arg3 ;
  GUID_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  argp3 = *(GUID_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return ;
  }
  arg3 = *argp3; 
  rtps_historycache_change_unregister(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1data_1new(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  DataFull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  result = (DataFull *)rtps_data_new(arg1);
  *(DataFull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1data_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Locator_t arg2 ;
  DataFull *arg3 = (DataFull *) 0 ;
  Locator_t *argp2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(Locator_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(DataFull **)&jarg3; 
  result = (int32_t)rtps_send_data_to(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1data_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  DataFull *arg4 = (DataFull *) 0 ;
  bool arg5 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(DataFull **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int32_t)rtps_send_data_with_dst_to(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1data_1with_1dst_1to_1for_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  DataFull *arg4 = (DataFull *) 0 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(DataFull **)&jarg4; 
  result = (int32_t)rtps_send_data_with_dst_to_for_remove(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1data_1frag_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  DataFull *arg4 = (DataFull *) 0 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(DataFull **)&jarg4; 
  result = (int32_t)rtps_send_data_frag_with_dst_to(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1acknack_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  AckNack arg4 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  AckNack *argp4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(AckNack **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AckNack");
    return 0;
  }
  arg4 = *argp4; 
  result = (int32_t)rtps_send_acknack_with_dst_to(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1heartbeat_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  Heartbeat arg4 ;
  bool arg5 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  Heartbeat *argp4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(Heartbeat **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Heartbeat");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  result = (int32_t)rtps_send_heartbeat_with_dst_to(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1gap_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  Gap arg4 ;
  SequenceNumber_t arg5 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  Gap *argp4 ;
  SequenceNumber_t *argp5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(Gap **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Gap");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(SequenceNumber_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg5 = *argp5; 
  result = (int32_t)rtps_send_gap_with_dst_to(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1generate_1serialized_1payload(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  message_t *arg2 = (message_t *) 0 ;
  SerializedPayloadForWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(message_t **)&jarg2; 
  result = (SerializedPayloadForWriter *)rtps_generate_serialized_payload(arg1,arg2);
  *(SerializedPayloadForWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1data_1frag_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  Locator_t arg2 ;
  DataFull *arg3 = (DataFull *) 0 ;
  Locator_t *argp2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(Locator_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(DataFull **)&jarg3; 
  result = (int32_t)rtps_send_data_frag_to(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1heartbeat_1frag_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  HeartbeatFrag arg4 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  HeartbeatFrag *argp4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(HeartbeatFrag **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null HeartbeatFrag");
    return 0;
  }
  arg4 = *argp4; 
  result = (int32_t)rtps_send_heartbeat_frag_with_dst_to(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1nack_1frag_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  NackFrag arg4 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  NackFrag *argp4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(NackFrag **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NackFrag");
    return 0;
  }
  arg4 = *argp4; 
  result = (int32_t)rtps_send_nack_frag_with_dst_to(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1send_1dispose_1unregister_1with_1dst_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  GUID_t *argp2 ;
  Locator_t *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (int)rtps_send_dispose_unregister_with_dst_to(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1generate_1dispose_1unregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  DataWriter *arg1 = (DataWriter *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  rtps_writer_t *arg3 = (rtps_writer_t *) 0 ;
  bool arg4 ;
  bool arg5 ;
  SerializedPayloadForWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  arg3 = *(rtps_writer_t **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (SerializedPayloadForWriter *)rtps_generate_dispose_unregister(arg1,arg2,arg3,arg4,arg5);
  *(SerializedPayloadForWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1multicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  rtps_get_spdp_multicast_locator(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1unicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  rtps_get_spdp_unicast_locator(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1sedp_1multicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  rtps_get_sedp_multicast_locator(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1sedp_1unicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  rtps_get_sedp_unicast_locator(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1default_1multicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  rtps_get_default_multicast_locator(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1default_1unicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  Locator_t *arg2 = (Locator_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(Locator_t **)&jarg2; 
  rtps_get_default_unicast_locator(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1make_1parameter(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ParameterId_t arg1 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  ParameterWithValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ParameterId_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (ParameterWithValue *)rtps_make_parameter(arg1,arg2,arg3);
  *(ParameterWithValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1datafull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFull *arg1 = (DataFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  destory_datafull(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1datafull_1all(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFull *arg1 = (DataFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  destory_datafull_all(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1datafull_1except_1serialized_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFull *arg1 = (DataFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  destory_datafull_except_serialized_data(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1data_1frag_1full(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  destory_data_frag_full(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1data_1frag_1full_1all(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  destory_data_frag_full_all(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1data_1frag_1full_1except_1serialized_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  destory_data_frag_full_except_serialized_data(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1data_1frag_1full_1all_1except_1inline_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataFragFull *arg1 = (DataFragFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFragFull **)&jarg1; 
  destory_data_frag_full_all_except_inline_qos(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1participant_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_participant_reader();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1participant_1writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_participant_writer();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1Builtin_1publication_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_Builtin_publication_reader();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1publication_1writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_publication_writer();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1subscription_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_subscription_reader();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1subscription_1writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_subscription_writer();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1participant_1message_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_participant_message_reader();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1participant_1message_1writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_participant_message_writer();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1topic_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_topic_reader();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1spdp_1builtin_1topic_1writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_spdp_builtin_topic_writer();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1liveliness_1writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_liveliness_writer();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1liveliness_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_endpoint_t *)rtps_get_liveliness_reader();
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1compare_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  GUID_t *argp1 ;
  jint *jarr4 ;
  rtps_endpoint_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return 0; 
  result = (rtps_endpoint_t **)rtps_compare_reader(arg1,arg2,arg3,arg4);
  *(rtps_endpoint_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1compare_1writer(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  GUID_t *argp1 ;
  jint *jarr4 ;
  rtps_endpoint_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return 0; 
  result = (rtps_endpoint_t **)rtps_compare_writer(arg1,arg2,arg3,arg4);
  *(rtps_endpoint_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1find_1topic(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (rtps_endpoint_t *)rtps_find_topic(arg1);
  *(rtps_endpoint_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  GUID_t *argp1 ;
  rtps_endpoint_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (rtps_endpoint_t *)rtps_get_endpoint(arg1);
  *(rtps_endpoint_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1new(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_statefulwriter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (rtps_statefulwriter_t *)rtps_statefulwriter_new(arg1);
  *(rtps_statefulwriter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  rtps_statefulwriter_destory(arg1);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1matched_1reader_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_readerproxy_t *arg2 = (rtps_readerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(rtps_readerproxy_t **)&jarg2; 
  result = (bool)rtps_statefulwriter_matched_reader_add(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1matched_1reader_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  rtps_readerproxy_t *arg2 = (rtps_readerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  arg2 = *(rtps_readerproxy_t **)&jarg2; 
  rtps_statefulwriter_matched_reader_remove(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulwriter_1matched_1reader_1lookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  GUID_t arg2 ;
  GUID_t *argp2 ;
  rtps_readerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (rtps_readerproxy_t *)rtps_statefulwriter_matched_reader_lookup(arg1,arg2);
  *(rtps_readerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1unicast_1and_1multicast_1spdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_endpoint_t *arg2 = (rtps_endpoint_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_endpoint_t **)&jarg2; 
  set_unicast_and_multicast_spdp(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1unicast_1and_1multicast_1sedp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_endpoint_t *arg2 = (rtps_endpoint_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_endpoint_t **)&jarg2; 
  set_unicast_and_multicast_sedp(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1unicast_1and_1multicast_1default(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  module_object_t *arg1 = (module_object_t *) 0 ;
  rtps_endpoint_t *arg2 = (rtps_endpoint_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  arg2 = *(rtps_endpoint_t **)&jarg2; 
  set_unicast_and_multicast_default(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  GUID_t arg2 ;
  Locator_t *arg3 = (Locator_t *) 0 ;
  Locator_t *arg4 = (Locator_t *) 0 ;
  bool arg5 ;
  GUID_t *argp2 ;
  rtps_readerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(Locator_t **)&jarg3; 
  arg4 = *(Locator_t **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (rtps_readerproxy_t *)rtps_readerproxy_new(arg1,arg2,arg3,arg4,arg5);
  *(rtps_readerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1unsent_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  jint *jarr2 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (rtps_cachechange_t **)rtps_readerproxy_unsent_changes(arg1,arg2);
  *(rtps_cachechange_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1requested_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  jint *jarr2 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (rtps_cachechange_t **)rtps_readerproxy_requested_changes(arg1,arg2);
  *(rtps_cachechange_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1requested_1changes_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  jint *jarr2 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (rtps_cachechange_t **)rtps_readerproxy_requested_changes_unlock(arg1,arg2);
  *(rtps_cachechange_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1unacked_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  jint *jarr2 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (rtps_cachechange_t **)rtps_readerproxy_unacked_changes(arg1,arg2);
  *(rtps_cachechange_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  rtps_readerproxy_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1acked_1changes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return ;
  }
  arg2 = *argp2; 
  rtps_readerproxy_acked_changes_set(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1requested_1chanages_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  SequenceNumberSet arg2 ;
  SequenceNumberSet *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumberSet **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumberSet");
    return ;
  }
  arg2 = *argp2; 
  rtps_readerproxy_requested_chanages_set(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1next_1unsent_1chage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (rtps_cachechange_t *)rtps_readerproxy_next_unsent_chage(arg1);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1readerproxy_1next_1requested_1change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  result = (rtps_cachechange_t *)rtps_readerproxy_next_requested_change(arg1);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_add_1remote_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  GUID_t arg1 ;
  Locator_t arg2 ;
  Locator_t arg3 ;
  Locator_t arg4 ;
  Locator_t arg5 ;
  Duration_t arg6 ;
  GUID_t *argp1 ;
  Locator_t *argp2 ;
  Locator_t *argp3 ;
  Locator_t *argp4 ;
  Locator_t *argp5 ;
  Duration_t *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(Locator_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(Locator_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(Locator_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(Locator_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Locator_t");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(Duration_t **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return ;
  }
  arg6 = *argp6; 
  add_remote_participant(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_remote_1remote_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GUID_t arg1 ;
  GUID_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return ;
  }
  arg1 = *argp1; 
  remote_remote_participant(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1remote_1participant_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  GUID_t *argp1 ;
  Locator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (Locator_t *)get_remote_participant_locator(arg1);
  *(Locator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1default_1remote_1participant_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  GUID_t *argp1 ;
  Locator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (Locator_t *)get_default_remote_participant_locator(arg1);
  *(Locator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1remote_1participant_1multicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  GUID_t *argp1 ;
  Locator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (Locator_t *)get_remote_participant_multicast_locator(arg1);
  *(Locator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1default_1remote_1participant_1multicast_1locator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  GUID_t *argp1 ;
  Locator_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (Locator_t *)get_default_remote_participant_multicast_locator(arg1);
  *(Locator_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_is_1exist_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  GUID_t arg1 ;
  GUID_t *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)is_exist_participant(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_is_1ignore_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  GuidPrefix_t arg1 ;
  GuidPrefix_t *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GuidPrefix_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)is_ignore_participant(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ignoreRemoteParticipant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GUID_t arg1 ;
  GUID_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return ;
  }
  arg1 = *argp1; 
  ignoreRemoteParticipant(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_ignoreTopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4) {
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  GUID_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GUID_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ignoreTopic(arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1receive_1heartbeat_1procedure2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jshort jarg3) {
  InfoDestination arg1 ;
  Heartbeat arg2 ;
  octet arg3 ;
  InfoDestination *argp1 ;
  Heartbeat *argp2 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(InfoDestination **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null InfoDestination");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(Heartbeat **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Heartbeat");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (octet)jarg3; 
  rtps_receive_heartbeat_procedure2(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_heartbeat_1wakeup_1participant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GuidPrefix_t arg1 ;
  GuidPrefix_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GuidPrefix_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return ;
  }
  arg1 = *argp1; 
  heartbeat_wakeup_participant(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1find_1all_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  GuidPrefix_t arg1 ;
  GuidPrefix_t *argp1 ;
  rtps_entity_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GuidPrefix_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (rtps_entity_t *)rtps_find_all_entity(arg1);
  *(rtps_entity_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_reliable_1statefulwriter_1behavior(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  reliable_statefulwriter_behavior(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_best_1effort_1statefulwriter_1behavior(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  best_effort_statefulwriter_behavior(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_best_1effort_1statelesswriter_1behavior(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statelesswriter_t *arg1 = (rtps_statelesswriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelesswriter_t **)&jarg1; 
  best_effort_statelesswriter_behavior(arg1);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1new(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GUID_t arg2 ;
  Locator_t *arg3 = (Locator_t *) 0 ;
  Locator_t *arg4 = (Locator_t *) 0 ;
  GUID_t *argp2 ;
  rtps_writerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(Locator_t **)&jarg3; 
  arg4 = *(Locator_t **)&jarg4; 
  result = (rtps_writerproxy_t *)rtps_writerproxy_new(arg1,arg2,arg3,arg4);
  *(rtps_writerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1missing_1changes_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return ;
  }
  arg2 = *argp2; 
  rtps_writerproxy_missing_changes_update(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1lost_1changes_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return ;
  }
  arg2 = *argp2; 
  rtps_writerproxy_lost_changes_update(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1available_1changes_1max(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = rtps_writerproxy_available_changes_max(arg1);
  *(SequenceNumber_t **)&jresult = new SequenceNumber_t((const SequenceNumber_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1available_1changes_1max_1for_1acknack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  result = rtps_writerproxy_available_changes_max_for_acknack(arg1);
  *(SequenceNumber_t **)&jresult = new SequenceNumber_t((const SequenceNumber_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1irrelevant_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return ;
  }
  arg2 = *argp2; 
  rtps_writerproxy_irrelevant_change_set(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1missing_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  jint *jarr2 ;
  rtps_cachechange_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (rtps_cachechange_t **)rtps_writerproxy_missing_changes(arg1,arg2);
  *(rtps_cachechange_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1matched_1writer_1lookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  GUID_t arg2 ;
  GUID_t *argp2 ;
  rtps_writerproxy_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (rtps_writerproxy_t *)rtps_statefulreader_matched_writer_lookup(arg1,arg2);
  *(rtps_writerproxy_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1received_1change_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return ;
  }
  arg2 = *argp2; 
  rtps_writerproxy_received_change_set(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1is_1exist_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)rtps_writerproxy_is_exist_cache(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  rtps_writerproxy_destroy(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  rtps_writerproxy_ref(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1unref(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  rtps_writerproxy_unref(arg1);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_sequnce_1number_1left_1bigger_1and_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  SequenceNumber_t arg1 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp1 ;
  SequenceNumber_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SequenceNumber_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)sequnce_number_left_bigger_and_equal(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_sequnce_1number_1left_1bigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  SequenceNumber_t arg1 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp1 ;
  SequenceNumber_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SequenceNumber_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)sequnce_number_left_bigger(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_sequnce_1number_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  SequenceNumber_t arg1 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp1 ;
  SequenceNumber_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SequenceNumber_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)sequnce_number_equal(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1new(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rtps_statefulreader_t *)rtps_statefulreader_new();
  *(rtps_statefulreader_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1destory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  rtps_statefulreader_destory(arg1);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1matched_1writer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_writerproxy_t *arg2 = (rtps_writerproxy_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(rtps_writerproxy_t **)&jarg2; 
  result = (bool)rtps_statefulreader_matched_writer_add(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1statefulreader_1matched_1writer_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  rtps_writerproxy_t *arg2 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(rtps_writerproxy_t **)&jarg2; 
  rtps_statefulreader_matched_writer_remove(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jshort jarg3, jobjectArray jarg4, jintArray jarg5) {
  jint jresult = 0 ;
  Parameter arg1 ;
  char *arg2 = (char *) 0 ;
  ParameterId_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  Parameter *argp1 ;
  jint size4 ;
  jint *jarr5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Parameter **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Parameter");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ParameterId_t)jarg3; 
  {
    int i = 0;
    size4 = jenv->GetArrayLength(jarg4);
    arg4 = (char **) malloc((size4+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg4[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg4[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg4[i] = 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return 0; 
  result = (int32_t)find_parameter(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    int i;
    for (i=0; i<size4-1; i++)
    free(arg4[i]);
    free(arg4);
  }
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1in_1parameter_1list_1pl_1cdr_1le(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jshort jarg3, jobjectArray jarg4, jintArray jarg5) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  ParameterId_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  jint size4 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (int32_t)jarg2; 
  arg3 = (ParameterId_t)jarg3; 
  {
    int i = 0;
    size4 = jenv->GetArrayLength(jarg4);
    arg4 = (char **) malloc((size4+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg4[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg4[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg4[i] = 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  find_in_parameter_list_pl_cdr_le(arg1,arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    int i;
    for (i=0; i<size4-1; i++)
    free(arg4[i]);
    free(arg4);
  }
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1parameter_1list(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jshort jarg3, jobjectArray jarg4, jintArray jarg5) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  ParameterId_t arg3 ;
  char **arg4 = (char **) 0 ;
  int *arg5 = (int *) 0 ;
  jint size4 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (int32_t)jarg2; 
  arg3 = (ParameterId_t)jarg3; 
  {
    int i = 0;
    size4 = jenv->GetArrayLength(jarg4);
    arg4 = (char **) malloc((size4+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg4[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg4[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg4[i] = 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  find_parameter_list(arg1,arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    int i;
    for (i=0; i<size4-1; i++)
    free(arg4[i]);
    free(arg4);
  }
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1ParameterList_1for_1remove(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jshort jarg3, jobjectArray jarg4, jintArray jarg5) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  ParameterId_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  jint size4 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (int32_t)jarg2; 
  arg3 = (ParameterId_t)jarg3; 
  {
    int i = 0;
    size4 = jenv->GetArrayLength(jarg4);
    arg4 = (char **) malloc((size4+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size4; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg4[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg4[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg4[i] = 0;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  find_ParameterList_for_remove(arg1,arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    int i;
    for (i=0; i<size4-1; i++)
    free(arg4[i]);
    free(arg4);
  }
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_best_1effort_1statelessreader_1behavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  rtps_statelessreader_t *arg1 = (rtps_statelessreader_t *) 0 ;
  int32_t arg2 ;
  DataFull **arg3 = (DataFull **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statelessreader_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(DataFull ***)&jarg3; 
  best_effort_statelessreader_behavior(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_reliable_1statefulreader_1behavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  DataFull *arg2 = (DataFull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(DataFull **)&jarg2; 
  reliable_statefulreader_behavior(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_best_1effort_1statefulreader_1behavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  DataFull **arg2 = (DataFull **) 0 ;
  data_t *arg3 = (data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  arg2 = *(DataFull ***)&jarg2; 
  arg3 = *(data_t **)&jarg3; 
  best_effort_statefulreader_behavior(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1matched_1writerproxy_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  EntityId_t arg2 ;
  int *arg3 = (int *) 0 ;
  GUID_t *argp1 ;
  EntityId_t *argp2 ;
  jint *jarr3 ;
  rtps_endpoint_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(EntityId_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EntityId_t");
    return 0;
  }
  arg2 = *argp2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return 0; 
  result = (rtps_endpoint_t **)rtps_matched_writerproxy_reader(arg1,arg2,arg3);
  *(rtps_endpoint_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1matched_1readerproxy_1writer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3) {
  jlong jresult = 0 ;
  GUID_t arg1 ;
  EntityId_t arg2 ;
  int *arg3 = (int *) 0 ;
  GUID_t *argp1 ;
  EntityId_t *argp2 ;
  jint *jarr3 ;
  rtps_endpoint_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(GUID_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(EntityId_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EntityId_t");
    return 0;
  }
  arg2 = *argp2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return 0; 
  result = (rtps_endpoint_t **)rtps_matched_readerproxy_writer(arg1,arg2,arg3);
  *(rtps_endpoint_t ***)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1submessage_1header(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  SubmessageHeader *arg3 = (SubmessageHeader *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int32_t)jarg2; 
  arg3 = *(SubmessageHeader **)&jarg3; 
  result = (int32_t)rtps_submessage_header(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1submessage_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  Data arg1 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  uint8_t arg4 ;
  Data *argp1 ;
  DataFull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Data **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Data");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int32_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (DataFull *)rtps_submessage_data(arg1,arg2,arg3,arg4);
  *(DataFull **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1submessage_1datafrag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  DataFrag arg1 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  uint8_t arg4 ;
  DataFrag *argp1 ;
  DataFragFull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(DataFrag **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null DataFrag");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int32_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (DataFragFull *)rtps_submessage_datafrag(arg1,arg2,arg3,arg4);
  *(DataFragFull **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1receive_1heartbeat_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jshort jarg4) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GuidPrefix_t arg2 ;
  Heartbeat arg3 ;
  octet arg4 ;
  GuidPrefix_t *argp2 ;
  Heartbeat *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(GuidPrefix_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(Heartbeat **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Heartbeat");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (octet)jarg4; 
  rtps_receive_heartbeat_procedure(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1receive_1acknack_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jshort jarg5) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GuidPrefix_t arg2 ;
  InfoDestination arg3 ;
  AckNack arg4 ;
  octet arg5 ;
  GuidPrefix_t *argp2 ;
  InfoDestination *argp3 ;
  AckNack *argp4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(GuidPrefix_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(InfoDestination **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null InfoDestination");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(AckNack **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AckNack");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (octet)jarg5; 
  rtps_receive_acknack_procedure(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1receive_1data_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jshort jarg5, jboolean jarg6, jlong jarg7) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GuidPrefix_t arg2 ;
  Data arg3 ;
  SerializedPayload *arg4 = (SerializedPayload *) 0 ;
  octet arg5 ;
  bool arg6 ;
  DataFull *arg7 = (DataFull *) 0 ;
  GuidPrefix_t *argp2 ;
  Data *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(GuidPrefix_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(Data **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Data");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(SerializedPayload **)&jarg4; 
  arg5 = (octet)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(DataFull **)&jarg7; 
  rtps_receive_data_procedure(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1receive_1gap_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jshort jarg5) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GuidPrefix_t arg2 ;
  InfoDestination arg3 ;
  Gap arg4 ;
  octet arg5 ;
  GuidPrefix_t *argp2 ;
  InfoDestination *argp3 ;
  Gap *argp4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(GuidPrefix_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(InfoDestination **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null InfoDestination");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(Gap **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Gap");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (octet)jarg5; 
  rtps_receive_gap_procedure(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1receive_1heartbeat_1frag_1procedure(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jshort jarg5) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  GuidPrefix_t arg2 ;
  InfoDestination arg3 ;
  HeartbeatFrag arg4 ;
  octet arg5 ;
  GuidPrefix_t *argp2 ;
  InfoDestination *argp3 ;
  HeartbeatFrag *argp4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  argp2 = *(GuidPrefix_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GuidPrefix_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(InfoDestination **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null InfoDestination");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(HeartbeatFrag **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null HeartbeatFrag");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (octet)jarg5; 
  rtps_receive_heartbeat_frag_procedure(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_sequnce_1number_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SequenceNumber_t arg1 ;
  SequenceNumber_t *argp1 ;
  SequenceNumber_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SequenceNumber_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg1 = *argp1; 
  result = sequnce_number_inc(arg1);
  *(SequenceNumber_t **)&jresult = new SequenceNumber_t((const SequenceNumber_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_sequnce_1number_1dec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SequenceNumber_t arg1 ;
  SequenceNumber_t *argp1 ;
  SequenceNumber_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SequenceNumber_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg1 = *argp1; 
  result = sequnce_number_dec(arg1);
  *(SequenceNumber_t **)&jresult = new SequenceNumber_t((const SequenceNumber_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_sequnce_1number_1difference(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SequenceNumber_t arg1 ;
  SequenceNumber_t arg2 ;
  SequenceNumber_t *argp1 ;
  SequenceNumber_t *argp2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(SequenceNumber_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(SequenceNumber_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumber_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int32_t)sequnce_number_difference(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1write_1from_1builtin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  SerializedPayloadForWriter *arg2 = (SerializedPayloadForWriter *) 0 ;
  InstanceHandle_t arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(SerializedPayloadForWriter **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (void *)rtps_write_from_builtin(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1write_1from_1builtin_1rapidly(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  SerializedPayloadForWriter *arg2 = (SerializedPayloadForWriter *) 0 ;
  InstanceHandle_t arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = *(SerializedPayloadForWriter **)&jarg2; 
  arg3 = (InstanceHandle_t)jarg3; 
  result = (void *)rtps_write_from_builtin_rapidly(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_gererate_1parameter(JNIEnv *jenv, jclass jcls, jstring jarg1, jintArray jarg2, jshort jarg3, jshort jarg4, jlong jarg5) {
  char *arg1 = (char *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  int16_t arg3 ;
  int16_t arg4 ;
  void *arg5 = (void *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  arg3 = (int16_t)jarg3; 
  arg4 = (int16_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  gererate_parameter(arg1,arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_destory_1liveliness(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  destory_liveliness();
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1writerproxy_1missing_1changes_1and_1missing_1sequencenumberset(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  SequenceNumberSet arg3 ;
  jint *jarr2 ;
  SequenceNumberSet *argp3 ;
  SequenceNumberSet result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  argp3 = *(SequenceNumberSet **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SequenceNumberSet");
    return 0;
  }
  arg3 = *argp3; 
  result = rtps_writerproxy_missing_changes_and_missing_sequencenumberset(arg1,arg2,arg3);
  *(SequenceNumberSet **)&jresult = new SequenceNumberSet((const SequenceNumberSet &)result); 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1get_1fragmentsize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  module_object_t *arg1 = (module_object_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(module_object_t **)&jarg1; 
  result = (int)rtps_get_fragmentsize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_have_1topic_1name_1topic_1type_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)have_topic_name_topic_type_reader(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_have_1topic_1name_1topic_1type_1writer(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  rtps_writer_t *arg1 = (rtps_writer_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writer_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)have_topic_name_topic_type_writer(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_compare_1timebasedfilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Duration_t arg1 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  Duration_t arg3 ;
  Duration_t *argp1 ;
  Duration_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Duration_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Duration_t **)&jarg2; 
  argp3 = *(Duration_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)compare_timebasedfilter(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_process_1lifespan_1for_1historycache(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  process_lifespan_for_historycache(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_input_1lifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  rtps_statefulreader_t *arg2 = (rtps_statefulreader_t *) 0 ;
  rtps_writerproxy_t *arg3 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = *(rtps_statefulreader_t **)&jarg2; 
  arg3 = *(rtps_writerproxy_t **)&jarg3; 
  input_lifespan(arg1,arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_compare_1deadline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Duration_t arg1 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  Duration_t arg3 ;
  Duration_t *argp1 ;
  Duration_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Duration_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Duration_t **)&jarg2; 
  argp3 = *(Duration_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)compare_deadline(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1rxo_1qos_1from_1parameterlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int32_t)jarg3; 
  find_rxo_qos_from_parameterlist(arg1,arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1publisher_1qos_1from_1parameterlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  PublisherQos *arg1 = (PublisherQos *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublisherQos **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int32_t)jarg3; 
  find_publisher_qos_from_parameterlist(arg1,arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_compare_1rxo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RxOQos *arg1 = (RxOQos *) 0 ;
  RxOQos *arg2 = (RxOQos *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(RxOQos **)&jarg2; 
  result = (bool)compare_rxo(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_compare_1partition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  PartitionQosPolicy arg1 ;
  PartitionQosPolicy arg2 ;
  PartitionQosPolicy *argp1 ;
  PartitionQosPolicy *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(PartitionQosPolicy **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PartitionQosPolicy");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(PartitionQosPolicy **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PartitionQosPolicy");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)compare_partition(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1requested_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  rtps_reader_t *arg2 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(rtps_reader_t **)&jarg2; 
  get_requested_qos(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1subscriber_1qos_1from_1parameterlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  SubscriberQos *arg1 = (SubscriberQos *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SubscriberQos **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int32_t)jarg3; 
  find_subscriber_qos_from_parameterlist(arg1,arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1offered_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RxOQos *arg1 = (RxOQos *) 0 ;
  rtps_writer_t *arg2 = (rtps_writer_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RxOQos **)&jarg1; 
  arg2 = *(rtps_writer_t **)&jarg2; 
  get_offered_qos(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_compare_1deadline_1for_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Time_t arg1 ;
  Duration_t *arg2 = (Duration_t *) 0 ;
  Duration_t arg3 ;
  Time_t *argp1 ;
  Duration_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Time_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Time_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Duration_t **)&jarg2; 
  argp3 = *(Duration_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Duration_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)compare_deadline_for_datawriter(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_process_1lifespan_1for_1writer_1historycache(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_statefulwriter_t *arg1 = (rtps_statefulwriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulwriter_t **)&jarg1; 
  process_lifespan_for_writer_historycache(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1lifespan_1qos_1from_1parameterlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int32_t)jarg3; 
  find_lifespan_qos_from_parameterlist(arg1,arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1exclusive_1writer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  rtps_reader_t *arg1 = (rtps_reader_t *) (rtps_reader_t *)0 ;
  GUID_t *arg2 = (GUID_t *) (GUID_t *)0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  arg2 = *(GUID_t **)&jarg2; 
  result = (int32_t)find_exclusive_writer((rtps_reader_t const *)arg1,(GUID_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1default_1port(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  set_default_port(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1default_1port(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_default_port();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1metatraffic_1port(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  set_metatraffic_port(arg1);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1metatraffic_1port(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_metatraffic_port();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1remove_1remote_1entity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  DataFull *arg1 = (DataFull *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  result = (bool)rtps_remove_remote_entity(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_update_1writerproxy_1rrom_1rtps_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_writerproxy_t *arg1 = (rtps_writerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_writerproxy_t **)&jarg1; 
  update_writerproxy_rrom_rtps_reader(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_update_1readerproxy_1from_1rtps_1writer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  update_readerproxy_from_rtps_writer(arg1);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1define_1user_1entity_1lock(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)get_define_user_entity_lock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_reader_1thread2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (int)reader_thread2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_writer_1thread2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  result = (int)writer_thread2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1enable_1multicast(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  service_t *arg1 = (service_t *) 0 ;
  rtps_statefulwriter_t *arg2 = (rtps_statefulwriter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(service_t **)&jarg1; 
  arg2 = *(rtps_statefulwriter_t **)&jarg2; 
  set_enable_multicast(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_rtps_1cachechange_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3) {
  rtps_cachechange_t *arg1 = (rtps_cachechange_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_cachechange_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  rtps_cachechange_ref(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HISTORYCACHE_1LOCK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  HISTORYCACHE_LOCK(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_HISTORYCACHE_1UNLOCK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_historycache_t *arg1 = (rtps_historycache_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_historycache_t **)&jarg1; 
  HISTORYCACHE_UNLOCK(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_READER_1LOCK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  READER_LOCK(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_READER_1UNLOCK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rtps_reader_t *arg1 = (rtps_reader_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_reader_t **)&jarg1; 
  READER_UNLOCK(arg1);
}


SWIGEXPORT jboolean JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_have_1topic_1name_1topic_1type_1topic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  Topic *arg1 = (Topic *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Topic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)have_topic_name_topic_type_topic(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_qosim_1dcps_1message_1ordering_1source_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  message_t **arg1 = (message_t **) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(message_t ***)&jarg1; 
  arg2 = (int)jarg2; 
  qosim_dcps_message_ordering_source_timestamp(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_generate_1user_1data_1for_1domainparticipant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)generate_user_data_for_domainparticipant(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_qosim_1process_1coherent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  rtps_readerproxy_t *arg1 = (rtps_readerproxy_t *) 0 ;
  rtps_cachechange_t *arg2 = (rtps_cachechange_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_readerproxy_t **)&jarg1; 
  arg2 = *(rtps_cachechange_t **)&jarg2; 
  qosim_process_coherent_set(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_qosim_1make_1coherent_1set_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  DataFull *arg1 = (DataFull *) 0 ;
  SequenceNumber_t *arg2 = (SequenceNumber_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataFull **)&jarg1; 
  arg2 = *(SequenceNumber_t **)&jarg2; 
  qosim_make_coherent_set_parameter(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_find_1user_1data_1qos_1from_1parameterlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  UserDataQosPolicy *arg1 = (UserDataQosPolicy *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UserDataQosPolicy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int32_t)jarg3; 
  find_user_data_qos_from_parameterlist(arg1,arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_print_1user_1data_1qos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  UserDataQosPolicy arg1 ;
  UserDataQosPolicy *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(UserDataQosPolicy **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null UserDataQosPolicy");
    return ;
  }
  arg1 = *argp1; 
  print_user_data_qos(arg1);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1qos_1about_1user_1data_1qos_1from_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  set_qos_about_user_data_qos_from_datawriter(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1qos_1about_1user_1data_1qos_1from_1datawriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataWriter *arg1 = (DataWriter *) 0 ;
  DataWriterQos *arg2 = (DataWriterQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataWriter **)&jarg1; 
  arg2 = *(DataWriterQos **)&jarg2; 
  get_qos_about_user_data_qos_from_datawriter(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1qos_1about_1user_1data_1qos_1from_1domainparticipant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DomainParticipant *arg1 = (DomainParticipant *) 0 ;
  DomainParticipantQos *arg2 = (DomainParticipantQos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DomainParticipant **)&jarg1; 
  arg2 = *(DomainParticipantQos **)&jarg2; 
  set_qos_about_user_data_qos_from_domainparticipant(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1key_1guid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  GUID_t arg2 ;
  DataFull *arg3 = (DataFull *) 0 ;
  GUID_t *arg4 = (GUID_t *) 0 ;
  bool *arg5 = (bool *) 0 ;
  bool *arg6 = (bool *) 0 ;
  GUID_t *argp2 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(DataFull **)&jarg3; 
  arg4 = *(GUID_t **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = *(bool **)&jarg6; 
  result = (rtps_cachechange_t *)check_key_guid(arg1,arg2,arg3,arg4,arg5,arg6);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_check_1key_1guid_1for_1reliability(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  rtps_statefulreader_t *arg1 = (rtps_statefulreader_t *) 0 ;
  GUID_t arg2 ;
  DataFull *arg3 = (DataFull *) 0 ;
  SerializedPayload *arg4 = (SerializedPayload *) 0 ;
  GUID_t *arg5 = (GUID_t *) 0 ;
  bool *arg6 = (bool *) 0 ;
  bool *arg7 = (bool *) 0 ;
  GUID_t *argp2 ;
  rtps_cachechange_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rtps_statefulreader_t **)&jarg1; 
  argp2 = *(GUID_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GUID_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(DataFull **)&jarg3; 
  arg4 = *(SerializedPayload **)&jarg4; 
  arg5 = *(GUID_t **)&jarg5; 
  arg6 = *(bool **)&jarg6; 
  arg7 = *(bool **)&jarg7; 
  result = (rtps_cachechange_t *)check_key_guid_for_reliability(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(rtps_cachechange_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_encapsulation_1schemes_1t_1Encapsulation_1Scheme_1Identifier1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Encapsulation_Scheme_Identifier1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_encapsulation_1schemes_1t_1Encapsulation_1Scheme_1Identifier1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  result = (uint8_t) ((arg1)->Encapsulation_Scheme_Identifier1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_encapsulation_1schemes_1t_1Encapsulation_1Scheme_1Identifier2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Encapsulation_Scheme_Identifier2 = arg2;
}


SWIGEXPORT jshort JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_encapsulation_1schemes_1t_1Encapsulation_1Scheme_1Identifier2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  result = (uint8_t) ((arg1)->Encapsulation_Scheme_Identifier2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_encapsulation_1schemes_1t_1Encapsulation_1Scheme_1Identifier_1options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Encapsulation_Scheme_Identifier_options = arg2;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_encapsulation_1schemes_1t_1Encapsulation_1Scheme_1Identifier_1options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  result = (uint16_t) ((arg1)->Encapsulation_Scheme_Identifier_options);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_new_1encapsulation_1schemes_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  encapsulation_schemes_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (encapsulation_schemes_t *)new encapsulation_schemes_t();
  *(encapsulation_schemes_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_delete_1encapsulation_1schemes_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  encapsulation_schemes_t *arg1 = (encapsulation_schemes_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(encapsulation_schemes_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_POLLING_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DefaultleaseDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Duration_t *arg1 = (Duration_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Duration_t **)&jarg1; 
  DefaultleaseDuration = *arg1;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_DefaultleaseDuration_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Duration_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Duration_t *)&DefaultleaseDuration;
  *(Duration_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_open_1file(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FILE *)open_file((char const *)arg1,(char const *)arg2);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_close_1file(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int)close_file(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_strlcpy(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = strlcpy(arg1,(char const *)arg2,arg3);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_vasprintf(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  jint size1 ;
  va_list *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    int i = 0;
    size1 = jenv->GetArrayLength(jarg1);
    arg1 = (char **) malloc((size1+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size1; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg1[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg1[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg1[i] = 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(va_list **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null va_list");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)vasprintf(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    int i;
    for (i=0; i<size1-1; i++)
    free(arg1[i]);
    free(arg1);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_asprintf(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  jint size1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    int i = 0;
    size1 = jenv->GetArrayLength(jarg1);
    arg1 = (char **) malloc((size1+1)*sizeof(char *));
    /* make a copy of each string */
    for (i = 0; i<size1; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char * c_string = jenv->GetStringUTFChars(j_string, 0);
      arg1[i] = (char *)malloc((strlen(c_string)+1)*sizeof(char));
      strcpy(arg1[i], c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string);
      jenv->DeleteLocalRef(j_string);
    }
    arg1[i] = 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)asprintf(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    int i;
    for (i=0; i<size1-1; i++)
    free(arg1[i]);
    free(arg1);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1default_1local_1address(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)get_default_local_address();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_set_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  dds_string *arg1 = (dds_string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  set_string(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_kr_re_etri_cps_cpsmoduleJNI_get_1_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  dds_string *arg1 = (dds_string *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dds_string **)&jarg1; 
  result = (char *)get__string(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


#ifdef __cplusplus
}
#endif

